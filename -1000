REM"
REM'  
REM        
REM'       
REM"  
REM"
REM"SmileBOY
REM'GB emulator for SmileBASIC 4
REM Version 1.0
REM By Thomas Gijsbers
REM AKA @RaichuBender

'Z80 emulator based on みうぃき's PC8801 emulator
'heavilly modified to work with the DMG

'********************
'*
'* 07/20/2020:
'*
'* ALPHA 0.1
'*  - Initial pre-release
'*
'********************
'*
'* 01/01/2022
'*
'* BETA 0.8
'*  - Added Hex-Viewer
'*  - Overhauled Preprocess
'*    components
'*  - Countless small
'*    optimizations
'*    and refactors
'*  - PkMn Tool (wip)
'*
'********************
'*
'* 02/08/2022
'*
'* BETA 0.9
'*  - Implemented RTC (experimental)
'*  - Additional small
'*    optimizations
'*    and refactors
'*
'*-------------------
'*
'* 08/16/2023
'*
'* BETA 0.9_36
'*  - Implemented furigana
'*    above non-kana entries
'*    (experimental)
'*
'********************

' Future plans:
'  - Menu overhaul (soon™)
'  - Screen resize options
'   (Currently 4x and 5x
'      can be configured)
'  - In-menu config options
'  - Buttons mapable to analog
'    stick and keyboard keys
'   (WIP, see code)





'VAR PCMVOL$=""

'##################################
'#                                #
'# C O N F I G                    #
'#                                #
'##################################

   'Default: #On, but you might
   '  want to turn it off.
   '  Really helps minimize
   '  frustration dealing with
   '  trivial errors...
   '  Like  “ BEEEEEEP!!!
   '    A HARROWING AND
   '    DISTRESSINGLY
   '    TRAGIC SYNTAX
   '    ERROR OCCURED!
   '      EVACUATE NOW! AAAAAAAAAAA…
   SysParam "SysBeep", #On

   'Default: 12, 2
   BRepeat #B_A, 4, 1
   BRepeat #B_B, 4, 1
   BRepeat #B_X, 4, 1
   BRepeat #B_Y, 4, 1

   BRepeat #B_LUP,    4, 1
   BRepeat #B_LDOWN,  4, 1
   BRepeat #B_LLEFT,  4, 1
   BRepeat #B_LRIGHT, 4, 1

': ROM_AutoInit% = #TRUE

'  NOTE: "MCam" is currently broken.
': Cart$ = "MN"   'None (unbanked)
 : Cart$ = "M1"   'MBC1
': Cart$ = "M2"   'MBC2
': Cart$ = "M3"   'MBC3
': Cart$ = "M3R"  'MBC3 w/ RTC
': Cart$ = "M5"   'MBC5
': Cart$ = "MCam" 'Pocket Camera

' Toggle the following for
' speedup, which significantly
' improves emulation performance
' but causes bugs in some games.
'    Italian Plumber Land 1 won't
'    output sound for instance

 : TAC_TimerHack% = #TRUE


' Skip flag adjustments
' Usually redundant, but slightly
' less accurate

 : FlagRegHack%   = #TRUE


 ' NOTE: Also enables VSYNC    ' Disabling this unlocks
 : Enbl_CPU_Limiter%   = #TRUE ' emulation rate above 100%
 : ThrottleRate%       = 1
 : VSync_Every%        = 1'× Frame

 : HALT_SkipHack%   = #TRUE
 : DisableTimer%    = #FALSE 'Shouldn't be changed
': POKEGOLD_PATCH%  = #TRUE



Option DEFINT
Option STRICT

': Const #HWVer$ = "DMG0"
 : Const #HWVer$ = "DMG"
': Const #HWVer$ = "MGB"
': Const #HWVer$ = "SGB"
': Const #HWVer$ = "SGB2"

'Unimplemented
': Const #HWVer$ = "CGB"
': Const #HWVer$ = "AGB"
                   ' For GBC games on GBA.
                   '    No native GBA emulation
                   '    support.

': AttemptSpoofCGB%    = #TRUE

'****************
'***  Config  ***
'****************
': AutoLoad% = #TRUE
': AutoROM$  = "-"
': AutoST2$  = "-"
': AutoROM$  = "LSDJDEMO.GB"
': AutoST2$  = "LSDJDEMO.ST2"
': AutoROM$  = "LSDJ_BETA.GB"
': AutoPROJ$ = "GB_SAVES"
': AutoST2$  = "LSDJ_BETA.ST2"
': AutoROM$  = "POKEGOLD.GBC"
': AutoROM$  = "POKECRYS.GBC"
': AutoST2$  = "GOODRIDDANCE.ST2"
': AutoST2$  = "POKEGOLDSHIP.ST2"

': PrintEmuRate%       = #TRUE
': IndicatorStyle$     = "Rate%"
': IndicatorStyle$     = "FPS#"
': IndicatorStyle$     = "Gauge"
': IndicatorStyle$     = "Arrow"
': IndicatorStyle$     = "FadeHue"
': IndicatorStyle$     = "FadeHueSubtle"

': FrameDrop_Flash%    = #TRUE


 : EnblAudio%       = #TRUE
 : EnblNoiseChnl%   = #TRUE
': VibrateCh1%      = 1
': VibrateCh2%      = 1
': VibrateCh3%      = 1
': VibrateCh4%      = 1

': RecordAPUWrites% = 5 '<- PRG Slot
 : IF RecordAPUWrites% THEN
   PRGEDIT 5
   PRGDEL -1
 : ENDIF

': UseDebugger      = 1  'Unfinished
': Enbl_GB_Printer% = 1  'Unfinished
': ExperimentalRealTimeEmuPacing% = 1
': ExperimentalRealTimeTimer%     = 1


''''''''''''''''''''''''
' -- Language --       '
'                      '
''''''''''''''''''''''''
''''
 : VAR SysLanguage$ = "DB"  'Debug literal labels
''''
': VAR SysLanguage$ = LEFT$(SysParam("LANG"),2) 'Syslang
': VAR SysLanguage$ = "JA"  '日本語        (Japanese)
': VAR SysLanguage$ = "EN"  'English
': VAR SysLanguage$ = "DE"  'Deutsch    (German)
': VAR SysLanguage$ = "NL"  'Nederlands (Dutch)
': VAR SysLanguage$ = "SU"  'Suomi      (Finnish)
': VAR SysLanguage$ = "ESP" 'Esperanto
''''
 VAR SysLanguage$ = {#DQ+SysLanguage$+#DQ}

 : GUI_Ver%  = 1


''''''''''''''
' -- Font -- '
'            '
''''''''''''''
'Const #DisplayFont   = "GPX"
 Const #DisplayFont   = "#SYS/DEFFONT"
 Exec  "FCP",4
:Const #FontType      = 16
:Const #CharacterSize = 16


''''''''''''''''''''''''
' -- Button mapping -- '
'                      '
''''''''''''''''''''''''
 : InputDevice$ = "CONTROLLER"
': InputDevice$ = "KEYBOARD"

: IF InputDevice$=="CONTROLLER" THEN

Const #btn_A      = #B_RRight ' 
Const #btn_B      = #B_RDown  ' 
Const #btn_START  = #B_RUp    ' 
Const #btn_SELECT = #B_RLeft  ' 

 : DirectionMode$ = "BUTTONS"
': DirectionMode$ = "STICK"

Const #dir_RIGHT  = #B_LRight ' 
Const #dir_DOWN   = #B_LDown  ' 
Const #dir_UP     = #B_LUp    ' 
Const #dir_LEFT   = #B_LLeft  '

: ELSEIF InputDevice$=="KEYBOARD" THEN

Const #btn_A      = &H0D ' RETURN
Const #btn_B      = &H1B ' ESC
Const #btn_START  = &H02 ' HOME
Const #btn_SELECT = &H03 ' END

Const #dir_RIGHT  = &H1C ' 
Const #dir_DOWN   = &H1F ' 
Const #dir_UP     = &H1E ' 
Const #dir_LEFT   = &H1D ' 

: ENDIF'InputDevice$



''''''''''''''''''''''''
' -- Experimental --   '
'                      '
''''''''''''''''''''''''
'Unfinished
:Const #Scale = 5

\@Default    1, 1

': SupportBootROM%  = #FALSE
 : SupportBootROM%  = #TRUE

: IF SupportBootROM% THEN
    VAR SkipBootROM = #FALSE'#TRUE

    ''''''''''''''''''''''''''''''''''''''''
    ' Init state: skip startup routine     '
    '             and start from a state   '
    '             after the BootROM has    '
    '             been disabled            '
    '                                      '
    ''''''''''''''''''''''''''''''''''''''''

: ENDIF'SupportBootROM%


': FreezeRTC%  = #TRUE
': FreezeRTCDay$  = #DQ+"1999/12/12"+#DQ
': FreezeRTCDay$  = #DQ+"1999/12/03"+#DQ
': FreezeRTCTime$ = #DQ+  "12:01:01"+#DQ
':
': FreezeRTCTime$ = #DQ+  "04:01:01"+#DQ
': FreezeRTCTime$ = #DQ+  "02:01:01"+#DQ
': FreezeRTCDay$  = "FORMAT$("+#DQ+"2000/%02D/%02D"+#DQ+",        1+RND(12),1+RND(28))"
': FreezeRTCTime$ = "FORMAT$("+#DQ+"%02D:%02D:%02D"+#DQ+",RND(24),  RND(60),  RND(60))"

''''
'
'
''''
': Patches = #TRUE
: IF    Patches Then
: ENDIF'Patches

: Def TickPatchRoutines
  : 'Nothingness...
: END

'''''''''''''''''''''
' -- Speed hacks -- '
'                   '
'''''''''''''''''''''

' - Underclock
'     Increase value(s) to speed up emulation
'     Slows down GameBoy CPU, so the
'     emulator can keep up
'     Causes bugs and freezes
'     Try it out on different games,
'     but please use with caution!
'
'''''''''''''''''''''''''''''''''''''''''''''''
\@Default    1, 1, 1, 1
\@Acurate    1, 1, 1, 1
\@Optimal    2, 3, 4, 1


 :Const #BaseOAM    =  80
 :Const #BaseVRAM   = 172
 :Const #BaseHBlank = 204
 :Const #BaseVBlank = 456

 :Const #DivideOAM    = 1
 :Const #DivideVRAM   = 1
 :Const #DivideHBlank = 1
 :Const #DivideVBlank = 1


:Const #LineTimeHBlank=#BaseHBlank DIV #DivideHBlank
:Const #LineTimeVBlank=#BaseVBlank DIV #DivideVBlank
:Const #LineTimeOAM   =#BaseOAM    DIV #DivideOAM
:Const #LineTimeVRAM  =#BaseVRAM   DIV #DivideVRAM
:Const #LineTimeTotal =#LineTimeHBlank+#LineTimeVBlank+#LineTimeOAM+#LineTimeVRAM

': DisableObj% = #TRUE
': DisableWin% = #TRUE
': DisableBG%  = #TRUE

 : BG_ProcScanLines% = #TRUE


'''''''''''''''''''''''
'                     '
' -- Rom Corruptor -- '
'                     '
'                     '
'''''''''''''''''''''''
\@Default    0, 9, 1.0

Const #UseRomCorruptor  = #FALSE
Const #CorruptorSeed    = 9
Const #CorruptionFactor = 1.0


'''''''''''''''''''''''
'                     '
' -- Border Color  -- '
'                     '
'                     '
'''''''''''''''''''''''
\@Default    #C_BLACK

'Const #BorderColor = #C_BLACK
'Const #BorderColor = RGB(000,031,063)
Const #BorderColor = &HFF_83769C

':Const #GridColor  = #OFF'&HFF4F4F4F
':Const #GridColor  = &HFF4F4F4F
':Const #GridColor  = &HFF7F8F0F
:Const #GridColor  = &HFFDFFF1F
'''''''''''''''''''''''''''
'                         '
' -- DMG Color palette -- '
'                         '
'                         '
'''''''''''''''''''''''''''
\@Default    0, Nature

'-- PICO-8 --
:Const #P8_Black    =&HFF000000'000
:Const #P8_Storm    =&HFF1D2B53'001
:Const #P8_Wine     =&HFF7E2553'002
:Const #P8_Moss     =&HFF008751'003
:Const #P8_Tan      =&HFFAE5236'004
:Const #P8_Slate    =&HFF5F574F'005
:Const #P8_Silver   =&HFFC2C3C7'006
:Const #P8_White    =&HFFFFF1E8'007

:Const #P8_Cocoa    =&HFF291814'128
:Const #P8_Midnight =&HFF111D35'129
:Const #P8_Port     =&HFF422136'130
:Const #P8_Sea      =&HFF125359'131
:Const #P8_Leather  =&HFF742F29'132
:Const #P8_Charcoal =&HFF49333E'133
:Const #P8_Olive    =&HFFA28879'134
:Const #P8_Sand     =&HFFF3EF7D'135

:Const #P8_Ember    =&HFFFF004D'008
:Const #P8_Orange   =&HFFFFA300'009
:Const #P8_Lemon    =&HFFFFEC27'010
:Const #P8_Lime     =&HFF00E436'011
:Const #P8_Sky      =&HFF29ADFF'012
:Const #P8_Dusk     =&HFF83769C'013
:Const #P8_Pink     =&HFFFF77A8'014
:Const #P8_Peach    =&HFFFFCCAA'015

:Const #P8_Crimson  =&HFFBE1250'136
:Const #P8_Amber    =&HFFFF6C24'137
:Const #P8_Tea      =&HFFABE72E'138
:Const #P8_Jade     =&HFF00B543'139
:Const #P8_Denim    =&HFF065AB5'140
:Const #P8_Aubergine=&HFF754665'141
:Const #P8_Salmon   =&HFFFF6E59'142
:Const #P8_Coral    =&HFFFF9D81'143


Const #P8_Black    =&HFF000000'000
Const #P8_Storm    =&HFF1D2B53'001
Const #P8_Wine     =&HFF7E2553'002
Const #P8_Moss     =&HFF008751'003
Const #P8_Tan      =&HFFAE5236'004
Const #P8_Slate    =&HFF5F574F'005
Const #P8_Silver   =&HFFC2C3C7'006
Const #P8_White    =&HFFFFF1E8'007

Const #P8_Cocoa    =&HFF291814'128
Const #P8_Midnight =&HFF111D35'129
Const #P8_Port     =&HFF422136'130
Const #P8_Sea      =&HFF125359'131
Const #P8_Leather  =&HFF742F29'132
Const #P8_Charcoal =&HFF49333E'133
Const #P8_Olive    =&HFFA28879'134
Const #P8_Sand     =&HFFF3EF7D'135

Const #P8_Ember    =&HFFFF004D'008
Const #P8_Orange   =&HFFFFA300'009
Const #P8_Lemon    =&HFFFFEC27'010
Const #P8_Lime     =&HFF00E436'011
Const #P8_Sky      =&HFF29ADFF'012
Const #P8_Dusk     =&HFF83769C'013
Const #P8_Pink     =&HFFFF77A8'014
Const #P8_Peach    =&HFFFFCCAA'015

Const #P8_Crimson  =&HFFBE1250'136
Const #P8_Amber    =&HFFFF6C24'137
Const #P8_Tea      =&HFFABE72E'138
Const #P8_Jade     =&HFF00B543'139
Const #P8_Denim    =&HFF065AB5'140
Const #P8_Aubergine=&HFF754665'141
Const #P8_Salmon   =&HFFFF6E59'142
Const #P8_Coral    =&HFFFF9D81'143


Const #invert_Colors = #FALSE

: ENUM #BGP%,#OB0%,#OB1%

: DIM P$[]=["","","",""]
: DIM F$="[%D,%D,%D,%D]"

': AssignPalette "__BP__", #BGP%
': AssignPalette "__O0__", #OB0%
': AssignPalette "__O1__", #OB1%

': AssignPalette "HiCntrst0", #BGP%
': AssignPalette "HiCntrst1", #OB0%
': AssignPalette "HiCntrst2", #OB1%

': AssignPalette "1bit", #BGP%
': AssignPalette "1bit", #OB0%
': AssignPalette "1bit", #OB1%

': AssignPalette "Default0", #BGP%
': AssignPalette "Default1", #OB0%
': AssignPalette "Default2", #OB1%
': AssignPalette "CGB_BG", #BGP%
': AssignPalette "CGB_O0", #OB0%
': AssignPalette "CGB_O1", #OB1%

': AssignPalette "DMG", #BGP%
': AssignPalette "DMG", #OB0%
': AssignPalette "DMG", #OB1%
: AssignPalette "DMG_Bright", #BGP%
: AssignPalette "DMG_Bright", #OB0%
: AssignPalette "DMG_Bright", #OB1%

': AssignPalette "B/W", #BGP%
': AssignPalette "B/W", #OB0%
': AssignPalette "B/W", #OB1%

: DEF  AssignPalette ID, D
: Case(ID)

:WHEN"PROTO":
:P$[D]=format$(F$,&HFF4F4F4F,&HFF5F6F6F,&HFF9FAF5F,&HFFEFCF3F)
':P$[D]=format$(F$,&HFF3F4F3F,&HFF6F6F7F,&HFF9FAF5F,&HFFEFCF3F)
':P$[D]=format$(F$,&HFF3F6F3F,&HFF6F9F7F,&HFF9FCF5F,&HFFEFCF3F)
':P$[D]=format$(F$,&HFF3F5F4F,&HFF6F7F7F,&HFFAFBF6F,&HFFEFCF3F)
':P$[D]=format$(F$,&HFF1F7F5F,&HFF2F9F3F,&HFF7FCF4F,&HFFCFFF3F)
':P$[D]=format$(F$,RGB( 63, 63, 63),RGB( 31, 95,223),RGB(191,223, 63),RGB(255,223,255))
':P$[D]=format$(F$,HSV( 90,127, 95),HSV( 90,127,159),HSV(100,127,223),HSV( 60,127,239))
':P$[D]=format$(F$,#P8_Moss,#P8_Jade,#P8_Tea,#P8_Sand)
':P$[D]=format$(F$,#P8_Moss,#P8_Jade,#P8_Lime,#P8_Tea)
':P$[D]=format$(F$,#P8_Sea,#P8_Jade,#P8_Tea,#P8_Sand)
':P$[D]=format$(F$,#P8_Sea,#P8_Jade,#P8_Tea,#P8_Lemon)
':P$[D]=format$(F$,#P8_Sea,#P8_Moss,#P8_Jade,#P8_Tea)
':P$[D]=format$(F$,#C_NAVY,#C_PURPLE,#C_TEAL,#C_CYAN)
':P$[D]=format$(F$,#P8_Port,#P8_Sea,#P8_Tea,#P8_Sand)
':P$[D]=format$(F$,#P8_Port,#P8_Denim,#P8_Jade,#P8_Sand)
':P$[D]=format$(F$,#P8_Midnight,#P8_Sea,#P8_Dusk,#P8_Silver)
':P$[D]=format$(F$,#P8_Sea,#P8_Denim,#P8_Sky,#P8_Silver)
':P$[D]=format$(F$,#P8_Storm,#P8_Jade,#P8_Lemon,#P8_White)
':P$[D]=format$(F$,#P8_Aubergine,#P8_Dusk,#P8_Peach,#P8_White)
':P$[D]=format$(F$,#P8_Storm,#P8_Denim,#P8_Tea,#P8_Sand)
':P$[D]=format$(F$,#P8_Sea,#P8_Amber,#P8_Sky,#P8_Sand)
':P$[D]=format$(F$,#P8_Storm,#P8_Denim,#P8_Tea,#P8_White)
':P$[D]=format$(F$,#P8_Charcoal,#P8_Sea,#P8_Lime,#P8_Sand)
':P$[D]=format$(F$,#P8_Midnight,#P8_Dusk,#P8_Sky,#P8_White)
':P$[D]=format$(F$,#P8_Midnight,#P8_Port,#P8_Moss,#P8_Sand)
':P$[D]=format$(F$,#P8_Port,#P8_Pink,#P8_Sky,#P8_White)
':P$[D]=format$(F$,#P8_Storm,#P8_Moss,#P8_Peach,#P8_White)
':P$[D]=format$(F$,#P8_Denim,#P8_Tea,#P8_Peach,#P8_White)
':P$[D]=format$(F$,#P8_Midnight,#P8_Sea,#P8_Pink,#P8_Peach)
':P$[D]=format$(F$,#P8_Storm,#P8_Sea,#P8_Sky,#P8_Peach)
':P$[D]=format$(F$,#P8_Port,#P8_Aubergine,#P8_Sky,#P8_White)
':P$[D]=format$(F$,#P8_Sea,#P8_Dusk,#P8_Sky,#P8_White)
':P$[D]=format$(F$,#P8_Sea,#P8_Dusk,#P8_Sky,#P8_Sand)
':P$[D]=format$(F$,#P8_Port,#P8_Crimson,#P8_Denim,#P8_Silver)
':P$[D]=format$(F$,#P8_Midnight,#P8_Jade,#P8_Peach,#P8_White)
':P$[D]=format$(F$,#P8_Black,#P8_Midnight,#P8_Denim,#P8_Silver)
':P$[D]=format$(F$,#P8_Storm,#P8_Sea,#P8_Sand,#P8_White)
':P$[D]=format$(F$,#P8_Sea,#P8_Sky,#P8_Sand,#P8_White)
':P$[D]=format$(F$,#P8_Port,#P8_Leather,#P8_Sky,#P8_Sand)
':P$[D]=format$(F$,#P8_Storm,#P8_Wine,#P8_Moss,#P8_White)
':P$[D]=format$(F$,#P8_White,#P8_Sky,#P8_Moss,#P8_Cocoa)
':P$[D]=format$(F$,#P8_Midnight,#P8_Sea,#P8_Denim,#P8_Sky)
':P$[D]=format$(F$,#P8_Charcoal,#P8_Dusk,#P8_Sky,#P8_Tea)
':P$[D]=format$(F$,#P8_Denim,#P8_Jade,#P8_Tea,#P8_Sand)
':P$[D]=format$(F$,#P8_Midnight,#P8_Charcoal,#P8_Sea,#P8_Sky)
':P$[D]=format$(F$,#P8_Port,    #P8_Sea,  #P8_Sky,  #P8_Sand )
':P$[D]=format$(F$,#P8_Cocoa,   #P8_Sea,  #P8_Pink, #P8_Sand)
':P$[D]=format$(F$,#P8_Cocoa,   #P8_Charcoal,#P8_Denim,#P8_Silver)

:When"BPBPBP":
:P$[D]=format$(F$,#P8_Midnight,#P8_Denim,#P8_Jade, #P8_Sand )

:When"__BP__":
:P$[D]=format$(F$,&HFF00131D,&HFF009269,&HFFDBE25B,&HFFFFFFEE)
'P$[D]=format$(F$,#P8_Midnight,#P8_Sea,  #P8_Olive,#P8_White)
:When"__O0__":
:P$[D]=format$(F$,#P8_Black,   #P8_Storm,#P8_Ember,#P8_Peach)
:When"__O1__":
:P$[D]=format$(F$,#P8_Black,   #P8_Wine, #P8_Amber,#P8_Peach)

':When"Custom":
':P$[D]=format$(F$,\
':  &HFF______  ,\
':  &HFF______  ,\
':  &HFF______  ,\
':  &HFF______   )

:When"Default0":
:P$[D]=format$(F$,&h314069,&h106CBF,&h53BF94,&hBCCECF)
:When"Default1":
:P$[D]=format$(F$,&h314069,&hA35384,&hDEC3A9,&hBCCECF)
:When"Default2":
:P$[D]=format$(F$,&h314069,&h944995,&hC0D7AB,&hBCCECF)

:When"Default0_":
:P$[D]=format$(F$,#P8_Storm,#P8_Denim,#P8_Tea,#P8_White)
:When"Default1_":
:P$[D]=format$(F$,#P8_Storm,#P8_Denim,#P8_Tea,#P8_White)
:When"Default2_":
:P$[D]=format$(F$,#P8_Storm,#P8_Denim,#P8_Tea,#P8_White)

:When"UniversalA_0":
:P$[D]=format$(F$,#P8_Sea,#P8_Moss,#P8_Tea,#P8_White)
:When"UniversalA_1":
:P$[D]=format$(F$,#P8_Midnight,#P8_Wine,#P8_Ember,#P8_Sand)
:When"UniversalA_2":
:P$[D]=format$(F$,#P8_Midnight,#P8_Denim,#P8_Sky,#P8_White)

:When"UniversalB_0":
:P$[D]=format$(F$,#P8_Storm,#P8_Jade,#P8_Lemon,#P8_White)
:When"UniversalB_1":
:P$[D]=format$(F$,#P8_Midnight,#P8_Denim,#P8_Sky,#P8_White)
:When"UniversalB_2":
:P$[D]=format$(F$,#P8_Port,#P8_Ember,#P8_Pink,#P8_White)

:When"EyeCandy0":
:P$[D]=format$(F$,#P8_Cocoa,#P8_Port,#P8_Aubergine,#P8_Coral)
:When"EyeCandy1":
:P$[D]=format$(F$,#P8_Wine,#P8_Salmon,#P8_Coral,#P8_Peach)
:When"EyeCandy2":
:P$[D]=format$(F$,#P8_Wine,#P8_Crimson,#P8_Pink,#P8_Peach)

:When"HiCntrst0":
:P$[D]=format$(F$,#C_BLACK,#C_PURPLE,#C_OLIVE,#C_SILVER)
:When"HiCntrst1":
:P$[D]=format$(F$,#C_NAVY,#C_TEAL,#C_LIME,#C_WHITE)
:When"HiCntrst2":
:P$[D]=format$(F$,#C_MAROON,#C_MAGENTA,#C_CYAN,#C_WHITE)

:When"B/W":
:P$[D]=format$(F$,&HFF000000,&HFF555555,&HFFAAAAAA,&HFFFFFFFF)
:When"W/B":
:P$[D]=format$(F$,&HFFFFFFFF,&HFFAAAAAA,&HFF555555,&HFF000000)

:When"OverworldBGP_Alt":
:P$[D]=format$(F$,#P8_Midnight,#P8_Sea,#P8_Tea,#P8_White)
:When"OverworldBGP":
:P$[D]=format$(F$,#P8_Moss,#P8_Tea,#P8_Sand,#P8_White)
:When"OverworldOB0":
:P$[D]=format$(F$,#P8_Midnight,#P8_Crimson,#P8_Amber,#P8_Coral)
:When"OverworldOB1":
:P$[D]=format$(F$,#P8_Midnight,#P8_Storm,#P8_Denim,#P8_Sky)

:When"UA0":
:P$[D]=format$(F$,RGB( 72, 63,169),RGB(192, 89,195),RGB( 70,189,107),RGB(225,197,113))
:When"UA1":
:P$[D]=format$(F$,HSV(356.4375, 63, 63),HSV(228.0000,127,127),HSV(332.4375,191,191),RGB(255,255,255))
:When"UA2":
:P$[D]=format$(F$,&H232F30,&H6B1D7D,&H0A996F,&HF1E88A)

:When"UB0":
:P$[D]=format$(F$,#P8_Black,#P8_Storm,#P8_Jade,#P8_White)
:When"UB1":
:P$[D]=format$(F$,#P8_Port,#P8_Wine,#P8_Ember,#P8_White)
:When"UB2":
:P$[D]=format$(F$,#P8_Sea,#P8_Denim,#P8_Pink,#P8_White)

:When"UC0":
:P$[D]=format$(F$,#P8_Storm,#P8_Moss,#P8_Tea,#P8_White)
:When"UC1":
:P$[D]=format$(F$,#P8_Black,#P8_Crimson,#P8_Pink,#P8_White)
:When"UC2":
:P$[D]=format$(F$,#P8_Black,#P8_Denim,#P8_Sky,#P8_White)

:When"UD0":
:P$[D]=format$(F$,#P8_Midnight,#P8_Leather,#P8_Moss,#P8_White)
:When"UD1":
:P$[D]=format$(F$,#P8_Storm,#P8_Crimson,#P8_Orange,#P8_Peach)
:When"UD2":
:P$[D]=format$(F$,#P8_Port,#P8_Wine,#P8_Ember,#P8_White)

:When"UE0":
:P$[D]=format$(F$,#P8_Leather,#P8_Moss,#P8_Sand,&hFAF1E8)
:When"UE1":
:P$[D]=format$(F$,#P8_Leather,#P8_Salmon,#P8_Coral,#P8_Peach)
:When"UE2":
:P$[D]=format$(F$,#P8_Port,#P8_Wine,#P8_Ember,#P8_White)

:When"Pico8_0":
:P$[D]=format$(F$,&h162B53,#P8_Crimson,#P8_Lemon,#P8_White)
:When"Pico8_1":
:P$[D]=format$(F$,#P8_Midnight,#P8_Wine,#P8_Coral,#P8_White)
:When"Pico8_2":
:P$[D]=format$(F$,#P8_Midnight,#P8_Moss,#P8_Sky,#P8_White)

: When"Nature#1":
:P$[D]=format$(F$,&h00001F,&h1F1FDF,&h7FFF3F,&hEFFFFF)
: When"Nature#2":
:P$[D]=format$(F$,&h000000,&h003F7F,&h3FBF7F,&h7FFFFF)
: When"Ocean":
:P$[D]=format$(F$,&h000000,&h1F1FDF,&h3F7FFF,&HFFFFFF)
: When"Pastel":
:P$[D]=format$(F$,#C_BLACK,&h4F4FAF,&hDF7FFF,#C_WHITE)
: When"Teal":
:P$[D]=format$(F$,&h000000,&h555555 AND #C_BLUE,&hAAAAAA AND #C_AQUA,&HFFFFFF)

: When"SpaghettiW/Cheese":
:P$[D]=format$(F$,&h000000,&HFF0000,&HFFFF00,&HFFFFFF)
: When"Strawberry":
:P$[D]=format$(F$,&h000000,&h9F0000,&HFF00FF,&HFFFFFF)
: When"Clown vomit":
:P$[D]=format$(F$,#C_BLUE,#C_RED,#C_MAGENTA,#C_YELLOW)
: When"Birthday cake":
:P$[D]=format$(F$,#C_BLUE,#C_RED,#C_MAGENTA OR &h7F7F7F,#C_YELLOW OR &hEFEFEF)

: When"LCD_Greenish":
:P$[D]=format$(F$,&h3F3F3F,&h4F5F4F,&h5F6F5F,&h6F7F6F)
: When"LCD_Blueish":
:P$[D]=format$(F$,&h3F3F3F,&h4F4F5F,&h5F5F6F,&h6F6F7F)
: When"LCD_Redish":
:P$[D]=format$(F$,&h3F3F3F,&h5F4F4F,&h6F5F5F,&h7F6F6F)
: When"LCD_Hue":
:P$[D]=format$(F$,&h3F3F3F,&h4F4F5F,&h5F6F6F,&h6F7F6F)

: When"GB_Light_Blue":
:P$[D]=format$(F$,&h071F3F,&h0F3F7F,&h175FAF,&h1F7FFF)
: When"GB_Light_Green":
:P$[D]=format$(F$,&h1F3F07,&h3F7F0F,&h5FAF17,&h7FFF1F)
: When"GB_Light_Purple":
:P$[D]=format$(F$,&h1F073F,&h3F0F7F,&h5F17AF,&h7F1FFF)

: When"DMG":
:P$[D]=format$(F$,&h1F4F1F,&h1F5F2F,&h4F7F1F,&h7F8F0F)
: When"DMG_Bright":
:P$[D]=format$(F$,&h1F3F4F,&h5FAF3F,&h9FDF2F,&hDFFF1F)'

: When"CGB_BG":
':P$[D]=format$(F$,HSV(000,000,000,000),HSV(240,255,102,255),HSV(120,255,170,255),HSV(000,000,255,255))
:P$[D]=format$(F$,HSV(000,000,000),HSV(220,255,159),HSV(070,255,203),HSV(000,000,255))
':P$[D]=format$(F$,#C_BLACK,#C_NAVY,#C_LIME,#C_WHITE)
: When"CGB_O0":
:P$[D]=format$(F$,#C_BLACK,#C_MAROON,RGB(255,127,0),#C_WHITE)
: When"CGB_O1":
:P$[D]=format$(F$,#C_BLACK,#C_NAVY,RGB(0,127,255),#C_WHITE)

: When"_CGB_BG":
:P$[D]=format$(F$,#C_BLACK,RGB(0,0,207),RGB(63,239,127),#C_WHITE)

: When"GBC-esque_1":
:P$[D]=format$(F$,&h0F0F2F,&h3F3F6F,&hCFCF5F,&hEFEFDF)
: When"GBC-esque_2":
:P$[D]=format$(F$,&h0F0F2F,&h3F3F6F,HSV(45,63,160),HSV(50,31,255))

: When"Monochrome":
:P$[D]=format$(F$,&h000000,&h555555,&hAAAAAA,&HFFFFFF)
: When"1bit":
:P$[D]=format$(F$,&h000000,&h000000,&HFFFFFF,&HFFFFFF)

: When"CGA_0":
:P$[D]=format$(F$,#C_BLACK,#C_MAGENTA,#C_CYAN,#C_WHITE)
: When"CGA_2":
:P$[D]=format$(F$,#C_BLACK,#C_RED,#C_LIME,#C_YELLOW)
'
'
'-- GAME SPECIFIC --
: When"PkMn_Yellow":
:P$[D]=format$(F$,&h1F3FBF,&HFF0000,&HFFFF00,&hEFFFFF)
: When"PkMn_Gold":
:P$[D]=format$(F$,&h5F1747,&h9F5F3F,&HFFCF3F,&hEFFFFF)

:When"QWERTY00":
:P$[D]=format$(F$,&hA0E8B8,&h60A0C0,&h0030C0,&h100000)
:When"QWERTY01":
:P$[D]=format$(F$,&h0f0f1f,&h1f3f5f,&h5faf7f,&HFFffff)
:When"QWERTY02":
:P$[D]=format$(F$,&h000000,&haa5533,&HFFff77,&HFFffff)
:When"QWERTY03":
:P$[D]=format$(F$,&h000000,&h555599,&haaffff,&HFFffff)


:When"PetitCom0":
:P$[D]=format$(F$,RGB(  0,  0,  0),RGB( 74, 32,  8),RGB(181,121, 66),RGB(255,251,255))
:When"PetitCom1":
:P$[D]=format$(F$,RGB(  0,  0,  0),RGB(181, 24,  0),RGB(255,251,  0),RGB(255,251,255))
:When"PetitCom2":
:P$[D]=format$(F$,RGB(  0,  0,  0),RGB(123,  0,  0),RGB(  0,178,255),RGB(255,251,255))

:When"GBCD0Alt":
:P$[D]=format$(F$,RGB(  0,  0,  0),RGB(  0,166,113),RGB( 86,255,178),RGB(255,255,255))
:When"GBCD0":
:P$[D]=format$(F$,RGB(  0,  0,  0),RGB(  0, 69, 63),RGB( 92,224,156),RGB(255,255,255))
:When"GBCD1":
:P$[D]=format$(F$,RGB(  0,  0,  0),RGB(191, 41,  0),RGB(255,148, 84),RGB(255,255,255))
:When"GBCD2":
:P$[D]=format$(F$,RGB(  0,  0,  0),RGB(  0, 93,204),RGB( 80,248,255),RGB(255,255,255))


'-- Source: lospec.com --
:When"AmberCRTGB":
:P$[D]=format$(F$,&h0d0405,&h5e1210,&hd35600,&hfed018)
:When"PumpkinGB":
:P$[D]=format$(F$,&h142b23,&h19692c,&he06e16,&hf7db7e)
:When"BarbieTheSlasherMovie":
:P$[D]=format$(F$,&h000000,&h6e1fb1,&hcc3385,&hf8fbf3)
:When"VIVID2BITSCREAM":
:P$[D]=format$(F$,&h561d17,&h5c4fa3,&h74af34,&hcaf532)
'AmberCRTGB            By: skeddles
'PumpkinGB             By: Isa
'BarbieTheSlasherMovie By: obliviiist
'VIVID2BITSCREAM       By: Polyducks

:   ENDCase
: END



'    ##################################
'    #                                #
'    # A U D I O                      #
'    #                                #
'    ##################################

:    SemitoneRoot$="A"
:      OctaveRoot%=000


:    APU_CH1_A$ = \MML
:      ":0 @224 @E  $3,127,  0,127 @MP 127,127, $4,  0 V$0 L1 T$2 P  0 O"+STR$(OctaveRoot%)+" "+SemitoneRoot$+" "+\
:      ":1 @224 @E  $3,127,  0,127 @MP 127,127, $4,  0 V$1 L1 T$2 P127 O"+STR$(OctaveRoot%)+" "+SemitoneRoot$+" "

:    APU_CH1_B$ = \
:      ":0 @224 @E 127, $3,  0,127 @MP 127,127, $4,  0 V$0 L1 T$2 P  0 O"+STR$(OctaveRoot%)+" "+SemitoneRoot$+" "+\
:      ":1 @224 @E 127, $3,  0,127 @MP 127,127, $4,  0 V$1 L1 T$2 P127 O"+STR$(OctaveRoot%)+" "+SemitoneRoot$+" "


:    APU_CH2_A$ = \
:      ":0 @225 @E  $3,127,  0,127 V$0 L1 T$2 P  0 O"+STR$(OctaveRoot%)+" "+SemitoneRoot$+" "+\
:      ":1 @225 @E  $3,127,  0,127 V$1 L1 T$2 P127 O"+STR$(OctaveRoot%)+" "+SemitoneRoot$+" "

:    APU_CH2_B$ = \
:      ":0 @225 @E 127, $3,  0,127 V$0 L1 T$2 P  0 O"+STR$(OctaveRoot%)+" "+SemitoneRoot$+" "+\
:      ":1 @225 @E 127, $3,  0,127 V$1 L1 T$2 P127 O"+STR$(OctaveRoot%)+" "+SemitoneRoot$+" "


:    APU_PCM$ = \
:      ":0 @226 V$0 L1 T1 P  0 [O"+STR$(OctaveRoot%)+" "+SemitoneRoot$+"1] "+\
:      ":1 @226 V$1 L1 T1 P127 [O"+STR$(OctaveRoot%)+" "+SemitoneRoot$+"1] "



'':    APU_NOI_A$ = \
'':      ":0 @227 @E   $3,127,  0,127 V$0 L4 T$2 P  0 O"+STR$(OctaveRoot%)+" "+SemitoneRoot$+" "+\
'':      ":1 @227 @E   $3,127,  0,127 V$1 L4 T$2 P127 O"+STR$(OctaveRoot%)+" "+SemitoneRoot$+" "
''
'':    APU_NOI_B$ = \
'':      ":0 @227 @E  127, $3,  0,127 V$0 L4 T$2 P  0 O"+STR$(OctaveRoot%)+" "+SemitoneRoot$+" "+\
'':      ":1 @227 @E  127, $3,  0,127 V$1 L4 T$2 P127 O"+STR$(OctaveRoot%)+" "+SemitoneRoot$+" "

'':    APU_NOI_A$ = \
'':      ":0 @223 @E   $3,127,  0, 31 V$0 L4 T$2 P  0 O"+STR$(OctaveRoot%)+" "+SemitoneRoot$+" "+\
'':      ":1 @223 @E   $3,127,  0, 31 V$1 L4 T$2 P127 O"+STR$(OctaveRoot%)+" "+SemitoneRoot$+" "
''
'':    APU_NOI_B$ = \
'':      ":0 @223 @E  127, $3,  0, 31 V$0 L4 T$2 P  0 O"+STR$(OctaveRoot%)+" "+SemitoneRoot$+" "+\
'':      ":1 @223 @E  127, $3,  0, 31 V$1 L4 T$2 P127 O"+STR$(OctaveRoot%)+" "+SemitoneRoot$+" "

:    APU_NOI_A$ = \
:      ":0 @227 @E  $3,127,  0,127 V$0 L1 T$2 P  0 O"+STR$(2+OctaveRoot%)+" "+SemitoneRoot$+" "+\
:      ":1 @227 @E  $3,127,  0,127 V$1 L1 T$2 P127 O"+STR$(2+OctaveRoot%)+" "+SemitoneRoot$+" "

:    APU_NOI_B$ = \
:      ":0 @227 @E 127, $3,  0,127 V$0 L1 T$2 P  0 O"+STR$(2+OctaveRoot%)+" "+SemitoneRoot$+" "+\
:      ":1 @227 @E 127, $3,  0,127 V$1 L1 T$2 P127 O"+STR$(2+OctaveRoot%)+" "+SemitoneRoot$+" "


:    ENUM #P1  =&HFF00,#SB  =&HFF01,#SC  =&HFF02,#DIV =&HFF04,#TIMA=&HFF05,#TMA =&HFF06,#TAC =&HFF07,#IF  =&HFF0F,#NR10=&HFF10,#NR11=&HFF11,#NR12=&HFF12,#NR13=&HFF13,#NR14=&HFF14,#NR21=&HFF16,#NR22=&HFF17,#NR23=&HFF18,#NR24=&HFF19,#NR30=&HFF1A,#NR31=&HFF1B,#NR32=&HFF1C,#NR33=&HFF1D,#NR34=&HFF1E,#NR41=&HFF20,#NR42=&HFF21,#NR43=&HFF22,#NR44=&HFF23,#NR50=&HFF24,#NR51=&HFF25,#NR52=&HFF26,#LCDC=&HFF40,#STAT=&HFF41,#SCY =&HFF42,#SCX =&HFF43,#LY  =&HFF44,#LYC =&HFF45,#DMA =&HFF46,#BGP =&HFF47,#OBP0=&HFF48,#OBP1=&HFF49,#WY  =&HFF4A,#WX  =&HFF4B,#KEY1=&HFF4D,#VBK =&HFF4F,#HDMA1=&HFF51,#HADM2=&HFF52,#HDMA3=&HFF53,#HDMA4=&HFF54,#HDMA5=&HFF55,#RP   =&HFF56,#OPRI =&HFF6C,#SVBK =&HFF70,#UNDOC72=&HFF72,#UNDOC74=&HFF74,#INDOC75=&HFF75,#UNDOC76=&HFF76,#UNDOC77=&HFF77,#IE  =&HFFFF
:    Const #PERF=1666370.0   '5.99893e+06

:    GOSUB @__DEFINITIONS__


'###################


DEF Flash Col%
  Fade Col%
  Fade 0,8
END

: DEF SaveAutoSave
    DIM StateMem[0]
    PUSH StateMem,RGB(        DMG_INTF,New_ROM_Bank,Loaded_ROM_Bank,New_ERAM_Bank)
    PUSH StateMem,RGB(Loaded_ERAM_Bank, ERAM_Access,      ERAM_mode,     PPU_Mode)
    PUSH StateMem,PPU_On
    FOR i=0TO LAST(Mem)PUSH StateMem,Mem[i]Next
    PUSH StateMem,LAST(Mem)
    FOR i=0TO LAST(eram)PUSH StateMem,ERAM[i]Next
    PUSH StateMem,LAST(eram)
    PUSH StateMem,DMG_PC
    PUSH StateMem,DMG_SP
    PUSH StateMem,DMG_HALT
    PUSH StateMem,DMG_State0
    PUSH StateMem,RGB(DMG_A,DMG_F,DMG_B,DMG_C)
    PUSH StateMem,RGB(DMG_D,DMG_E,DMG_H,DMG_L)
    FOR i=0 To Last(CurrentProject$)Push StateMem,Asc(CurrentProject$[I])Next
    PUSH StateMem,Last(CurrentProject$)
    FOR i=0 To Last(Loaded_ROM$)Push StateMem,Asc(Loaded_ROM$[I])Next
    PUSH StateMem,Last(Loaded_ROM$)
    DIM MemGArray = GARRAY(0)
    MemGArray[0]=Len(StateMem)
    For I=1 To Len(StateMem)MemGArray[I] = StateMem[I-1]Next I
: END

: DEF InitLoadAutoSave
    DIM MemGArray = GARRAY(0)
    DIM StateMem[0]
    For I=1 To MemGArray[0]Push StateMem,MemGArray[I]Next I
    VAR Loaded_ROM_LAST=POP(StateMem)Loaded_ROM$ = "#"*(Loaded_ROM_LAST+1)
    FOR i=Loaded_ROM_LAST TO 0STEP-1 Loaded_ROM$[i]=Chr$(POP(StateMem))Next
    VAR CurrentProject_LAST=POP(StateMem)CurrentProject$ = "#"*(CurrentProject_LAST+1)
    FOR i=CurrentProject_LAST TO 0STEP-1 CurrentProject$[i]=Chr$(POP(StateMem))Next
    ROM_loaded = #FALSE

  : IF SupportBootROM% THEN
      UseBootROM = #TRUE
  : ENDIF'SupportBootROM%

: END
    : ResetResolution

: DEF LoadAutoSave
    RGB POP(StateMem)OUT DMG_D,DMG_E,DMG_H,DMG_L
    RGB POP(StateMem)OUT DMG_A,DMG_F,DMG_B,DMG_C
    DMG_State0   =POP(StateMem)
    DMG_HALT     =POP(StateMem)
    DMG_SP       =POP(StateMem)
    DMG_PC       =POP(StateMem)
    VAR ERAM_last=POP(StateMem)IF(LAST(eram)<ERAM_last)then Resize eram,ERAM_last+1
    FOR i=ERAM_last TO 0STEP-1 eram[i]=POP(StateMem)Next
    VAR Mem_last=POP(StateMem)IF(LAST(Mem)<Mem_last)then Resize Mem,Mem_last+1
    FOR i=Mem_last TO 0STEP-1 Mem[i]=POP(StateMem)Next
    PPU_On=POP(StateMem)
    RGB POP(StateMem)OUT Loaded_ERAM_Bank,ERAM_Access,ERAM_mode,PPU_Mode
    RGB POP(StateMem)OUT DMG_INTF,New_ROM_Bank,Loaded_ROM_Bank,New_ERAM_Bank
    VAR K:FOR K=&h8000TO&h97ff
    I=K:J=Mem[K]
    d0=Mem[_d0[I]]
    d1=Mem[_d1[I]]
    FOR x=0TO 7
      sx=_sx[x]
      TMP%=((d0 AND sx)==0)OR(((d1 AND sx)==0)*2)
      TileX=((_TileIdx[I]AND 63)*8)OR x
      TM2%=(_TileY[I]*512)OR TileX
      VRAM_cache[TM2%]=TMP%
'     VRAM_Bitmap[_TileY[I],TileX+1024]=pal[TMP%]
      VRAM_Bitmap[_TileY[I],TileX]=TMP%
      VRAM_DoUpdateBitmap=1
    Next x
    Next K:FOR K=&h9800TO&h9bff
    I=K:J=Mem[K]
      I=I-&h9800
      ofs=(!CommonTileData&&J<128)*256
      TileIdx=J+ofs+&hE800
      y=((I DIV 32)*128)+((I AND 31)*2)
      VRAM_BG_Map[y     ]=TileIdx
      VRAM_BG_Map[y+64  ]=TileIdx
      VRAM_BG_Map[y+4096]=TileIdx
      VRAM_BG_Map[y+4160]=TileIdx
      TileCache0[I] =TileIdx
      VRAM_DoUpdate_BG=1
    Next K:FOR K=&h9c00TO&h9fff
    I=K:J=Mem[K]
      I=I-&h9C00
      ofs=((!CommonTileData&&J<128))*256
      TileIdx=J+ofs+&hE800
      VRAM_WinMap[I DIV 32,(I AND 31)*2]=TileIdx
      TileCache1[I]=TileIdx
      VRAM_DoUpdateWin=1
    Next K
    FOR i=&HFF00TO&HFFffPOKE i,Mem[i]Next
    GUPDATE 4
:IF(ENVTYPE()!=2)THEN
    TUPDATE #BGScreen
    TUPDATE #WinScreen
    LFilter #BGLayer,3,LineOfs_BG#,1
:ENDIF
 :  IF UseDebugger THEN
      DbgCallTrace   = Array%(64)
      DbgReadLogPtr  = Array%(0)
      DbgReadLogSrc  = Array%(0)
      DbgReadLogVal  = Array%(0)
      DbgWriteLogPtr = Array%(0)
      DbgWriteLogSrc = Array%(0)
      DbgWriteLogVal = Array%(0)
 :  ENDIF'UseDebugger
: END

Common Def FromSubRun
  Wait 60

'''': InitLoadAutoSave

  VAR ret

  InitROM
: InitScreen

: IF EnblAudio% THEN
  : InitPitches
' : InitNoise
  : Init_PCM_RAM
  : InitAPU
: ENDIF


  VAR  I,  J, Jc, Jh, Jl
  VAR cf, hf, nf, zf
  VAR nc, cp

  VAR   Reg,  Regc
  VAR DMG_A, DMG_F
  VAR   idx,   flg

: InitScanlines_LFilter

  COPY ZeroTable,       @ZeroTable_DATA
  COPY StateTable,     @StateTable_DATA
  COPY StateTableCB, @StateTableCB_DATA

: Init_DAA_Table
: InitFlagTables
: InitShiftBitTables

  DMG_ResetInit

'''': LoadAutoSave

  ON BREAK Goto @MenuGUI
  DMG_emu -1
END


CONST #NL=CHR$(&H00)
CONST #LF=CHR$(&H0A)
CONST #CR=CHR$(&H0D)
CONST #DQ=CHR$(&H22)


'===============================================
'***********************************************
'*******                                ********
'*******    File loading functions    ********
'*******                                ********
'***********************************************
'===============================================

ENUM #FileType_ROM,       \
     #FileType_Project,   \
     #FileType_ERAM,      \
     #FileType_SaveState, \
     #FileType_LegacyState

:IF AutoLoad% == 0 THEN
  FileSelect #FileType_ROM OUT Loaded_ROM$,CurrentProject$
  GTARGET 4

:ELSE
' CurrentProject$ = PROJECT()
  CurrentProject$ = "GB_ROMS"
  Loaded_ROM$     = {#DQ+AutoROM$+#DQ}

:ENDIF


': VAR OldFileUI% = #TRUE
': VAR NewFileUI% = #TRUE

:IF!OldFileUI%THEN

Const #max_items=37

:IF NewFileUI%THEN

'===============================================
DEF FileSelect FileType% OUT SelectedFile$,SelectedProj$
'===============================================
  dim Projects$ = array$(0)
  dim Files$    = array$(0)
  dim FilesExt$ = array$(0)

  var ProjN%, FileN%

'===============================================
'  Projects$ = files("//")
'
'  ProjN% = find(Projects$,CurrentProject$)
'  IF(ProjN% == -1)then\
'    ProjN% = find(Projects$,project())
'
'  Files$ = files(Projects$[ProjN%])
'  FileN% = 0
'
'===============================================
  on(FileType%)\
  goto@FileSelect_ROM,\
      @FileSelect_Project,\
      @FileSelect_ERAM,\
      @FileSelect_SaveState,\
      @FileSelect_LegacyState
'===============================================

@FileSelect_ROM
@FileSelect_Project
@FileSelect_ERAM
@FileSelect_SaveState
@FileSelect_LegacyState


'===============================================
@DrawFileSelectorUI
'===============================================
  var l
'===============================================
  xscreen 1280,720
  tscreen 4,16,16
'===============================================
  cls'   locate 0,4
  print
  print
  print
  print
  print  "    "+""*34+""+""*34+""
  for l=0 to 34
    print"    "+" "*34+""+" "*34+""
  next l
  print  "    "+""*34+""+""*34+""

loop endloop

' ===================================
END
' ===================================

:ELSE'NewFileUI%

'===============================================
DEF FileSelect FileType% OUT SelectedFile$,SelectedProj$
'===============================================
  VAR FileNo%
  VAR TextPosY%,HighlightedY%,IndexY%
  VAR ScrlOffs%,M_ScrlOffs%
  VAR KB_Key$
  VAR M_Btn%,M_Scrl%
  var Mouse_X,Mouse_Y
  DIM FileList$[0]
  DIM Selectable$[0]
  var PastCursor%
  VAR ANIM_CNT%
' ===================================
  IF(FileType%==#FileType_ROM)THEN
    SelectedProj$="GB_ROMS"
  ELSE
    SelectedProj$=PROJECT()
  ENDIF

' ===================================
  @PrepareFileSelect
' ===================================
  TextPosY%     =  0
  FileNo%       =  0
  ScrlOffs%     =  0
  M_ScrlOffs%   =  0
  M_Scrl%       =  0
  HighlightedY% =  0
  IndexY%       =  0
  ANIM_CNT%     =  0


'    IF(ENVTYPE()!=0)THEN
'        UISTATE 1,0
'        UISTATE 2,0
'        UISTATE 3,0
'        UISTATE 4,0
'        UISTATE 5,0
'''      UIFOCUS X,Y,W,H
'''      UIMASK  X,Y,X+W-1,Y+H-1
'        UIFOCUS 0,0,1280,720
'        UIMASK  0,0,1279,719
'    ENDIF

 'ACLS:
  XSCREEN 1280,720
  TSCREEN 4,16,16

  TCOLOR 4,#C_WHITE
  COLOR    #C_WHITE

  GTARGET 0
  IF(SPUSED(101))THEN
      SPCLR   101

      SPSET   101, 0, 0,1280, 720
      SPPAGE  101, 0

IF(ENVTYPE()!=2)THEN
      SPLAYER 101, 0
ENDIF
      SPOFS   101, 0, 0, -1024
  ENDIF

  SYSPARAM "MOUSECURSOR",#TRUE

  IF(FileType%==#FileType_Project)THEN
    Selectable$=ARRAY$(0)
    FileList$  =FILES("//")

    FOR TMP%=0TO LAST(FileList$)
      IF(INSTR(FileList$[TMP%],     "GB_")+1)\
      ||(INSTR(FileList$[TMP%], PROJECT())+1)\
      ||(INSTR(FileList$[TMP%],   "SMLBY")+1)\
      ||(INSTR(FileList$[TMP%],"SMILEBOY")+1)THEN
        PUSH Selectable$,FileList$[TMP%]
      ENDIF
    Next TMP%

    COPY Selectable$,LEN(Selectable$),FileList$

    GPUTCHRP  0, 0, \
      format$("%s //",#LF),16
  ELSE
    FileList$=FILES("DAT:"+SelectedProj$)
    GPUTCHRP  0,16, \
      format$("%s %s [: ]",#LF,SelectedProj$),16
  ENDIF

  ON(FileType%)Goto@Select_ROM_File,@PresentFileList,@Select_ERAM_SaveFile,@Select_StateFile,@DEPRECATED_Select_StateFile

  Goto@PresentFileList


' ===================================
  @Select_ROM_File
' ===================================
  FOR TMP%=0TO LAST(FileList$)
    IF(RIGHT$(FileList$[TMP%],3)==".GB" )\
    ||(RIGHT$(FileList$[TMP%],4)==".GBC")\
    ||(RIGHT$(FileList$[TMP%],4)==".SGB")\
    ||(RIGHT$(FileList$[TMP%],4)==".BIN")==1\
      THEN PUSH Selectable$,RIGHT$(FileList$[TMP%],LEN(FileList$[TMP%])-4)
  Next

  IF(LEN(Selectable$)==0)THEN
    IF(SelectedProj$=="GB_ROMS")THEN
      SelectedProj$=PROJECT()
      Goto@PrepareFileSelect

    ELSE
      BEEP
      DIALOG format$("%s doesn't contain any valid ROMs",SelectedProj$)
      Goto@ChangeProject
    ENDIF

  ENDIF

  Goto@PresentFileList


' ===================================
  @Select_ERAM_SaveFile
' ===================================
  PUSH Selectable$,"-- None --"
  FOR TMP%=0 TO LAST(FileList$)
    IF(RIGHT$(FileList$[TMP%],4)==".SAV")THEN PUSH Selectable$,RIGHT$(FileList$[TMP%],LEN(FileList$[TMP%])-4)
  Next

  IF(LEN(Selectable$)==0)THEN
    IF(SelectedProj$=="GB_ROMS")THEN
      SelectedProj$=PROJECT()Goto@PrepareFileSelect
    ELSE
      BEEP:DIALOG format$("%s doesn't contain any valid backup SAVs",SelectedProj$)Goto@ChangeProject
    ENDIF
  ENDIF

  Goto@PresentFileList


' ===================================
  @DEPRECATED_Select_StateFile
' ===================================
  PUSH Selectable$,"-- None --"
  FOR TMP%=0 TO LAST(FileList$)
    IF(RIGHT$(FileList$[TMP%],3)==".ST")THEN PUSH Selectable$,RIGHT$(FileList$[TMP%],LEN(FileList$[TMP%])-4)
  Next

  IF(LEN(Selectable$)==0)THEN
    IF(SelectedProj$=="GB_ROMS")THEN
      SelectedProj$=PROJECT()Goto@PrepareFileSelect
    ELSE
      BEEP:DIALOG format$("%s doesn't contain any valid save states",SelectedProj$)Goto@ChangeProject
    ENDIF
  ENDIF

  Goto@PresentFileList


' ===================================
  @Select_StateFile
' ===================================
  PUSH Selectable$,"-- None --"
  FOR TMP%=0 TO LAST(FileList$)
    IF(RIGHT$(FileList$[TMP%],4)==".ST2")THEN PUSH Selectable$,RIGHT$(FileList$[TMP%],LEN(FileList$[TMP%])-4)
  Next

  IF(LEN(Selectable$)==0)THEN
    IF(SelectedProj$=="GB_ROMS")THEN
      SelectedProj$=PROJECT()Goto@PrepareFileSelect
    ELSE
      BEEP:DIALOG format$("%s doesn't contain any valid _V2_ save states",SelectedProj$)Goto@ChangeProject
    ENDIF
  ENDIF

  Goto@PresentFileList


' ===================================
  @PresentFileList
' ===================================
' ===================================
  @While
' ===================================
  HighlightedY% =  HighlightedY% + (M_Scrl% - M_ScrlOffs%)


  IF(HighlightedY% <    0             )THEN  HighlightedY% = LAST(Selectable$)
  IF(HighlightedY% > LAST(Selectable$))THEN  HighlightedY% =    0

  WHILE((HighlightedY%-ScrlOffs%)<0)
    ScrlOffs% = (ScrlOffs%-1) MOD LEN(Selectable$)  WEND

  WHILE((HighlightedY%-ScrlOffs%)!=((HighlightedY%-ScrlOffs%)MOD #max_items))
    ScrlOffs% = (ScrlOffs%+1) MOD LEN(Selectable$)  WEND

' ===================================
  M_ScrlOffs%   =  M_Scrl%
  Vsync : GCLS&HFF000000
  ANIM_CNT% = (ANIM_CNT% + 1) AND 255'63
  MOUSE       OUT,,M_Scrl% : M_Scrl% = (M_Scrl% DIV 120)

' ===================================
  PastCursor% = 0
  FOR TMP%=0 TO #max_items-1 'LAST(Selectable$)
' ===================================

'   -----------------------------------
    IF((TMP%+ScrlOffs%)==HighlightedY%) \
    && (PastCursor%==0) Then
'   -----------------------------------

      PastCursor%=2
      TextPosY%=3+TMP%

'   -----------------------------------

'      GPUTCHR  8+16*SIN(ANIM_CNT%*((2*#PI)/255)+TMP%),16+(16*(TextPosY%+1)-8)+8*COS(ANIM_CNT%*((2*#PI)/255)+TMP%),    \
'     GPUTCHR  8+16*SIN(ANIM_CNT%*((2*#PI)/255)+TMP%),16+(16*(TextPosY%+1)-8)+8*COS(ANIM_CNT%*((2*#PI)/255)+TMP%),    \
      GPUTCHR  8+16*SIN(ANIM_CNT%*((2*#PI)/255)+TMP%),12+(16*(TextPosY%+1)-8)+4*COS(ANIM_CNT%*((2*#PI)/255)+TMP%),    \
      format$(                       \
        "%2d: %s",                   \
        TMP%+ScrlOffs%,              \
        Selectable$[TMP%+ScrlOffs%]  ),16,4,3,\
      HSVF(                          \
        (1/255*ANIM_CNT%)+(TMP%+ScrlOffs%)/LEN(Selectable$),      \
        1.0,1.0                      ), #G_NORMAL
'     MOUSE 128,16*(TextPosY%+1)
      MOUSE OUT Mouse_X,Mouse_Y
'      Mouse_Y = 
      MOUSE Mouse_X,16*(TextPosY%+1)

'   -----------------------------------
    Else
'   -----------------------------------
      TextPosY%=3+TMP%
'     -----------------------------------
      IF((TMP%+ScrlOffs%)>=LEN(Selectable$))THEN BREAK
'     -----------------------------------
'     GPUTCHR  128, 16*(TextPosY%+2*PastCursor%)+8*COS(ANIM_CNT%*((2*#PI)/255)+TMP%),  \
      GPUTCHR  128-64/ABS((TMP%+ScrlOffs%)-HighlightedY%), 16*(TextPosY%+2*PastCursor%)+8*COS(ANIM_CNT%*((2*#PI)/255)+TMP%),  \
      format$(                       \
        "%2d: %s",              \
        TMP%+ScrlOffs%,              \
        Selectable$[TMP%+ScrlOffs%]  ),16,2,2,\
'       HSVF(                        \
'        (4/255*ANIM_CNT%)+(TMP%+ScrlOffs%)/LEN(Selectable$),   \
'        191/255,  \
'        0.6,0.5   ), #G_NORMAL2
        HSVF(                        \
         (4/255*ANIM_CNT%)+(TMP%+ScrlOffs%)/LEN(Selectable$),   \
         1.0/ABS((TMP%+ScrlOffs%)-HighlightedY%),  \
         1.0,0.3+0.5/ABS((TMP%+ScrlOffs%)-HighlightedY%)),#G_NORMAL2'0.7+0.3/ABS((TMP%+ScrlOffs%)-HighlightedY%)   ), #G_NORMAL2
'   -----------------------------------
    ENDIF
' ===================================
  Next

  GColor #C_WHITE

  IF    (FileType%==#FileType_ROM        )THEN GPUTCHRP 0,16*(#max_items+4)," Select ROM with , then press ",16,2,2,#C_WHITE,#G_NORMAL,4\
  ELSEIF(FileType%==#FileType_ERAM       )THEN GPUTCHRP 0,16*(#max_items+4)," Select SAV with , then press ",16,2,2,#C_WHITE,#G_NORMAL,4\
  ELSEIF(FileType%==#FileType_LegacyState)THEN GPUTCHRP 0,16*(#max_items+4)," Select  ST with , then press ",16,2,2,#C_WHITE,#G_NORMAL,4\
  ELSEIF(FileType%==#FileType_SaveState  )THEN GPUTCHRP 0,16*(#max_items+4)," Select ST2 with , then press ",16,2,2,#C_WHITE,#G_NORMAL,4\
  ELSE                                     GPUTCHRP 0,16*(#max_items+4)," Select project with , then press ",16,2,2,#C_WHITE,#G_NORMAL,4

''' ===================================
''  @While
''' ===================================
  KB_Key$ =  ""
  M_Btn%  =  0
  MOUSE OUT,,M_ScrlOffs% : M_ScrlOffs% = (M_ScrlOffs% DIV 120)
  M_Scrl% =  M_ScrlOffs%

''WHILE((KB_Key$!=CHR$(&H0D))&&(M_Btn%==0))
IF(ENVTYPE()==2)THEN
    IF     BUTTON(0,#B_A) THEN
      KB_Key$=CHR$(&H0D)
    ELSEIF BUTTON(0,#B_LUP) THEN
      KB_Key$=CHR$(&H1E)
    ELSEIF BUTTON(0,#B_LDOWN) THEN
      KB_Key$=CHR$(&H1F)
    ELSEIF BUTTON(0,#B_LLEFT) THEN
      KB_Key$=CHR$(&H1D)
    ELSEIF BUTTON(0,#B_LRIGHT) THEN
      KB_Key$=CHR$(&H1C)
    ENDIF
ELSE
    InKey$      OUT  KB_Key$
ENDIF
    MBUTTON  0  OUT  M_Btn%
    MOUSE       OUT,,M_Scrl% : M_Scrl% = (M_Scrl% DIV 120)

    HighlightedY%=HighlightedY% + (M_ScrlOffs% - M_Scrl%)

    IF((FileType%!=#FileType_Project) && (KB_Key$==CHR$(&H08))) \
      Goto@ChangeProject
    IF((FileType%!=#FileType_Project)&&(Button(0,#B_X)))THEN
      SelectedProj$=PROJECT()
      Selectable$  =ARRAY$(0)
      Goto@PrepareFileSelect
    ENDIF

    IF    (KB_Key$==CHR$(&H1E))THEN
      HighlightedY%=HighlightedY%-1
      Goto@PresentFileList
    ELSEIF(KB_Key$==CHR$(&H1F))THEN
      HighlightedY%=HighlightedY%+1
      Goto@PresentFileList
    ELSEIF(KB_Key$==CHR$(&H1D))THEN
      HighlightedY%=HighlightedY%-#max_items
      Goto@PresentFileList
    ELSEIF(KB_Key$==CHR$(&H1C))THEN
      HighlightedY%=HighlightedY%+#max_items
      Goto@PresentFileList
    ENDIF
''WEND
IF((KB_Key$!=CHR$(&H0D))&&(M_Btn%==0))GOTO@While

  FileNo%=HighlightedY% MOD LEN(Selectable$)

  IF(FileType%==#FileType_ROM)THEN
    SelectedFile$=Selectable$[FileNo%]
    IF(SelectedProj$[LAST(SelectedProj$)]=="/")THEN SelectedProj$=LEFT$(SelectedProj$,LAST(SelectedProj$))

  ELSEIF(FileType%==#FileType_ERAM)THEN
    IF(Selectable$[FileNo%]=="-- None --")THEN:SelectedFile$="-"\
    ELSE:SelectedFile$=Selectable$[FileNo%]
      IF(SelectedProj$[LAST(SelectedProj$)]=="/")THEN SelectedProj$=LEFT$(SelectedProj$,LAST(SelectedProj$))

  ELSEIF(FileType%==#FileType_LegacyState)THEN
    IF(Selectable$[FileNo%]=="-- None --")THEN:SelectedFile$="-"\
    ELSE:SelectedFile$=Selectable$[FileNo%]
      IF(SelectedProj$[LAST(SelectedProj$)]=="/")THEN SelectedProj$=LEFT$(SelectedProj$,LAST(SelectedProj$))

  ELSEIF(FileType%==#FileType_SaveState)THEN
    IF(Selectable$[FileNo%]=="-- None --")THEN:SelectedFile$="-"\
    ELSE:SelectedFile$=Selectable$[FileNo%]
      IF(SelectedProj$[LAST(SelectedProj$)]=="/")THEN SelectedProj$=LEFT$(SelectedProj$,LAST(SelectedProj$))

  ELSE
    SelectedProj$=Selectable$[FileNo%]
  ENDIF

  Vsync : Cls : GCLS'&HFF000000
  SYSPARAM "MOUSECURSOR",#FALSE

  IF(SPUSED(101))THEN
      SPCLR   101

      SPSET   101, 0, 0, 256, 256
      SPPAGE  101, 0

IF(ENVTYPE()!=2)THEN
      SPLAYER 101, #BGLayer
ENDIF
      SPOFS   101, 0, 0, -1024
  ENDIF

  RETURN


' ===================================
  @ChangeProject
' ===================================
  FileSelect #FileType_Project OUT , SelectedProj$
  Selectable$=ARRAY$(0)

  Goto@PrepareFileSelect

' ===================================
END
' ===================================

:ENDIF'NewFileUI%
:ELSE'OldFileUI%

CONST #max_items=15'37

ENUM #ROM,#PROJ,#SAV,#ST


'ROM loading functions
DEF select mode OUT romfile$,proj$
FileSelect mode OUT romfile$,proj$
END
DEF FileSelect mode OUT romfile$,proj$
  VAR tY,romno,key$,list_ofs,curY,tmp
  DIM romlist_arr$[0]
  DIM romlist_GB$[0]
  IF mode==#ROM THEN
    proj$ = "GB_ROMS"
  ELSE
    proj$ = PROJECT()
  ENDIF

@BEGIN
  tY=0:romno=0:list_ofs=0:curY=0

  'ACLS:
  XSCREEN 1280/4,720/4,4,2
  TSCREEN 8

  IF mode==#PROJ THEN
    romlist_arr$ = FILES("//")
    ?
    ?" //"
  ELSE
    romlist_arr$ = FILES("DAT:"+proj$)
    ?
    ?" "+proj$+" [: ]"
  ENDIF

  IF mode==#ROM THEN
    FOR tmp=0 TO LAST(romlist_arr$)
      IF (RIGHT$(romlist_arr$[tmp],3)==".GB")||(RIGHT$(romlist_arr$[tmp],4)==".GBC")||(RIGHT$(romlist_arr$[tmp],4)==".SGB")||(RIGHT$(romlist_arr$[tmp],4)==".BIN")==1 THEN
        PUSH romlist_GB$,romlist_arr$[tmp]
      ENDIF
    NEXT

    IF !LEN(romlist_GB$) THEN
      IF proj$ == "GB_ROMS" THEN
        proj$ = PROJECT()
        GOTO @BEGIN

      ELSE
        BEEP
        DIALOG proj$+" doesn't contain any valid ROMs"
        GOTO @CP
      ENDIF

    ENDIF

  ELSEIF mode==#SAV THEN
    PUSH romlist_GB$,"-- None --"

    FOR tmp=0 TO LAST(romlist_arr$)
      IF (RIGHT$(romlist_arr$[tmp],4)==".SAV") THEN
        PUSH romlist_GB$,romlist_arr$[tmp]
      ENDIF
    NEXT

    IF !LEN(romlist_GB$) THEN
      IF proj$ == "GB_ROMS" THEN
        proj$ = PROJECT()
        GOTO @BEGIN

      ELSE
        BEEP
        DIALOG proj$+" doesn't contain any valid backup SAVs"
        GOTO @CP
      ENDIF

    ENDIF

  ELSEIF mode==#ST THEN
    PUSH romlist_GB$,"-- None --"

    FOR tmp=0 TO LAST(romlist_arr$)
      IF (RIGHT$(romlist_arr$[tmp],3)==".ST") THEN
        PUSH romlist_GB$,romlist_arr$[tmp]
      ENDIF
    NEXT

    IF !LEN(romlist_GB$) THEN
      IF proj$ == "GB_ROMS" THEN
        proj$ = PROJECT()
        GOTO @BEGIN

      ELSE
        BEEP
        DIALOG proj$+" doesn't contain any valid save states"
        GOTO @CP
      ENDIF

    ENDIF

  ELSE
    romlist_GB$ = romlist_arr$
  ENDIF

@LIST
  IF     curY < 0 THEN
    curY=LAST(romlist_GB$)
  ENDIF
  IF     curY > LAST(romlist_GB$) THEN
    curY=0
  ENDIF

  WHILE (curY-list_ofs) < 0
    list_ofs = (list_ofs-1)MOD LEN(romlist_GB$)
  WEND

  WHILE (curY-list_ofs) != ((curY-list_ofs) MOD #max_items)
    list_ofs = (list_ofs+1)MOD LEN(romlist_GB$)
  WEND

  FOR tmp=0 TO #max_items-1'LAST(romlist_GB$)
    IF (tmp+list_ofs)>=LEN(romlist_GB$)THEN
      COLOR #C_MAROON
      ?"                                      "
      BREAK

    ELSE
      COLOR HSVF((tmp+list_ofs)/LEN(romlist_GB$),191/255,255/255)
    ENDIF

    tY = 3+tmp

    LOCATE 0,tY
    ?FORMAT$("   %2D: %S                    ",tmp+list_ofs,romlist_GB$[tmp+list_ofs])
  NEXT

  LOCATE 0,#max_items+3
  ?:?:COLOR #C_WHITE

  IF mode==#ROM THEN
    ?" Select ROM with , then press "

  ELSEIF mode==#SAV THEN
    ?" Select SAV with , then press "

  ELSEIF mode==#ST THEN
    ?" Select ST with , then press "

  ELSE
    ?" Select project with , then press "
  ENDIF

@BTN
  LOCATE 2,3+((curY-list_ofs) MOD #max_items)
  ?""

  VSYNC

@WHILE
  WHILE key$!=CHR$(&H0D)
    key$ = INKEY$()

    IF mode!=#PROJ && key$==CHR$(&H08)GOTO @CP

    IF key$==CHR$(&H1E)    THEN
      DEC curY:GOTO @LIST

    ELSEIF key$==CHR$(&H1F)    THEN
      INC curY:GOTO @LIST

    ELSEIF key$==CHR$(&H1D)    THEN
      DEC curY,#max_items:GOTO @LIST

    ELSEIF key$==CHR$(&H1C)    THEN
      INC curY,#max_items:GOTO @LIST

    ENDIF
  WEND
  romno = curY MOD LEN(romlist_GB$)
  IF mode==#ROM THEN
    romfile$ = RIGHT$(romlist_GB$[romno],LEN(romlist_GB$[romno])-4)'TODO
    IF proj$[LAST(proj$)]=="/" THEN proj$ = LEFT$(proj$,LAST(proj$))
  ELSEIF mode==#SAV THEN
    IF romlist_GB$[romno] == "-- None --" THEN
      romfile$="-"
    ELSE
      romfile$ = RIGHT$(romlist_GB$[romno],LEN(romlist_GB$[romno])-4)
      IF proj$[LAST(proj$)]=="/" THEN proj$ = LEFT$(proj$,LAST(proj$))
    ENDIF
  ELSEIF mode==#ST THEN
    IF romlist_GB$[romno] == "-- None --" THEN
      romfile$="-"
    ELSE
      romfile$ = RIGHT$(romlist_GB$[romno],LEN(romlist_GB$[romno])-4)
      IF proj$[LAST(proj$)]=="/" THEN proj$ = LEFT$(proj$,LAST(proj$))
    ENDIF
  ELSE
    proj$ = romlist_GB$[romno]
  ENDIF
RETURN

@CP
'  proj$ = selectproj()
  select #PROJ OUT ,proj$
  romlist_GB$ = ARRAY$(0)
  GOTO @BEGIN
END

:ENDIF'OldFileUI%

' ===================================
'***********************************************
'*******                                 *******
'*******    Emulator initialization    *******
'*******                                 *******
'***********************************************
' ===================================

:IF Use_VPC% THEN
  DIM VPC_to_PC[&h1000000]
:ENDIF'Use_VPC%

' ===================================
:DEF InitVPC_to_PC
' ===================================
  FOR I=0 TO LAST(VPC_to_PC)
    IF(I<=&Hffff)THEN
      VPC_to_PC[I] = I
    ELSE
      VPC_to_PC[I] = &h4000 OR (I AND &h3fff)
    ENDIF
  Next
' ===================================
:END
' ===================================



' ===================================
:DEF InitTilemap
' ===================================
: DrawBorder

  FOR I=0 TO &h9fff
    J   =(I AND &h1ffe)
    TileIdx=(J DIV 16)AND 511
    y   =(J DIV 2)AND 7
    TileY  =((TileIdx DIV 64)*8)+y
    d0  =J+&h8000
    d1  =J+&h8001

    _d0  [I]=d0
    _d1  [I]=d1
    _addr[I]=J
    _TileIdx[I]=TileIdx
    _TileY  [I]=TileY
  Next
' ===================================
:END
' ===================================



' ===================================
:DEF DrawBorder
' ===================================
IF(ENVTYPE()!=2)THEN
  TColor 2,#BorderColor
  FOR I= 0TO 2
    FOR J=0 TO 127TPUT 2,J,I,""Next
  Next I

  FOR I= 3TO 20
    FOR J=0 TO   9TPUT 2,J,I,""Next
    FOR J=30TO 127TPUT 2,J,I,""Next
  Next I

  FOR I=21TO 63
    FOR J=0 TO 127TPUT 2,J,I,""Next
  Next I
ENDIF
' ===================================
:END
' ===================================



' ===================================
:DEF Init_OBJ
' ===================================
  FOR I=0 TO 79
'   SPSET I,1024,0,8,8
    SPSET I,1024,256,8,8
  Next

  Resize DivideBy4,&H10000
  FOR I=0 TO &HFFFF
    DivideBy4[I]=(I DIV 4)MOD 40
  Next

  Resize U_Values,1536
  Resize V_Values,1536
  FOR I=0 TO 1535
    U_Values[I]=((I AND 63)*8)+1024
    V_Values[I]=((I DIV 64)*8)+48
  Next

  Resize AtrFlipY,256
  Resize AtrFlipX,256
  FOR I=0 TO 255
    AtrFlipY[I]=#A_REVV*((I AND&b01000000)!=0)
    AtrFlipX[I]=#A_REVH*((I AND&b00100000)!=0)
  Next
' ===================================
:END
' ===================================



' ===================================
:DEF Init_PCM_RAM
' ===================================
  FOR I=0TO &HF
    Mem[WavPtrnRAM_Table[I DIV 2]]=(I AND 1)*255
  Next
  FOR I=0TO &HFF
''  WavMemory[I]=(I AND &HF0)*&H100+(I AND &HF0)*&H10+\
''         (I AND &H0F)*&H10+(I AND &H0F)
    WavMemory[I]=((255-I)AND&HF0)*&H100+((255-I)AND&HF0)*&H10+\
           ((255-I)AND&H0F)*&H10+((255-I)AND&H0F)
  Next I
:END

:DEF InitAPU
  SNDStop
  Vibrate
  BGMClear

  FOR I=0TO 255
    VolLft#[I]=10+(I AND &h70)*00.625
    VolRgt#[I]=10+(I AND &h07)*10.000

    VolInit#[I]=((I AND &hf0)+((I AND &hf0)DIV 16))/140.0

:   n="(I AND 3)"
    IF {n}==0THEN
'     EnvUp#[I]=127.0
'     EnvDn#[I]=127.0
      EnvUp#[I]=0.0
      EnvDn#[I]=0.0
    ELSE
      EnvUp#[I]=127-{n}*( 63/7)
'     EnvDn#[I]={n}*( 63/3)
'     EnvDn#[I]={n}*( 63/7)
      EnvDn#[I]={n}*18
    ENDIF
  Next

  APU_VolLft#=80.0
  APU_VolRgt#=80.0

  Ch1_Duty$="FFFFFFFF00000000"*8
  WAVSet 224,127,127,127,127,Ch1_Duty$,69
' WAVSet 224,127,127,  0,127,Ch1_Duty$,69
  Ch1_Len#=1
  Ch1_PanL=1Ch1_PanR=1
  Ch1_InitV#=&HF0/96
  Ch1_Attk#=EnvDn#[7]
  Ch1_EnvDir#=1.8

'BGMSet 128,\
'":0 @68  @E   $3,127,  0,127 V$0 L1 T$2 P  0 O0 A"+\
'":1 @68  @E   $3,127,  0,127 V$1 L1 T$2 P127 O0 A"
'
'BGMSet 138,\
'":0 @68  @E  127, $3,  0,127 V$0 L1 T$2 P  0 O0 A"+\
'":1 @68  @E  127, $3,  0,127 V$1 L1 T$2 P127 O0 A"

'BGMSet 128,""
'BGMSet 138,""

  BGMSet 128,{#DQ+APU_CH1_A$+#DQ}
  BGMSet 138,{#DQ+APU_CH1_B$+#DQ}

  BGMVar 1,0,7 'Volume L
  BGMVar 1,1,7 'Volume R
  BGMVar 1,2,1 'Length
  BGMVar 1,4,0 'PitchModLength

  BGMVar 5,0,7 'Volume L
  BGMVar 5,1,7 'Volume R
  BGMVar 5,2,1 'Length
  BGMVar 5,4,0 'PitchModLength


  Ch2_Duty$="FFFFFFFF00000000"*8
  WAVSet 225,127,127,127,127,Ch2_Duty$,69
' WAVSet 225,127,127,  0,127,Ch2_Duty$,69
  Ch2_Len#=1
  Ch2_PanL=1Ch2_PanR=1
  Ch2_InitV#=&HF0/96
  Ch2_Attk#=EnvDn#[7]
  Ch2_EnvDir#=1.8

'BGMSet 129,\
'":0 @74  @E   $3,127,  0,127 V$0 L1 T$2 P  0 O0 A"+\
'":1 @74  @E   $3,127,  0,127 V$1 L1 T$2 P127 O0 A"
'
'BGMSet 139,\
'":0 @74  @E  127, $3,  0,127 V$0 L1 T$2 P  0 O0 A"+\
'":1 @74  @E  127, $3,  0,127 V$1 L1 T$2 P127 O0 A"

'BGMSet 129,""
'BGMSet 139,""

  BGMSet 129,{#DQ+APU_CH2_A$+#DQ}
  BGMSet 139,{#DQ+APU_CH2_B$+#DQ}

  BGMVar 2,0,7 'Volume L
  BGMVar 2,1,7 'Volume R
  BGMVar 2,2,1 'Length

  BGMVar 6,0,7 'Volume L
  BGMVar 6,1,7 'Volume R
  BGMVar 6,2,1 'Length


  Ch3_Len#=1
  Ch3_PanL=1Ch3_PanR=1
  WAVSet 226,127,127,127,127,PCMSample$*8,81
' WAVSet 226,127,127,  0,127,PCMSample$*8,81
' WAVSet 226,127,127,127,  0,PCMSample$*8,81

'BGMSet 130,\
'":0 @75  V$0 L1 T1 P  0 [O0 A1]"+\
'":1 @75  V$1 L1 T1 P127 [O0 A1]"

'BGMSet 130,""

  BGMSet 130,{#DQ+APU_PCM$+#DQ}

  BGMVar 3,0,7 'Volume L
  BGMVar 3,1,7 'Volume R
' BGMVar 3,2,4 'Length


' Ch4_Duty$=format$("%04X%04X%04X%04X%04X%04X%04X%04X",RND(65536),RND(65536),RND(65536),RND(65536),RND(65536),RND(65536),RND(65536),RND(65536))
' WAVSet 227,127,127,127,127,Ch4_Duty$,69
' Ch4_Len#=1Ch4_PanL=1Ch4_PanR=1Ch4_InitV#=&HF0/96Ch4_Attk#=EnvDn#[7]Ch4_EnvDir#=1.8
' BGMSet 131,":0 @227 @E      $3,127,127,127 V$0 T$2 /Q32 Q4/ P  0 O0 A/& @E 127,0,0,127[A1&]/:2 @227 @E 127, $3,      0,127 V$5 T$2 /Q32 Q4/ P  0 O0 A:1 @227 @E      $3,127,127,127 V$1 T$2 /Q32 Q4/ P127 O0 A/& @E 127,0,0,127[A1&]/:3 @227 @E 127, $3,      0,127 V$6 T$2 /Q32 Q4/ P127 O0 A"
' BGMVar 4,0,7 'Volume L
' BGMVar 4,1,7 'Volume R
' BGMVar 4,2,4 'Length

' Ch4_Duty$=format$("%02X%02X%02X%02X%02X%02X%02X%02X",RND(128)*2,RND(128)*2,RND(128)*2,RND(128)*2,RND(128)*2,RND(128)*2,RND(128)*2,RND(128)*2)
' Ch4_Duty$="FF00"
' Ch4_Duty
' WAVSet 227,127,127,127,127,Ch4_Duty$*8,69
' WAVSet 227,127,127,127,127,Ch4_Duty$,69
  Ch4_Len#=1
  Ch4_PanL=1Ch4_PanR=1
  Ch4_InitV#=&HF0/96
  Ch4_Attk#=EnvDn#[7]
  Ch4_EnvDir#=1.8

'BGMSet 131,""
'BGMSet 141,""

' BGMSet 131,":0 @227 @E 127,127,127,127 V63 T63 O0 A192"':2 @227"
' BGMSet 131,\
' ":0 @227 @E   $3,127,  0,127 V$0 L4 T$2 P  0 O4 A"+\
' ":1 @227 @E   $3,127,  0,127 V$1 L4 T$2 P127 O4 A"
'
' BGMSet 141,\
' ":0 @227 @E  127, $3,  0,127 V$0 L4 T$2 P  0 O4 A"+\
' ":1 @227 @E  127, $3,  0,127 V$1 L4 T$2 P127 O4 A"

  BGMSet 131,{#DQ+APU_NOI_A$+#DQ}
  BGMSet 141,{#DQ+APU_NOI_B$+#DQ}

  BGMVar 4,0,7 'Volume L
  BGMVar 4,1,7 'Volume R
  BGMVar 4,2,1 'Length

  BGMVar 8,0,7 'Volume L
  BGMVar 8,1,7 'Volume R
  BGMVar 8,2,1 'Length

:END'InitAPU


:DEF InitPitches
  VAR GB_Freq
  FOR GB_Freq=0 TO 2047
    PitchLo#[GB_Freq] =\
       (131072 / (2048 - GB_Freq)) / 2.0
    PitchHi#[GB_Freq] =\
       (131072 / (2048 - GB_Freq))
    BGMPitch#[GB_Freq] =\
      1200 * LOG((4194304 / (32 * (2048 - GB_Freq))) / 27.50, 2)
  Next REM                                              
:END

:DEF InitNoise
  VAR f,r
  FOR r=0 TO 7
  FOR f=0 TO 2047
    NoisePitch#[f*8+r] =\
      1200 * LOG((524298 / r / POW(2, f+1)), 2)
  Next REM                               
  Next
:END


:DEF InitScanlines_LFilter
: ON #Scale Goto@Scale0,@Scale1,@Scale2,@Scale3,@Scale4,@Scale5

: @Scale0
  InvalidScaleError

: @Scale1
: Goto@ScaleEND

: @Scale2
: Goto@ScaleEND

: @Scale3
: Goto@ScaleEND

: @Scale4
  FOR I=0 TO 255
    LineOfs_X_Table#[    I] = (I -  80) * 1 / 1280
    LineOfs_Y_Table#[255-I] = (I + 306) * 1 /  720
  Next

  FOR I=0 TO 179
    LineOfs_BG#[I,1] = 1/4
    LineOfs_BG#[I,3] = 1/4
    LineOfsWin#[I,1] = 1/4
    LineOfsWin#[I,3] = 1/4
  Next

: Goto@ScaleEND


: @Scale5
  FOR I=0 TO 255
    LineOfs_X_Table#[    I] = (I -  48) * 1 / 1280
    LineOfs_Y_Table#[255-I] = (I + 321) * 1 /  720
  Next

  FOR I=0 TO 143
    LineOfs_BG#[I,1] = 1/5
    LineOfs_BG#[I,3] = 1/5
    LineOfsWin#[I,1] = 1/5
    LineOfsWin#[I,3] = 1/5
  Next


: @ScaleEND
:END'InitScanlines_LFilter

:DEF Init_DAA_Table
  cf=0hf=0nf=0GoSub@DAA_loop
  cf=1hf=0nf=0GoSub@DAA_loop
  cf=0hf=1nf=0GoSub@DAA_loop
  cf=0hf=0nf=1GoSub@DAA_loop
  cf=1hf=1nf=0GoSub@DAA_loop
  cf=1hf=0nf=1GoSub@DAA_loop
  cf=0hf=1nf=1GoSub@DAA_loop
  cf=1hf=1nf=1GoSub@DAA_loop
  Goto@DAA_END

  @DAA_loop
    FOR I=0 TO 255
      Jc = 0
      cp = I + 256*cf + 512*hf + 1024*nf

      IF (nf == 0) THEN
        J  =I+&h06*((hf!=0)||((I AND &h0f)>&h09))\
             +&h60*((cf!=0)||( I          >&h99))
        Jc =                 ( J          >&h9f)

      ELSE
        J  = (I - hf*&h06) - cf*&h60
      ENDIF

      RGB J OUT,,J  'J = *((u8 *)&J)
      DAA_table[cp] = 256*J + 16 * (8 * (J==0) + 4 * nf + cf OR Jc)
    Next I
  RETURN

  @DAA_END
:END'Init_DAA_Table


:DEF InitFlagTables
  var szADD=len(  ADD_table)
  var szADC=len(  ADC_table)
  var szSUB=len(  SUB_table)
  var szSBC=len(  SBC_table)
  var szSGN=len(SGN16_table)

  dim CACHE[szADD+szADC+szSUB+szSBC+szSGN]

  IF CHKFILE("dat:_table.cache")then
    CACHE = LoadV("dat:_table.cache")
    i=0      :copy   ADD_table,CACHE,i,szADD
    i=i+szADD:copy   ADC_table,CACHE,i,szADC
    i=i+szADC:copy   SUB_table,CACHE,i,szSUB
    i=i+szSUB:copy   SBC_table,CACHE,i,szSBC
    i=i+szSBC:copy SGN16_table,CACHE,i,szSGN

  else
    ?"Preparing cache";

    FOR DMG_A=0 TO 255
    FOR   reg=0 TO 255
    idx  = reg + (DMG_A*256)
    regc = reg + 1
\SUB
\SBC                                                                                                                                                                          
    RGB DMG_A - reg  OUT,Jh,Jl:SUB_table[idx] = ZeroTable[Jl] OR &h40 OR ( ( (DMG_A-reg ) < &h00) * &h10)  OR  ( ( ( (DMG_A AND &h0f)  -  (  reg AND &h0f     ) ) < &h00) * &h20)  +  (Jl * 256)
    RGB DMG_A - regc OUT,Jh,Jl:SBC_table[idx] = ZeroTable[Jl] OR &h40 OR ( ( (DMG_A-regc) < &h00) * &h10)  OR  ( ( ( (DMG_A AND &h0f)  -  ( (reg AND &h0f) + 1) ) < &h00) * &h20)  +  (Jl * 256)
    RGB DMG_A + reg  OUT,Jh,Jl:ADD_table[idx] = ZeroTable[Jl] OR         ( ( (DMG_A+reg ) > &HFF) * &h10)  OR  ( ( ( (DMG_A AND &h0f)  +  (  reg AND &h0f     ) ) > &h0f) * &h20)  +  (Jl * 256)
    RGB DMG_A + regc OUT,Jh,Jl:ADC_table[idx] = ZeroTable[Jl] OR         ( ( (DMG_A+regc) > &HFF) * &h10)  OR  ( ( ( (DMG_A AND &h0f)  +  ( (reg AND &h0f) + 1) ) > &h0f) * &h20)  +  (Jl * 256)
\ADD                                                                                                                                                                        
\ADC
    Next?".";
    Next

    FOR J=0 TO &HFFff
      SGN16_table[J] = J-(J>&h7fff)*&HFFff
    Next?".";

    i=0      :copy CACHE,i,  ADD_table,szADD
    i=i+szADD:copy CACHE,i,  ADC_table,szADC
    i=i+szADC:copy CACHE,i,  SUB_table,szSUB
    i=i+szSUB:copy CACHE,i,  SBC_table,szSBC
    i=i+szSBC:copy CACHE,i,SGN16_table,szSGN

'   SaveV"dat:_table.cache",CACHE
    CLS
  ENDIF

  FOR reg=0 TO 255
    INC_table[reg] =  ZeroTable[reg]          OR &h20*((reg AND 15)== 0)
    DEC_table[reg] = (ZeroTable[reg] OR &h40) OR &h20*((reg AND 15)==15)
  Next

  FOR J=0TO 255
    IF J>127THEN
      SGN8_ADD1_table[J]  = J - 256 + 1
      SGN8_table[J] = J - 256
    ELSE
      SGN8_ADD1_table[J]  = J + 1
      SGN8_table[J] = J
    ENDIF
  Next
:END'InitFlagTables


:DEF InitShiftBitTables
  FOR i=0 TO 255
'RLC
    RGB       2* i         OR(i DIV 128)  OUT,,Reg
    DMG_F =  16*(i DIV 128)OR ZeroTable[Reg]
    RLC_table[i]=DMG_F+Reg*256
'RL NC
    RGB 2*i OUT,,Reg
    DMG_F =  16*((i AND&h80)!=0)OR ZeroTable[Reg]
    RL_NC_table[i]=DMG_F+Reg*256
'RL C
    Reg=(i*2OR 1)AND 255
    DMG_F=ZeroTable[Reg]OR&h10*((i AND&h80)!=0)
    RL_C_table[i]=DMG_F+Reg*256
'RRC
    DMG_F=i AND 1
    Reg=i DIV 2 OR DMG_F*128
    DMG_F=DMG_F*16OR ZeroTable[i]
    RRC_table[i]=DMG_F+Reg*256
'RR NC
    Reg=i DIV 2 AND 255DMG_F=ZeroTable[Reg]OR&h10*(i AND 1)
    RR_NC_table[i]=DMG_F+Reg*256
'RR C
    Reg=(i DIV 2 OR&h80)AND 255DMG_F=ZeroTable[Reg]OR&h10*(i AND 1)
    RR_C_table[i]=DMG_F+Reg*256
'SLA
    DMG_F = i DIV 128
    Reg=(i*2)AND 255
    DMG_F=DMG_F*16 OR ZeroTable[Reg]
    SLA_table[i]=DMG_F+Reg*256
'SRA
    DMG_F=i AND 1
    Reg=(i DIV 2)OR(i AND &h80)
    DMG_F=DMG_F*16OR ZeroTable[Reg]
    SRA_table[i]=DMG_F+Reg*256
'SLL
    DMG_F=i DIV 128
    Reg=((i*2)OR 1)AND 255
    DMG_F=(DMG_F*16)OR ZeroTable[Reg]
    SLL_table[i]=DMG_F+Reg*256
'SRL
    DMG_F=i AND 1
    Reg=i DIV 2
    DMG_F=(DMG_F*16)OR ZeroTable[Reg]
    SRL_table[i]=DMG_F+Reg*256
'SWAP
    Reg=(i AND&h0F)*16+i DIV 16
    DMG_F=ZeroTable[Reg]
    SWAP_table[i]=DMG_F+Reg*256

'BIT7
    DMG_F=&h20
    IF(i AND 128)THEN:DMG_F=DMG_F AND&h7F:ELSE:DMG_F=DMG_F OR&h80
    BIT7_table[i]=DMG_F
'BIT6
    DMG_F=&h20
    IF(i AND 64)THEN:DMG_F=DMG_F AND&h7F:ELSE:DMG_F=DMG_F OR&h80
    BIT6_table[i]=DMG_F
'BIT5
    DMG_F=&h20
    IF(i AND 32)THEN:DMG_F=DMG_F AND&h7F:ELSE:DMG_F=DMG_F OR&h80
    BIT5_table[i]=DMG_F
'BIT4
    DMG_F=&h20
    IF(i AND 16)THEN:DMG_F=DMG_F AND&h7F:ELSE:DMG_F=DMG_F OR&h80
    BIT4_table[i]=DMG_F
'BIT3
    DMG_F=&h20
    IF(i AND 8)THEN:DMG_F=DMG_F AND&h7F:ELSE:DMG_F=DMG_F OR&h80
    BIT3_table[i]=DMG_F
'BIT2
    DMG_F=&h20
    IF(i AND 4)THEN:DMG_F=DMG_F AND&h7F:ELSE:DMG_F=DMG_F OR&h80
    BIT2_table[i]=DMG_F
'BIT1
    DMG_F=&h20
    IF(i AND 2)THEN:DMG_F=DMG_F AND&h7F:ELSE:DMG_F=DMG_F OR&h80
    BIT1_table[i]=DMG_F
'BIT0
    DMG_F=&h20
    IF(i AND 1)THEN:DMG_F=DMG_F AND&h7F:ELSE:DMG_F=DMG_F OR&h80
    BIT0_table[i]=DMG_F

'Joypad
    JOYP0[i]=&hF0+\
    ((!(i AND(1<<#btn_START ))*8)OR\
     (!(i AND(1<<#btn_SELECT))*4)OR\
     (!(i AND(1<<#btn_B     ))*2)OR\
      !(i AND(1<<#btn_A     )))
    JOYP1[i]=&hF0+\
    ((!(i AND(1<<#dir_DOWN  ))*8)OR\
     (!(i AND(1<<#dir_UP    ))*4)OR\
     (!(i AND(1<<#dir_LEFT  ))*2)OR\
      !(i AND(1<<#dir_RIGHT )))
  Next
:END'InitShiftBitTables


COMMON DEF GetState OUT *
  Case(DEFOUTC())
  When(1):
    DEFOUT 0,Mem
    RETURN
  OTHERWISE:
    STOP"1x DEFOUT Only!"
  ENDCase
END


'************************************
'* Memory
'***_*********************************
DEF POKE I,J 'MWRM
: Poke "return"
@De:RETURN
END

'TODO
'  Quite a rough way of switching
'  RAM banks, but sufficient atm
:VAR Switch_ERAM_BankNO%=0
:DEF Switch_ERAM_Bank
    'Do nothing if already in address space
'   IF New_ERAM_Bank==Loaded_ERAM_Bank THEN RETURN
''  IF New_ERAM_Bank!=Loaded_ERAM_Bank THEN
    ON(New_ERAM_Bank!=Loaded_ERAM_Bank)GOTO@New_ERAM_Bank_NEQ_Loaded_ERAM_BankSwitch_ERAM_BankNO%

    'Copy current RAM page back into ERAM
    COPY ERAM, (Loaded_ERAM_Bank * &h2000) AND LAST(ERAM),   \
         Mem,  &hA000,                                       \
         &h2000

    'Copy new RAM page into address space
    COPY Mem,  &hA000,                                       \
         ERAM, (   New_ERAM_Bank * &h2000) AND LAST(ERAM),   \
         &h2000

    'For optimization
    Loaded_ERAM_Bank = New_ERAM_Bank
' ENDIF
  @New_ERAM_Bank_NEQ_Loaded_ERAM_BankSwitch_ERAM_BankNO%
: Switch_ERAM_BankNO%=Switch_ERAM_BankNO%+1
:END



DEF SaveState
  VAR i
  Dim StateMem[0]

  PUSH StateMem,RGB(        DMG_INTF,New_ROM_Bank,Loaded_ROM_Bank,New_ERAM_Bank)
  PUSH StateMem,RGB(Loaded_ERAM_Bank, ERAM_Access,      ERAM_mode,     PPU_Mode)
  PUSH StateMem,PPU_On

  VAR Mem_last=LAST(Mem)
  FOR i=0TO Mem_last
    PUSH StateMem,Mem[i]
  Next

  PUSH StateMem,Mem_last

  VAR ERAM_last=LAST(eram)
  FOR i=0TO ERAM_last
    PUSH StateMem,ERAM[i]
  Next

  PUSH StateMem,ERAM_last

  PUSH StateMem,DMG_PC
  PUSH StateMem,DMG_SP

  PUSH StateMem,DMG_HALT
  PUSH StateMem,DMG_State0

  PUSH StateMem,RGB(DMG_A,DMG_F,DMG_B,DMG_C)
  PUSH StateMem,RGB(DMG_D,DMG_E,DMG_H,DMG_L)

@PerformSave
  VAR FileName$ = format$("DAT:%s.ST2",DIALOG(LEFT$(Loaded_ROM$,instr(Loaded_ROM$,".")),"Save (format: "+#DQ+"DAT:*[.ST2]"+#DQ+" )",14))

  IF(RESULT()!=1)THEN RETURN
  SaveV FileName$,StateMem
  IF(RESULT()!=1)Goto@PerformSave
END

DEF LoadState *
  VAR I,FileName$,Project$

@PerformLoad
IF     DEFARGC()==0THEN
  FileSelect #FileType_SaveState OUT FileName$,Project$
  GTARGET 4
ELSE
  IF(FileName$=="-")THEN RETURN
  FileName$=DEFARG(0)
: IF AutoPROJ$==""THEN
    Project$=PROJECT()
: ELSE
    Project$={#DQ+AutoPROJ$+#DQ}
: ENDIF
ENDIF

: ResetResolution

  IF(FileName$=="-")THEN RETURN

  Dim StateMem[0]
  FileName$=format$("DAT:%s/%s",Project$,FileName$)
  LoadV FileName$,StateMem
  IF(RESULT()!=1)Goto@PerformLoad


@POP
  RGB POP(StateMem)OUT DMG_D,DMG_E,DMG_H,DMG_L
  RGB POP(StateMem)OUT DMG_A,DMG_F,DMG_B,DMG_C

  DMG_State0   =POP(StateMem)
  DMG_HALT     =POP(StateMem)

  DMG_SP       =POP(StateMem)
  DMG_PC       =POP(StateMem)

  VAR ERAM_last=POP(StateMem)

  IF(LAST(eram)<ERAM_last)then Resize eram,ERAM_last+1

  FOR i=ERAM_last TO 0STEP-1
    eram[i]=POP(StateMem)
  Next

  VAR Mem_last=POP(StateMem)

  IF(LAST(Mem)<Mem_last)then Resize Mem,Mem_last+1

  FOR i=Mem_last TO 0STEP-1
    Mem[i]=POP(StateMem)
  Next

  PPU_On=POP(StateMem)
  RGB POP(StateMem)OUT Loaded_ERAM_Bank,ERAM_Access,ERAM_mode,PPU_Mode
  RGB POP(StateMem)OUT DMG_INTF,New_ROM_Bank,Loaded_ROM_Bank,New_ERAM_Bank

''  VAR K
''  FOR K=&h8000TO&h97ff
''  I=K:J=Mem[K]
''    d0=Mem[_d0[I]]
''    d1=Mem[_d1[I]]
''    FOR x=0TO 7
''      sx=_sx[x]
''      TMP%=((d0 AND sx)==0)OR(((d1 AND sx)==0)*2)
''      TileX=((_TileIdx[I]AND 63)*8)OR x
''      TM2%=(_TileY[I]*512)OR TileX
''      VRAM_cache[TM2%]=TMP%
'''     VRAM_Bitmap[_TileY[I],TileX+1024]=pal[TMP%]
''      VRAM_Bitmap[_TileY[I],TileX]=TMP%
''      VRAM_DoUpdateBitmap=1
''    Next x
''  Next K
''  FOR K=&h9800TO&h9bff
''  I=K:J=Mem[K]
''    I=I-&h9800
''    ofs=(!CommonTileData&&J<128)*256
''    TileIdx=J+ofs+&hE800
''    y=((I DIV 32)*128)+((I AND 31)*2)
''    VRAM_BG_Map[y     ]=TileIdx
''    VRAM_BG_Map[y+64  ]=TileIdx
''    VRAM_BG_Map[y+4096]=TileIdx
''    VRAM_BG_Map[y+4160]=TileIdx
''    TileCache0[I] =TileIdx
''    VRAM_DoUpdate_BG=1
''  Next K
''  FOR K=&h9c00TO&h9fff
''  I=K:J=Mem[K]
''    I=I-&h9C00
''    ofs=((!CommonTileData&&J<128))*256
''    TileIdx=J+ofs+&hE800
''    VRAM_WinMap[I DIV 32,(I AND 31)*2]=TileIdx
''    TileCache1[I]=TileIdx
''    VRAM_DoUpdateWin=1
''  Next K

  FOR i=&h8000TO&h9fffPOKE i,Mem[i]Next
  FOR i=&HFF00TO&HFFffPOKE i,Mem[i]Next

  GLOAD 1024,  0,512, 48,VRAM_Bitmap, BGP,0
  GLOAD 1024, 48,512, 48,VRAM_Bitmap,OBP0,0
  GLOAD 1024, 96,512, 48,VRAM_Bitmap,OBP1,0
:IF(ENVTYPE()!=2)THEN
  TUPDATE #BGScreen
  TUPDATE #WinScreen
:ENDIF
  VRAM_DoUpdateBitmap=0'1
  VRAM_DoUpdate_BG=0'1
  VRAM_DoUpdateWin=0'1
':IF(BG_ProcScanLines%)THEN
'  LFilter #BGLayer,3,LineOfs_BG#,1
':ENDIF'(BG_ProcScanLines%)

:IF UseDebugger THEN

  DbgCallTrace   = Array%(64)

  DbgReadLogPtr  = Array%(0)
  DbgReadLogSrc  = Array%(0)
  DbgReadLogVal  = Array%(0)

  DbgWriteLogPtr = Array%(0)
  DbgWriteLogSrc = Array%(0)
  DbgWriteLogVal = Array%(0)

:ENDIF'UseDebugger

END




DEF SaveInitialState
    var  out$="",i

: IF SupportBootROM% THEN
    PUSH out$,"SkipBootROM=0"+#CR
: ENDIF'SupportBootROM%

    PUSH out$,format$("%s=&h%04x","DMG_PC",    DMG_PC    )+#CR
    PUSH out$,format$("%s=&h%04x","DMG_SP",    DMG_SP    )+#CR
    PUSH out$,format$("%s=&h%02x","DMG_A",     DMG_A     )+#CR
    PUSH out$,format$("%s=&h%02x","DMG_F",     DMG_F     )+#CR
    PUSH out$,format$("%s=&h%02x","DMG_B",     DMG_B     )+#CR
    PUSH out$,format$("%s=&h%02x","DMG_C",     DMG_C     )+#CR
    PUSH out$,format$("%s=&h%02x","DMG_D",     DMG_D     )+#CR
    PUSH out$,format$("%s=&h%02x","DMG_E",     DMG_E     )+#CR
    PUSH out$,format$("%s=&h%02x","DMG_H",     DMG_H     )+#CR
    PUSH out$,format$("%s=&h%02x","DMG_L",     DMG_L     )+#CR
    PUSH out$,format$("%s=%d",    "DMG_INTF",  DMG_INTF  )+#CR
    PUSH out$,format$("%s=%d",    "DMG_State0",DMG_State0)+#CR
    PUSH out$,format$("%s=%d",    "PPU_Mode",  PPU_Mode  )+#CR
    PUSH out$,format$("%s=%d",    "PPU_On",    PPU_On    )+#CR
    for i=&h8000to&HFFffstep 4
      IF Mem[i]!=0then:IF i==&HFF50then
        PUSH out$,format$("POKE&h%04x, &h%02x",i,Mem[i])+#CR:else
        PUSH out$,format$("Mem[&h%04x]=&h%02x",i,Mem[i])+#CR:ENDIF:ENDIF
    Next
    SaveV"txt:init.cfg",out$
END


DEF OldSaveState
  VAR i
  Dim StateMem[0]
'Deprecated, for conversion only, use V2 
PUSH StateMem,RGB(DMG_A,DMG_F,DMG_B,DMG_C)PUSH StateMem,RGB(DMG_D,DMG_E,DMG_H,DMG_L)PUSH StateMem,RGB(DMG_INTF,New_ROM_Bank,Loaded_ROM_Bank,New_ERAM_Bank)PUSH StateMem,RGB(Loaded_ERAM_Bank,ERAM_Access,ERAM_mode,PPU_Mode)PUSH StateMem,PPU_On:FOR i=&h8000TO&HFFffPUSH StateMem,Mem[i]Next:VAR ERAM_last=LAST(eram)FOR i=0TO ERAM_last:PUSH StateMem, ERAM[i]:Next:PUSH StateMem,ERAM_last:PUSH StateMem,DMG_PC:PUSH StateMem,DMG_SP:PUSH StateMem,DMG_HALT:PUSH StateMem,DMG_State0@PerformSave:VAR FileName$=format$("DAT:%s.ST",DIALOG(LEFT$(Loaded_ROM$,instr(Loaded_ROM$,".")),"Save (format: "+#DQ+"DAT:*[.ST]"+#DQ+" )",14))IF RESULT()!=1THEN RETURN
SaveV FileName$,StateMem:IF RESULT()!=1Goto@PerformSave
END
DEF OldLoadState ' Compact
'Deprecated, for conversion only, use V2 
  VAR I:Dim StateMem[0]@PerformLoad:VAR FileName$,Project$FileSelect #FileType_LegacyState OUT FileName$,Project$
  GTARGET 4
: InitScreen
  IF FileName$=="-"THEN RETURN
  FileName$=format$("DAT:%s/%s",Project$,FileName$)
  LoadV FileName$,StateMem:IF RESULT()!=1Goto@PerformLoad@POP:DMG_State0=POP(StateMem)DMG_HALT=POP(StateMem)DMG_SP=POP(StateMem)DMG_PC=POP(StateMem)VAR ERAM_last=POP(StateMem)IF LAST(eram)<ERAM_last then:Resize eram,ERAM_last+1
  FOR i=0TO ERAM_last:eram[ERAM_last-i]=POP(StateMem)Next
  FOR i=0TO&h7fffMem[&HFFff-i]=POP(StateMem)Next:PPU_On=POP(StateMem)TMP%=POP(StateMem)PPU_Mode=TMP% and 255:ERAM_mode=(TMP%>>8)and 255:ERAM_Access=(TMP%>>16)and 255Loaded_ERAM_Bank=(TMP%>>24)and 255TMP%=POP(StateMem)New_ERAM_Bank=TMP% and 255Loaded_ROM_Bank=(TMP%>>8)and 255New_ROM_Bank=(TMP%>>16)and 255DMG_INTF=(TMP%>>24)and 255TMP%=POP(StateMem)DMG_L=TMP% and 255DMG_H=(TMP%>>8)and 255DMG_E=(TMP%>>16)and 255DMG_D=(TMP%>>24)and 255TMP%=POP(StateMem)DMG_C=TMP% and 255DMG_B=(TMP%>>8)and 255DMG_F=(TMP%>>16)and 255DMG_A=(TMP%>>24)and 255FOR i=&h8000TO&h9fffPOKE i,Mem[i]Next:FOR i=&hfe00TO&hfe9fPOKE i,Mem[i]Next:FOR i=&HFF00TO&HFFffPOKE i,Mem[i]Next:Resize Mem,&h10000

:IF UseDebugger THEN

  DbgCallTrace   = Array%(10)

  DbgReadLogPtr  = Array%(0)
  DbgReadLogSrc  = Array%(0)
  DbgReadLogVal  = Array%(0)

  DbgWriteLogPtr = Array%(0)
  DbgWriteLogSrc = Array%(0)
  DbgWriteLogVal = Array%(0)

:ENDIF'UseDebugger
END


DEF DisableBootROM
: IF SupportBootROM% THEN

  UseBootROM=#FALSE
  COPY Mem,0,CartROM,0,256

: ENDIF'SupportBootROM%
END


DEF ReloadBootROM
: IF SupportBootROM% THEN

  VAR i
  UseBootROM = #TRUE
  FOR I=0TO LAST(BootROM)
    RGB BootROM[I]OUT Mem[I*4+3],Mem[I*4+2],Mem[I*4+1],Mem[I*4]
  Next

: ENDIF'SupportBootROM%
END


DEF InitROM
  VAR i
''  IF(ROM_loaded==0)THEN


  : IF SupportBootROM% THEN

      IF(SkipBootROM==0)then
        BootROM = LoadV("DAT:BootROM")
      ENDIF

  : ENDIF'SupportBootROM%


    'Raw ROM as read from file
    Dim CompactROM = LoadV(format$( \
        "DAT:%s/%s",       \
        CurrentProject$,   \
        Loaded_ROM$        \
      ))

    ROM_loaded  = #TRUE

''  ENDIF'(ROM_loaded==0)

  ROM_size      = LEN(CompactROM)*4
  ROM_Banks     = ROM_size DIV &h4000
  ROM_last_bank = ROM_Banks-1

  Resize CartROM,ROM_size
:IF Use_VPC% THEN
  Resize Mem,      ROM_size + &h10000
:ENDIF'Use_VPC%

  'Corruptor fun
  IF #UseRomCorruptor THEN
    Randomize 0,#CorruptorSeed
    FOR i=0TO(LEN(CompactROM)/(256/#CorruptionFactor))-1
      CompactROM[RND(LEN(CompactROM))]=RND(&HFFFFFFFF+1)
    Next i
  ENDIF

  FOR i=0TO&h7fff DIV 4
    RGB CompactROM[i]OUT\
      Mem[i*4+3],\
      Mem[i*4+2],\
      Mem[i*4+1],\
      Mem[i*4]
    RGB CompactROM[i]OUT\
      CartROM[i*4+3],\
      CartROM[i*4+2],\
      CartROM[i*4+1],\
      CartROM[i*4]
  Next
  FOR i=&h8000 DIV 4TO LAST(CompactROM)
:IF Use_VPC% THEN
    RGB CompactROM[i]OUT\
      Mem[i*4+&h8003],\
      Mem[i*4+&h8002],\
      Mem[i*4+&h8001],\
      Mem[i*4+&h8000]
:ENDIF'Use_VPC%
    RGB CompactROM[i]OUT\
      CartROM[i*4+3],\
      CartROM[i*4+2],\
      CartROM[i*4+1],\
      CartROM[i*4]
  Next

  : IF SupportBootROM% THEN

      IF(SkipBootROM==0)then
  FOR i=0TO&hff DIV 4
    RGB BootROM[i]OUT\
      Mem[i*4+3],\
      Mem[i*4+2],\
      Mem[i*4+1],\
      Mem[i*4]
  Next
      ENDIF

  : ENDIF'SupportBootROM%

:   IF POKEGOLD_PATCH% THEN
  Mem[&h311a] = &h100
' Mem[&h311b] = &hc9

  Mem[&h0dcd] = &h101
' Mem[&h0dce] = &hc9

  Mem[&h0ddd] = &h102
' Mem[&h0dde] = &hc9
:   ENDIF 'POKEGOLD_PATCH%

  CartType = CartROM[&h0147]
'':   IF Rom_AutoInit%==0 THEN ' TODO
  Case CartType
    When &h00:                    ?"ROM ONLY
    When &h01:                    ?"MBC1
      CartridgeType       =    1
    When &h02:                    ?"MBC1+RAM
      CartridgeType       =    1
      CartridgeHas_ERAM   =    1
    When &h03:                    ?"MBC1+RAM+BATTERY
      CartridgeType       =    1
      CartridgeHas_ERAM   =    1
      CartridgeHasBattery =    1
      'BEEP'Tmp
    When &h05:                    ?"MBC2
      CartridgeType       =    2
    When &h06:                    ?"MBC2+BATTERY
      CartridgeType       =    2
      CartridgeHasBattery =    1
    When &h08:                    ?"ROM+RAM
    When &h09:                    ?"ROM+RAM+BATTERY
    When &h0B:                    ?"MM01
    When &h0C:                    ?"MM01+RAM
    When &h0D:                    ?"MM01+RAM+BATTERY
    When &h0F:                    ?"MBC3+TIMER+BATTERY
      CartridgeType       =    6
      CartridgeHasBattery =    1
    When &h10:                    ?"MBC3+TIMER+RAM+BATTERY
      CartridgeType       =    6
      CartridgeHas_ERAM   =    1
      CartridgeHasBattery =    1
    When &h11:                    ?"MBC3
      CartridgeType       =    3
    When &h12:                    ?"MBC3+RAM
      CartridgeType       =    3
      CartridgeHas_ERAM   =    1
    When &h13:                    ?"MBC3+RAM+BATTERY
      CartridgeType       =    3
      CartridgeHas_ERAM   =    1
      CartridgeHasBattery =    1
    When &h15:                    ?"MBC4 '?
    When &h16:                    ?"?1
    When &h17:                    ?"?2
      CartridgeType       =    4
    When &h19:                    ?"MBC5
      CartridgeType       =    5
    When &h1A:                    ?"MBC5+RAM
      CartridgeType       =    5
      CartridgeHas_ERAM   =    1
    When &h1B:                    ?"MBC5+RAM+BATTERY
      CartridgeType       =    5
      CartridgeHas_ERAM   =    1
      CartridgeHasBattery =    1
    When &h1C:                    ?"MBC5+RUMBLE
      CartridgeType       =    5
    When &h1D:                    ?"MBC5+RUMBLE+RAM
      CartridgeType       =    5
      CartridgeHas_ERAM   =    1
    When &h1E:                    ?"MBC5+RUMBLE+RAM+BATTERY
      CartridgeType       =    5
      CartridgeHas_ERAM   =    1
      CartridgeHasBattery =    1
    When &h20:                    ?"MBC6
      CartridgeType       =    6
    When &h22:                    ?"MBC7+SENSOR+RUMBLE+RAM+BATTERY
      CartridgeType       =    7
      CartridgeHas_ERAM   =    1
      CartridgeHasBattery =    1
    When &hFC:                    ?"POCKET CAMERA/GAMEBOY CAMERA
'     CartridgeType       = &hFC
      CartridgeType       =    8
    When &HFF:                    ?"HuC1+RAM+BATTERY
      CartridgeType       =    1
    OTHERWISE:
      CartridgeType       =    0  ?format$("UNKNOWN MAPPER: %X", CartType)
  ENDCase
'':   ELSE 'Rom_AutoInit% ' TODO
''  Case CartType
''    When &h00:                    ?"ROM ONLY
''    When &h01:                    ?"MBC1
''      CartridgeType       =    1
''    When &h02:                    ?"MBC1+RAM
''      CartridgeType       =    1
''      CartridgeHas_ERAM   =    1
''    When &h03:                    ?"MBC1+RAM+BATTERY
''      CartridgeType       =    1
''      CartridgeHas_ERAM   =    1
''      CartridgeHasBattery =    1
''      'BEEP'Tmp
''    When &h05:                    ?"MBC2
''      CartridgeType       =    2
''    When &h06:                    ?"MBC2+BATTERY
''      CartridgeType       =    2
''      CartridgeHasBattery =    1
''    When &h08:                    ?"ROM+RAM
''    When &h09:                    ?"ROM+RAM+BATTERY
''    When &h0B:                    ?"MM01
''    When &h0C:                    ?"MM01+RAM
''    When &h0D:                    ?"MM01+RAM+BATTERY
''    When &h0F:                    ?"MBC3+TIMER+BATTERY
''      CartridgeType       =    6
''      CartridgeHasBattery =    1
''    When &h10:                    ?"MBC3+TIMER+RAM+BATTERY
''      CartridgeType       =    6
''      CartridgeHas_ERAM   =    1
''      CartridgeHasBattery =    1
''    When &h11:                    ?"MBC3
''      CartridgeType       =    3
''    When &h12:                    ?"MBC3+RAM
''      CartridgeType       =    3
''      CartridgeHas_ERAM   =    1
''    When &h13:                    ?"MBC3+RAM+BATTERY
''      CartridgeType       =    3
''      CartridgeHas_ERAM   =    1
''      CartridgeHasBattery =    1
''    When &h15:                    ?"MBC4 '?
''    When &h16:                    ?"?1
''    When &h17:                    ?"?2
''      CartridgeType       =    4
''    When &h19:                    ?"MBC5
''      CartridgeType       =    5
''    When &h1A:                    ?"MBC5+RAM
''      CartridgeType       =    5
''      CartridgeHas_ERAM   =    1
''    When &h1B:                    ?"MBC5+RAM+BATTERY
''      CartridgeType       =    5
''      CartridgeHas_ERAM   =    1
''      CartridgeHasBattery =    1
''    When &h1C:                    ?"MBC5+RUMBLE
''      CartridgeType       =    5
''    When &h1D:                    ?"MBC5+RUMBLE+RAM
''      CartridgeType       =    5
''      CartridgeHas_ERAM   =    1
''    When &h1E:                    ?"MBC5+RUMBLE+RAM+BATTERY
''      CartridgeType       =    5
''      CartridgeHas_ERAM   =    1
''      CartridgeHasBattery =    1
''    When &h20:                    ?"MBC6
''      CartridgeType       =    6
''    When &h22:                    ?"MBC7+SENSOR+RUMBLE+RAM+BATTERY
''      CartridgeType       =    7
''      CartridgeHas_ERAM   =    1
''      CartridgeHasBattery =    1
''    When &hFC:                    ?"POCKET CAMERA/GAMEBOY CAMERA
'''     CartridgeType       = &hFC
''      CartridgeType       =    8
''    When &HFF:                    ?"HuC1+RAM+BATTERY
''      CartridgeType       =    1
''    OTHERWISE:
''      CartridgeType       =    0  ?format$("UNKNOWN MAPPER: %X", CartType)
''  ENDCase
'':   ENDIF'Rom_AutoInit% ' TODO

:IF ROM_AutoInit% != 0 THEN
 '********
 '* Tmp  *
 '********
  ROM_size = &h8000<<CartROM[&h0148]
  ERAM_SizeTotal = CartROM[&h0149]
  Case ERAM_SizeTotal
  When&h00:ERAM_SizeTotal=&h00000
  When&h01:ERAM_SizeTotal=&h00800
  When&h02:ERAM_SizeTotal=&h02000
  When&h03:ERAM_SizeTotal=&h08000
  When&h04:ERAM_SizeTotal=&h20000
  When&h05:ERAM_SizeTotal=&h10000
  ENDCase
 '********
:ELSE'ROM_AutoInit%
 '********
 '* Tmp  *
 '********
  ERAM_SizeTotal     =&h20000
  ERAM_Banks    =ERAM_SizeTotal DIV&h2000
  Last_ERAM_Bank=ERAM_Banks-1
 '********
:ENDIF'ROM_AutoInit%
 '********

  IF CartridgeType!=2THEN
    Resize ERAM, ERAM_SizeTotal'*2
  ENDIF

END


DEF SaveERAM
  DIM Compact[0]
  var fn$,sav$,i
@EnterFileName
  fn$=DIALOG(LEFT$(Loaded_ROM$,instr(Loaded_ROM$,".")),"Save .SAV file",14)IF RESULT()==-1THEN RETURN
  Resize Compact,LEN(ERAM)DIV 4

  'Do nothing if already in address space
' IF New_ERAM_Bank==Loaded_ERAM_Bank THEN RETURN
  'Copy current RAM page back into ERAM
  COPY ERAM,Loaded_ERAM_Bank*&h2000 AND LAST(ERAM),Mem,&hA000,&h2000
  'Copy new RAM page into address space
  COPY Mem,&hA000,ERAM,New_ERAM_Bank*&h2000 AND LAST(ERAM),&h2000
  'For optimization
  Loaded_ERAM_Bank = New_ERAM_Bank

  FOR i=0TO LAST(Compact)Compact[I]=RGB(ERAM[I*4+3],ERAM[I*4+2],ERAM[I*4+1],ERAM[I*4])Next
  SaveV format$("DAT:%s.SAV",fn$),Compact
  IF RESULT()!=1Goto@EnterFileName
END


DEF LoadERAM *
  VAR FileName$,Project$,i
  IF(DEFARGC()==2)THEN
    Project$ =DEFARG(0)
    FileName$=DEFARG(1)
  ELSE
@ChooseSaveFile
    FileSelect #FileType_ERAM OUT FileName$,Project$
    GTARGET 4
  ENDIF

: ResetResolution

' IF(FileName$=="-")THEN RETURN
  IF(FileName$=="-")THEN
    FILL ERAM,0
    RETURN
  ENDIF

  DIM Compact=LoadV(format$("DAT:%s/%s",Project$,FileName$))
  IF RESULT()!=1Goto@ChooseSaveFile
  IF(len(eram)<len(Compact)*4)then Resize ERAM,LEN(Compact)*4
  FOR I=0TO LAST(Compact)
    RGB Compact[I]OUT\
      ERAM[I*4+3],\
      ERAM[I*4+2],\
      ERAM[I*4+1],\
      ERAM[I*4]
  Next

''''Switch_ERAM_Bank
  'Copy new RAM page into address space
  COPY Mem,&hA000,ERAM,New_ERAM_Bank*&h2000 AND LAST(ERAM),&h2000
  'For optimization
  Loaded_ERAM_Bank = New_ERAM_Bank

  DMG_PC=256

:IF UseDebugger THEN

  DbgCallTrace   = Array%(10)

  DbgReadLogPtr  = Array%(0)
  DbgReadLogSrc  = Array%(0)
  DbgReadLogVal  = Array%(0)

  DbgWriteLogPtr = Array%(0)
  DbgWriteLogSrc = Array%(0)
  DbgWriteLogVal = Array%(0)

:ENDIF'UseDebugger

END






'********************
'** ENTRY POINT    **
'********************
@START
  InitROM
  CALL "setup"
@BREAK_RESUME_
''ON BREAK Goto @MenuGUI
  ON BREAK Goto @EmuBreak
' EXEC 4
' RECSTART 60
  CALL "DMG_emu",-1
Goto @START

@BREAK_RESUME
  BGMSTOP
  CLS
  DMG_PC=&h0100
  GOTO @BREAK_RESUME_

@EmuBreak
''  RECSTOP
''  BGMSTOP
''' SNDSTOP
''  DIM REC[2,48000*60]
''  RECSAVE REC
''  PCMSTREAM REC
''  WAIT 3600
''' PUSHKEY "GOTO"+CHR$(34)+"3:@BREAK_RESUME"+CHR$(34)+CHR$(13)
''' PUSHKEY CHR$(00)+"UIRUN"+CHR$(34)+"MENUBOY.UI"+CHR$(34)+CHR$(13)
''' ON BREAK Goto @EmuBreak
''' PUSHKEY CHR$(00)+"CONT"+CHR$(13)+CHR$(10)
''' GOTO @BREAK_RESUME_
''  STOP
GOTO @__EOF__






'******************************************
'* Initial setup
'******************************************
DEF setup
  VAR ret

' InitROM
: InitScreen

: IF EnblAudio% THEN
  : InitPitches
' : InitNoise
  : Init_PCM_RAM
  : InitAPU
: ENDIF


  VAR  I,  J, Jc, Jh, Jl
  VAR cf, hf, nf, zf
  VAR nc, cp

  VAR   Reg,  Regc
  VAR DMG_A, DMG_F
  VAR   idx,   flg

: InitScanlines_LFilter

  COPY ZeroTable,        @ZeroTable_DATA
  COPY StateTable,    @StateTable_DATA
  COPY StateTableCB, @StateTableCB_DATA

: Init_DAA_Table
: InitFlagTables
: InitShiftBitTables


  VAR SaveFile$=LEFT$(Loaded_ROM$,INSTR(Loaded_ROM$,"."))+".SAV"

  IF    (CHKFILE(format$("DAT:%s",SaveFile$)))THEN
    LoadERAM PROJECT(),SaveFile$
  ELSEIF(CHKFILE(format$("DAT:GB_SAVES/%s",SaveFile$)))THEN
    LoadERAM "GB_SAVES",SaveFile$
  ELSEIF(CHKFILE(format$("DAT:GB_ROMS/%s",SaveFile$)))THEN
    LoadERAM "GB_ROMS",SaveFile$
  ENDIF


: IF SupportBootROM% THEN


  IF(SkipBootROM==0)then
    DMG_Reset
'   LoadERAM
  else
    DMG_ResetInit
  ENDIF


: ELSE'SupportBootROM%


'   DMG_Reset'Init
'   DMG_PC = 0
    DMG_ResetInit

: ENDIF'SupportBootROM%

:IF AutoLoad% THEN
  LoadState {#DQ+AutoST2$+#DQ}
:ENDIF

END

:DEF ResetResolution
  XSCREEN 1280, 720
  TSCREEN #FontType,#CharacterSize
:END

:DEF InitScreen
'   ACLS
  IF(ENVTYPE()!=2)THEN
'     loadg #DisplayFont,5
      Exec  "FCP",4
  ENDIF

: ResetResolution

IF(ENVTYPE()!=2)THEN
  TSCREEN 3,#FontType,#CharacterSize', 160, 90
  TOFS    3, 1, 1, -2
  TLAYER  3, 1

  TSCREEN #WinScreen, 8, 8, 64, 64
' TSCALE  #WinScreen, 2, 2
  TOFS    #WinScreen, 0, 0, -1024  '?
' TPAGE   #WinScreen, 4, 0,   0
' TCOLOR  #WinScreen,#C_LIME
ENDIF


  SPSET   100, 0, 0, 256, 256
  SPPAGE  100, 3
  GTARGET 3
  GFILL   0,   0, 255, 255, BGPal[0] OR &h0ff_00_00_00
  SPSCALE 100, 2, 2


IF(ENVTYPE()!=2)THEN
  TLAYER  #WinScreen,  #WinLayer
  SPLAYER 100,         #WinLayer
ENDIF


IF(ENVTYPE()!=2)THEN
' TSCREEN #BGScreen,  8, 8,  64, 64
  TSCREEN #BGScreen,  8, 8, 128, 64
  TLAYER  #BGScreen,  #BGLayer
' TSCALE  #BGScreen,  1, 0.5
' TPAGE   #BGScreen,  4, 0,   0

  TSCREEN 2,   16,16,   128,  128
ENDIF


IF(ENVTYPE()!=2)THEN
: ON #Scale Goto@TScale0,@TScale1,@TScale2,@TScale3,@TScale4,@TScale5
: @TScale0
  InvalidScaleError
: @TScale1:
  TSCALE 2,2,2
: Goto@TScaleEND
: @TScale2:
  TSCALE 2,2,2
: Goto@TScaleEND
: @TScale3:
  TOFS 2,0,-6,-1TSCALE 2,2,2
: Goto@TScaleEND
: @TScale4:
  TOFS 2,0,-12,-2TSCALE 2,2,2
: Goto@TScaleEND
: @TScale5:
  TOFS 2,-160,-120,-2TSCALE 2,2.5,2.5
: @TScaleEND

  TLAYER 2, 2
ENDIF


IF(ENVTYPE()!=2)THEN
  SPLAYER #GSprite,3

  SPSET   101, 0, 0, 256, 256
  SPPAGE  101, 0

  SPLAYER 101, #BGLayer
  SPOFS   101, 0, 0, -1024

  GTARGET 1
  GFILL   0,   0,    \
          1280, 720,  \
          &h7F1F0F3F
''        &h7F00003F
  SPSET   102,       \
          0,   0,    \
          1280, 720
  SPPAGE  102, 1
  SPLAYER 102,1
  SPHIDE  102
' GTARGET 0

: ON #Scale GOTO@LScale0,@LScale1,@LScale2,@LScale3,@LScale4,@LScale5
: @LScale0
: GOTO@LScaleEND
: @LScale1
: GOTO@LScaleEND
: @LScale2
: GOTO@LScaleEND
: @LScale3
: GOTO@LScaleEND
: @LScale4
  SPLAYER #SPLayer
  LMATRIX #SPLayer,  \
          0, -3,     \
          0,  0,     \
          4,  4
: GOTO@LScaleEND
: @LScale5
  SPLAYER #SPLayer
  LMATRIX #SPLayer,  \
         32, 18,     \
          0,  0,     \
          5,  5
: @LScaleEND
ENDIF

  BACKColor BGPal[0]
  Color     #C_YELLOW
' TColor    3, #C_YELLOW


IF(ENVTYPE()!=2)THEN
  SPSET   103,       \
          0,   0,    \
          1280, 720
  SPPAGE  103, 2
  SPLAYER 103, 1
ENDIF

' VRAM_Bitmap = GARRAY(4)
  VRAM_Bitmap = ARRAY%(&h200,&h200)
IF(ENVTYPE()!=2)THEN
  VRAM_BG_Map = TARRAY(#BGScreen)
  VRAM_WinMap = TARRAY(#WinScreen)
ENDIF
' VRAM_BG_Map = ARRAY%(&h_80,&h100)
' VRAM_WinMap = ARRAY%(&h_80,&h100)

: InitTilemap
: if(DisableObj%==0)then Init_OBJ

: IF(#GridColor!=#OFF)THEN
:   ApplyFilterOverlay
: ENDIF

  GTARGET 4
:END


:DEF ApplyFilterOverlay * OUT *
' DIM HM#[360,4]
  var n%

  GTARGET 2

' FOR n%=42 TO 329 STEP 2
'   GLINE 160,n%,  479,n%,  &h7F003FBF
'   GLINE 160,n%+1,479,n%+1,&h7FFFBF3F
' NEXT n%
'
' FOR n%=160 TO 479 STEP 2
'   GLINE n%,  42,n%,  329,&h7F00DFFF,3
'   GLINE n%+1,42,n%+1,329,&h7FFF1F00,3
' NEXT n%

''''  FOR n%=240 TO 1039 STEP 5
'''''   GLINE n%,  0,n%,  719,&h7F00DFFF,3
'''''   GLINE n%+1,0,n%+1,719,&h7FFF1F00,3
'''''   GLINE n%,  0,n%,  719,&hBFFF0000
'''''     GLINE n%+1,0,n%+1,  719,&h7FFFFF00
'''''   GLINE n%+2,0,n%+2,719,&hBF00FF00
'''''     GLINE n%+3,0,n%+3,  719,&h7F00FFFF
'''''   GLINE n%+4,0,n%+4,719,&hBF0000FF
''''    GLINE n%,  0,n%,  719,&h7FFFFFFF
''''    GLINE n%+4,0,n%+4,719,&h7F000000
''''  NEXT n%
''''
''''  FOR n%=0 TO 719 STEP 5
'''''   GLINE 240,n%,  1039,n%,  &h7F003FBF
'''''   GLINE 240,n%+4,1039,n%+4,&h7FFFBF3F
'''''   GLINE 240,n%,  1039,n%,  &HFFFFFFFF
'''''   GLINE 240,n%+4,1039,n%+4,&HFFFFFFFF
''''    GLINE 240,n%,  1039,n%,  &h3F00FF00
''''    GLINE 240,n%+4,1039,n%+4,&h7F7F007F
''''  NEXT n%


''''  FOR n%= 240 TO 1039 STEP 5
''''    GLINE   n%,   0,  n%, 719,  &h_7F__BF_BF_BF
''''    GLINE 1+n%,   0,1+n%, 719,  &h_3F__BF_BF_BF
''''
''''    GLINE 3+n%,   0,3+n%, 719,  &h_3F__5F_5F_5F
''''    GLINE 4+n%,   0,4+n%, 719,  &h_7F__5F_5F_5F
''''  NEXT n%
''''
''''
''''  FOR n%=   0 TO  719 STEP 5
''''    GLINE  240,  n%,1039,  n%,  &h_7F__BF_BF_BF
''''    GLINE  240,1+n%,1039,1+n%,  &h_3F__BF_BF_BF
''''
''''    GLINE  240,3+n%,1039,3+n%,  &h_3F__5F_5F_5F
''''    GLINE  240,4+n%,1039,4+n%,  &h_7F__5F_5F_5F
''''  NEXT n%
''''
''''  FOR n%= 240 TO 1039 STEP 5
''''  FOR k%=   0 TO  719 STEP 5
''''  GPSET   n%,  k%,  &h_7F__BF_BF_BF'       
''''    GPSET 1+n%,  k%,  &h_3F__BF_BF_BF'       
''''  GPSET   n%,1+k%,  &h_3F__BF_BF_BF'       
''''    GPSET 1+n%,1+k%,  &h_00__00_00_00'       
''''
''''            GPSET 4+n%,  k%,  &h_7F__8F_8F_8F'       
''''          GPSET 3+n%,  k%,  &h_3F__BF_BF_BF'       
''''            GPSET 4+n%,1+k%,  &h_3F__5F_5F_5F'       
''''          GPSET 3+n%,1+k%,  &h_00__00_00_00'       
''''
''''    GPSET 1+n%,3+k%,  &h_00__00_00_00'       
''''  GPSET   n%,3+k%,  &h_3F__BF_BF_BF'       
''''    GPSET 1+n%,4+k%,  &h_3F__5F_5F_5F'       
''''  GPSET   n%,4+k%,  &h_7F__8F_8F_8F'       
''''
''''          GPSET 3+n%,3+k%,  &h_00__00_00_00'       
''''            GPSET 4+n%,3+k%,  &h_3F__5F_5F_5F'       
''''          GPSET 3+n%,4+k%,  &h_3F__5F_5F_5F'       
''''            GPSET 4+n%,4+k%,  &h_7F__5F_5F_5F'       
''''  NEXT k%
''''  NEXT n%

  FOR n%= 240 TO 1039 STEP 5
    GLINE 3+n%,   0,3+n%, 719,  RGB(#GridColor,&H3F,,,)'RGB(BGPal[0],&H3F,,,)
    GLINE 4+n%,   0,4+n%, 719,  RGB(#GridColor,&H5F,,,)'RGB(BGPal[0],&H5F,,,)
  NEXT n%
  FOR n%=   0 TO  719 STEP 5
    GLINE  240,3+n%,1039,3+n%,  RGB(#GridColor,&H3F,,,)'RGB(BGPal[0],&H3F,,,)
    GLINE  240,4+n%,1039,4+n%,  RGB(#GridColor,&H5F,,,)'RGB(BGPal[0],&H5F,,,)
  NEXT n%

  FOR n%= 240 TO 1039 STEP 5
    GLINE   n%,   0,  n%, 719,  RGB(#GridColor,&H9F,,,)'RGB(BGPal[0],&H9F,,,)
  NEXT n%
  FOR n%=   0 TO  719 STEP 5
    GLINE  240,  n%,1039,  n%,  RGB(#GridColor,&H9F,,,)'RGB(BGPal[0],&H9F,,,)
  NEXT n%

' FOR n%=160 TO 479 STEP 2
'   GLINE n%+1,42,n%+1,329,&h7FFFFFFF,3
' NEXT n%

' FOR n%=0 TO 359 STEP 2
'   HM#[n%,0]=0
'   HM#[n%,1]=1
'   HM#[n%,2]=0
'   HM#[n%,3]=1
' NEXT n%

' TLAYER  3,0
' TSCREEN 3,8,8
' TBLEND  3,1
' TCOLOR  3,&h3FFFFFFF
' TFILL   3,20,5,59,40,""

' LFILTER 2,3,HM#,0
' LFILTER 1,2,16
' LAYER   1,4
' LAYER   0,2
' LFILTER 0,5,12,63,-64
' LFILTER 0,5,-12,-16,-64
' LFILTER 0,5,0,-16,-64
' LFILTER 0,5,0,0,-64
' LFILTER 1,2,1
' LFILTER 0,5,0,63,-96
:END'ApplyFilterOverlay


'#######################################################
'#######################################################


COMMON DEF SWAPROM*OUT*
  IF(DEFARGC()==0)THEN RETURN
  IF(DEFARGC()==1)THEN CurrentProject$="GB_ROMS":Loaded_ROM$=DEFARG(0)
  IF(DEFARGC()==2)THEN CurrentProject$=DEFARG(0):Loaded_ROM$=DEFARG(1)

  VAR I%,N%
  DIM CompactROM[]

' IF(ROM_loaded==0)THEN


  : IF SupportBootROM% THEN

      IF(SkipBootROM==0)then
        LoadV "DAT:BootROM",BootROM
      ENDIF

  : ENDIF'SupportBootROM%


    'Raw ROM as read from file
    CompactROM = \
    LOADV      ( \
    format$    ( \
        "DAT:%s/%s",       \
        CurrentProject$,   \
        Loaded_ROM$        \
      ))

    ROM_loaded  = #TRUE

' ENDIF'(ROM_loaded==0)

  ROM_size      = LEN(CompactROM)*4
  ROM_Banks     = ROM_size DIV &h4000
  ROM_last_bank = ROM_Banks-1

  Resize CartROM,ROM_size

  'Corruptor fun
  IF #UseRomCorruptor THEN
    Randomize 0,#CorruptorSeed
    FOR I%=0TO(LEN(CompactROM)/(256/#CorruptionFactor))-1
      CompactROM[RND(LEN(CompactROM))]=RND(&HFFFFFFFF+1)
    Next I%
  ENDIF

  FOR N%=0TO&h7fff DIV 4
    RGB CompactROM[N%]OUT\
      Mem[N%*4+3],\
      Mem[N%*4+2],\
      Mem[N%*4+1],\
      Mem[N%*4]
    RGB CompactROM[N%]OUT\
      CartROM[N%*4+3],\
      CartROM[N%*4+2],\
      CartROM[N%*4+1],\
      CartROM[N%*4]
  Next
  FOR N%=&h8000 DIV 4TO LAST(CompactROM)
    RGB CompactROM[N%]OUT\
      CartROM[N%*4+3],\
      CartROM[N%*4+2],\
      CartROM[N%*4+1],\
      CartROM[N%*4]
  Next

END

'#######################################################
'#######################################################


:DEF CAT88(H%,L%):RETURN(FORMAT$("RGB(0,0,%d,%d)",H%,L%)):END
:DEF CATRR(H$,L$):RETURN(FORMAT$("RGB(0,0,%s,%s)",H$,L$)):END
:DEF BC():RETURN"RGB(0,0,DMG_B,DMG_C)":END
:DEF DE():RETURN"RGB(0,0,DMG_D,DMG_E)":END
:DEF HL():RETURN"RGB(0,0,DMG_H,DMG_L)":END
:DEF A16():RETURN"RGB(0,0,MEM[DMG_PC+1],MEM[DMG_PC])":END
:DEF ADD2PC():RETURN"DMG_PC=DMG_PC+2":END
:DEF A8():RETURN"MEM[DMG_PC]":END
:DEF ADD1PC():RETURN"DMG_PC=DMG_PC+1":END


'#######################################################
'#######################################################


REM"******************************
REM'******************************
REM ****  MAIN EMULATOR LOOP  ****
REM'******************************
REM"******************************


  VAR opcode,opcode_CB
  VAR offset
  VAR istate=0
' VAR I, J, K, Jh, Jl
  VAR          Jh, Jl
  VAR BC,DE,HL
  VAR VDE, VHL
  VAR Reg
  VAR update
  VAR Latch0,Latch1
' VAR total_state

DEF DMG_emu steps
  istate=0

  LOOP
  REPEAT
@emu_loop:
    opcode = {A8()}
    {ADD1PC()}
    DMG_State0=DMG_State0+StateTable[opcode]

:   Decode
:   Instructions

: IF Cart$=="MN" THEN
@MN_0:@MN_1:@MN_2:@MN_3:
@MN_4:@MN_5:@MN_6:@MN_7:
: ENDIF
@DE: 'DECEND
'   IF(BUTTON(0,#B_ANY))THEN MEM[#IF]=MEM[#IF]OR&b10000
@IRQ
:   IRQ_Intr
@IRQ_END

@DE_SKIP_IRQ:
: IF UseDebugger THEN
    WHILE(LEN(DbgCallTrace)<10)UNSHIFT DbgCallTrace,0WEND
: ENDIF'UseDebugger


@TIMER
:   Timer
@TIMER_END

@DE_SKIP_TIMER:
:IF ExperimentalRealTimeEmuPacing% THEN

    DMG_state1 = DMG_state1 + PERFEND(1) * 6'5
    PERFBEGIN 1
    UNTIL(DMG_state1>=LineTime[PPU_Mode])

:ELSE 'ExperimentalRealTimeEmuPacing%

    UNTIL(DMG_State0>=LineTime[PPU_Mode])

:ENDIF'ExperimentalRealTimeEmuPacing%

'************************************************
'* DMG decoder END (!!!!!)
'************************************************

:PPU_Tick

@MenuGUI
  BGMPause
  Vibrate
  MenuGUI

@ContinueEmu
  WHILE(Button(0,#B_Any))WEND
  CLS 3
  CLS
  on BREAK Goto @MenuGUI
  TColor 4, #C_WHITE
  Color     #C_WHITE
  SPHIDE  102
' LFilter 1, 0
  BGMCont

  RETURN

: DEF  Echo(*)
:   On(DefArgC())Goto@NewLine,@String,@StringColor,@StringLocation,@StringLocationColor
:   @Err Err
:   @NewLine
:   Return         "Print"
:   @String
:   Return format$("Print  %s", #DQ+DefArg(0)+#DQ)
:   @StringColor
:   Return format$("Color  %s    : Print %s",            DefArg(1),                        #DQ+DefArg(0)+#DQ)
:   @StringLocation
:   Return format$("Locate %s,%s : Print %s",            DefArg(0),DefArg(1),              #DQ+DefArg(2)+#DQ)
:   @StringLocationColor
:   Return format$("Locate %s,%s : Color %s : Print %s", DefArg(0),DefArg(1),  DefArg(3),  #DQ+DefArg(2)+#DQ)
: END

: DEF TEcho(*)
:   On(DefArgC())Goto@Err,@NewLine,@String,@StringColor,@StringLocation,@StringLocationColor
:   @Err Err
:   @NewLine
:   Return format$("TPrint %s",       DefArg(0))
:   @String
:   Return format$("TPrint %s,%s",    DefArg(0),  #DQ+DefArg(1)+#DQ)
:   @StringColor
:   Return format$("Color  %s,%s    : TPrint %s,%s",                DefArg(0),DefArg(2),                                  DefArg(0),#DQ+DefArg(1)+#DQ)
:   @StringLocation
:   Return format$("Locate %s,%s,%s : TPrint %s,%s",                DefArg(0),DefArg(1),DefArg(2),                        DefArg(0),#DQ+DefArg(3)+#DQ)
:   @StringLocationColor
:   Return format$("Locate %s,%s,%s : Color  %s,%s : TPrint %s,%s", DefArg(0),DefArg(1),DefArg(2),  DefArg(0),DefArg(4),  DefArg(0),#DQ+DefArg(3)+#DQ)
: END

:IF UseDebugger THEN

@DebugGUI
  cls 3
  TMP%=LAST(DbgCallTrace)-43
  IF(TMP%<0)THEN TMP%=0

''TColor 3,&HFF3fffff
  FOR I=TMP% TO LAST(DbgCallTrace)

    RGB DbgCallTrace[I] OUT J,TMP%,TM2%
    IF(RGB(0,0,TMP%,TM2%)==&h00)\
    ||(RGB(0,0,TMP%,TM2%)==&h08)\
    ||(RGB(0,0,TMP%,TM2%)==&h10)\
    ||(RGB(0,0,TMP%,TM2%)==&h18)\
    ||(RGB(0,0,TMP%,TM2%)==&h20)\
    ||(RGB(0,0,TMP%,TM2%)==&h28)\
    ||(RGB(0,0,TMP%,TM2%)==&h30)\
    ||(RGB(0,0,TMP%,TM2%)==&h38)\
    THEN
        Color 3, #C_WHITE                                    : Locate  3,0,1+(I MOD 43) TPrint 3, " IRQ:"
        Color 3,HSVF(   J              / &h1___00, 1.0, 1.0) : Locate  3,6,1+(I MOD 43) TPrint 3, format$("%02x",TM2%)
    ELSE
      IF( (TMP% and&b__1_1__000000) <= &b__0_1__000000 )THEN
        Color 3,HSVF(   J              / &h1___00, 1.0, 1.0) : Locate  3,0,1+(I MOD 43) TPrint 3, format$("%02x:",J)
      ELSE
        Color 3, #C_GRAY                                     : Locate  3,0,1+(I MOD 43) TPrint 3, "---:"
      ENDIF
        Color 3,HSVF(RGB(0,0,TMP%,TM2%) / &h1_0000, 1.0, 1.0) : Locate  3,4,1+(I MOD 43) TPrint 3, format$("%02x%02x",TMP%,TM2%)
    ENDIF
  Next I


  RETURN

:ENDIF'UseDebugger

:APU_Tick

END'DEF DMG_emu steps


'#######################################################


: DEF Decode
  ON opcode Goto \
\'   x0          x1         x2          x3         x4        x5        x6         x7        x8         x9         xA         xB         xC        xD        xE         xF
    @NOP,       @LD_BC_16, @LD_xBC_A,  @INC_BC,   @INC_B,   @DEC_B,   @LD_B_8,   @RLCA,    @LD_x16_SP,@ADD_HL_BC,@LD_A_xBC, @DEC_BC,   @INC_C,   @DEC_C,   @LD_C_8,   @RRCA,\   '0x
    @STOP,      @LD_DE_16, @LD_xDE_A,  @INC_DE,   @INC_D,   @DEC_D,   @LD_D_8,   @RLA,     @JR,       @ADD_HL_DE,@LD_A_xDE, @DEC_DE,   @INC_E,   @DEC_E,   @LD_E_8,   @RRA, \   '1x
    @JR_NZ,     @LD_HL_16, @LDI_xHL_A, @INC_HL,   @INC_H,   @DEC_H,   @LD_H_8,   @DAA,     @JR_Z,     @ADD_HL_HL,@LDI_A_xHL,@DEC_HL,   @INC_L,   @DEC_L,   @LD_L_8,   @CPL, \   '2x
    @JR_NC,     @LD_SP_16, @LDD_xHL_A, @INC_SP,   @INC_xHL, @DEC_xHL, @LD_xHL_8, @SCF,     @JR_C,     @ADD_HL_SP,@LDD_A_xHL,@DEC_SP,   @INC_A,   @DEC_A,   @LD_A_8,   @CCF, \   '3x
    @LD_B_B,    @LD_B_C,   @LD_B_D,    @LD_B_E,   @LD_B_H,  @LD_B_L,  @LD_B_xHL, @LD_B_A,  @LD_C_B,   @LD_C_C,   @LD_C_D,   @LD_C_E,   @LD_C_H,  @LD_C_L,  @LD_C_xHL, @LD_C_A,\ '4x
    @LD_D_B,    @LD_D_C,   @LD_D_D,    @LD_D_E,   @LD_D_H,  @LD_D_L,  @LD_D_xHL, @LD_D_A,  @LD_E_B,   @LD_E_C,   @LD_E_D,   @LD_E_E,   @LD_E_H,  @LD_E_L,  @LD_E_xHL, @LD_E_A,\ '5x
    @LD_H_B,    @LD_H_C,   @LD_H_D,    @LD_H_E,   @LD_H_H,  @LD_H_L,  @LD_H_xHL, @LD_H_A,  @LD_L_B,   @LD_L_C,   @LD_L_D,   @LD_L_E,   @LD_L_H,  @LD_L_L,  @LD_L_xHL, @LD_L_A,\ '6x
    @LD_xHL_B,  @LD_xHL_C, @LD_xHL_D,  @LD_xHL_E, @LD_xHL_H,@LD_xHL_L,@HALT,     @LD_xHL_A,@LD_A_B,   @LD_A_C,   @LD_A_D,   @LD_A_E,   @LD_A_H,  @LD_A_L,  @LD_A_xHL, @LD_A_A,\ '7x
    @ADD_A_B,   @ADD_A_C,  @ADD_A_D,   @ADD_A_E,  @ADD_A_H, @ADD_A_L, @ADD_A_xHL,@ADD_A_A, @ADC_A_B,  @ADC_A_C,  @ADC_A_D,  @ADC_A_E,  @ADC_A_H, @ADC_A_L, @ADC_A_xHL,@ADC_A_A,\'8x
    @SUB_B,     @SUB_C,    @SUB_D,     @SUB_E,    @SUB_H,   @SUB_L,   @SUB_xHL,  @SUB_A,   @SBC_A_B,  @SBC_A_C,  @SBC_A_D,  @SBC_A_E,  @SBC_A_H, @SBC_A_L, @SBC_A_xHL,@SBC_A_A,\'9x
    @AND_B,     @AND_C,    @AND_D,     @AND_E,    @AND_H,   @AND_L,   @AND_xHL,  @AND_A,   @XOR_B,    @XOR_C,    @XOR_D,    @XOR_E,    @XOR_H,   @XOR_L,   @XOR_xHL,  @XOR_A,\  'Ax
    @OR_B,      @OR_C,     @OR_D,      @OR_E,     @OR_H,    @OR_L,    @OR_xHL,   @OR_A,    @CP_B,     @CP_C,     @CP_D,     @CP_E,     @CP_H,    @CP_L,    @CP_xHL,   @CP_A,\   'Bx
    @RET_NZ,    @POP_BC,   @JP_NZ,     @JP,       @CALL_NZ, @PUSH_BC, @ADD_A_8,  @RST00,   @RET_Z,    @RET,      @JP_Z,     @PFX_CB,   @CALL_Z,  @CALL,    @ADC_A_8,  @RST08,\  'Cx
    @RET_NC,    @POP_DE,   @JP_NC,     @UNV,      @CALL_NC, @PUSH_DE, @SUB_8,    @RST10,   @RET_C,    @RETI,     @JP_C,     @UNV,      @CALL_C,  @UNV,     @SBC_A_8,  @RST18,\  'Dx
    @LD_xFF_8_A,@POP_HL,   @LD_xFF_C_A,@UNV,      @UNV,     @PUSH_HL, @AND_8,    @RST20,   @ADD_SP_R8,@JP_HL,    @LD_x16_A, @UNV,      @UNV,     @UNV,     @XOR_8,    @RST28,\  'Ex
    @LD_A_xFF_8,@POP_AF,   @LD_A_xFF_C,@DI,       @UNV,     @PUSH_AF, @OR_8,     @RST30,   @LD_HL_SP, @LD_SP_HL, @LD_A_x16, @EI,       @UNV,     @UNV,     @CP_8,     @RST38,\    'Fx
    @PkMn_Gen2_CopyBytes,@PkMn_Gen2_FarCopyBytes,@PkMn_Gen2_FarCopyBytesDouble
: END


: DEF Decode_CB
  ON opcode_CB Goto \
\'   x0       x1       x2       x3       x4       x5       x6         x7       x8       x9       xA       xB       xC       xD       xE         xF
    @RLC_B,  @RLC_C,  @RLC_D,  @RLC_E,  @RLC_H,  @RLC_L,  @RLC_xHL,  @RLC_A,  @RRC_B,  @RRC_C,  @RRC_D,  @RRC_E,  @RRC_H,  @RRC_L,  @RRC_xHL,  @RRC_A,\  '0x
    @RL_B,   @RL_C,   @RL_D,   @RL_E,   @RL_H,   @RL_L,   @RL_xHL,   @RL_A,   @RR_B,   @RR_C,   @RR_D,   @RR_E,   @RR_H,   @RR_L,   @RR_xHL,   @RR_A, \  '1x
    @SLA_B,  @SLA_C,  @SLA_D,  @SLA_E,  @SLA_H,  @SLA_L,  @SLA_xHL,  @SLA_A,  @SRA_B,  @SRA_C,  @SRA_D,  @SRA_E,  @SRA_H,  @SRA_L,  @SRA_xHL,  @SRA_A,\  '2x
    @SWAP_B, @SWAP_C, @SWAP_D, @SWAP_E, @SWAP_H, @SWAP_L, @SWAP_xHL, @SWAP_A, @SRL_B,  @SRL_C,  @SRL_D,  @SRL_E,  @SRL_H,  @SRL_L,  @SRL_xHL,  @SRL_A,\  '3x
    @BIT_0_B,@BIT_0_C,@BIT_0_D,@BIT_0_E,@BIT_0_H,@BIT_0_L,@BIT_0_xHL,@BIT_0_A,@BIT_1_B,@BIT_1_C,@BIT_1_D,@BIT_1_E,@BIT_1_H,@BIT_1_L,@BIT_1_xHL,@BIT_1_A,\'4x
    @BIT_2_B,@BIT_2_C,@BIT_2_D,@BIT_2_E,@BIT_2_H,@BIT_2_L,@BIT_2_xHL,@BIT_2_A,@BIT_3_B,@BIT_3_C,@BIT_3_D,@BIT_3_E,@BIT_3_H,@BIT_3_L,@BIT_3_xHL,@BIT_3_A,\'5x
    @BIT_4_B,@BIT_4_C,@BIT_4_D,@BIT_4_E,@BIT_4_H,@BIT_4_L,@BIT_4_xHL,@BIT_4_A,@BIT_5_B,@BIT_5_C,@BIT_5_D,@BIT_5_E,@BIT_5_H,@BIT_5_L,@BIT_5_xHL,@BIT_5_A,\'6x
    @BIT_6_B,@BIT_6_C,@BIT_6_D,@BIT_6_E,@BIT_6_H,@BIT_6_L,@BIT_6_xHL,@BIT_6_A,@BIT_7_B,@BIT_7_C,@BIT_7_D,@BIT_7_E,@BIT_7_H,@BIT_7_L,@BIT_7_xHL,@BIT_7_A,\'7x
    @RES_0_B,@RES_0_C,@RES_0_D,@RES_0_E,@RES_0_H,@RES_0_L,@RES_0_xHL,@RES_0_A,@RES_1_B,@RES_1_C,@RES_1_D,@RES_1_E,@RES_1_H,@RES_1_L,@RES_1_xHL,@RES_1_A,\'8x
    @RES_2_B,@RES_2_C,@RES_2_D,@RES_2_E,@RES_2_H,@RES_2_L,@RES_2_xHL,@RES_2_A,@RES_3_B,@RES_3_C,@RES_3_D,@RES_3_E,@RES_3_H,@RES_3_L,@RES_3_xHL,@RES_3_A,\'9x
    @RES_4_B,@RES_4_C,@RES_4_D,@RES_4_E,@RES_4_H,@RES_4_L,@RES_4_xHL,@RES_4_A,@RES_5_B,@RES_5_C,@RES_5_D,@RES_5_E,@RES_5_H,@RES_5_L,@RES_5_xHL,@RES_5_A,\'Ax
    @RES_6_B,@RES_6_C,@RES_6_D,@RES_6_E,@RES_6_H,@RES_6_L,@RES_6_xHL,@RES_6_A,@RES_7_B,@RES_7_C,@RES_7_D,@RES_7_E,@RES_7_H,@RES_7_L,@RES_7_xHL,@RES_7_A,\'Bx
    @SET_0_B,@SET_0_C,@SET_0_D,@SET_0_E,@SET_0_H,@SET_0_L,@SET_0_xHL,@SET_0_A,@SET_1_B,@SET_1_C,@SET_1_D,@SET_1_E,@SET_1_H,@SET_1_L,@SET_1_xHL,@SET_1_A,\'Cx
    @SET_2_B,@SET_2_C,@SET_2_D,@SET_2_E,@SET_2_H,@SET_2_L,@SET_2_xHL,@SET_2_A,@SET_3_B,@SET_3_C,@SET_3_D,@SET_3_E,@SET_3_H,@SET_3_L,@SET_3_xHL,@SET_3_A,\'Dx
    @SET_4_B,@SET_4_C,@SET_4_D,@SET_4_E,@SET_4_H,@SET_4_L,@SET_4_xHL,@SET_4_A,@SET_5_B,@SET_5_C,@SET_5_D,@SET_5_E,@SET_5_H,@SET_5_L,@SET_5_xHL,@SET_5_A,\'Ex
    @SET_6_B,@SET_6_C,@SET_6_D,@SET_6_E,@SET_6_H,@SET_6_L,@SET_6_xHL,@SET_6_A,@SET_7_B,@SET_7_C,@SET_7_D,@SET_7_E,@SET_7_H,@SET_7_L,@SET_7_xHL,@SET_7_A  'Fx
: END



'#######################################################


:DEF __INVALID
@UNV
  ?format$("0x%4X: Invalid opcode: 0x%2X",DMG_PC,OPCODE)
  Goto@De
:END

:DEF __LD_A
@LD_A_A:Goto@De
@LD_A_B:DMG_A=DMG_B:Goto@De
@LD_A_C:DMG_A=DMG_C:Goto@De
@LD_A_D:DMG_A=DMG_D:Goto@De
@LD_A_E:DMG_A=DMG_E:Goto@De
@LD_A_H:DMG_A=DMG_H:Goto@De
@LD_A_L:DMG_A=DMG_L:Goto@De
@LD_A_xHL:DMG_A=Mem[{HL()}]Goto@De
@LD_A_8:DMG_A={A8()}{ADD1PC()}Goto@De
:END

:DEF __LD_B
@LD_B_A:DMG_B=DMG_A:Goto@De
@LD_B_B:Goto@De
@LD_B_C:DMG_B=DMG_C:Goto@De
@LD_B_D:DMG_B=DMG_D:Goto@De
@LD_B_E:DMG_B=DMG_E:Goto@De
@LD_B_H:DMG_B=DMG_H:Goto@De
@LD_B_L:DMG_B=DMG_L:Goto@De
@LD_B_xHL:DMG_B=Mem[{HL()}]Goto@De
@LD_B_8:DMG_B={A8()}{ADD1PC()}Goto@De
:END

:DEF __LD_C
@LD_C_A:DMG_C=DMG_A:Goto@De
@LD_C_B:DMG_C=DMG_B:Goto@De
@LD_C_C:Goto@De
@LD_C_D:DMG_C=DMG_D:Goto@De
@LD_C_E:DMG_C=DMG_E:Goto@De
@LD_C_H:DMG_C=DMG_H:Goto@De
@LD_C_L:DMG_C=DMG_L:Goto@De
@LD_C_xHL:DMG_C=Mem[{HL()}]Goto@De
@LD_C_8:DMG_C={A8()}{ADD1PC()}Goto@De
:END

:DEF __LD_D
@LD_D_A:DMG_D=DMG_A:Goto@De
@LD_D_B:DMG_D=DMG_B:Goto@De
@LD_D_C:DMG_D=DMG_C:Goto@De
@LD_D_D:Goto@De
@LD_D_E:DMG_D=DMG_E:Goto@De
@LD_D_H:DMG_D=DMG_H:Goto@De
@LD_D_L:DMG_D=DMG_L:Goto@De
@LD_D_xHL:DMG_D=Mem[{HL()}]Goto@De
@LD_D_8:DMG_D={A8()}{ADD1PC()}Goto@De
:END

:DEF __LD_E
@LD_E_A:DMG_E=DMG_A:Goto@De
@LD_E_B:DMG_E=DMG_B:Goto@De
@LD_E_C:DMG_E=DMG_C:Goto@De
@LD_E_D:DMG_E=DMG_D:Goto@De
@LD_E_E:Goto@De
@LD_E_H:DMG_E=DMG_H:Goto@De
@LD_E_L:DMG_E=DMG_L:Goto@De
@LD_E_xHL: DMG_E=Mem[{HL()}]Goto@De
@LD_E_8:DMG_E={A8()}{ADD1PC()}Goto@De
:END

:DEF __LD_H
@LD_H_A:DMG_H=DMG_A:Goto@De
@LD_H_B:DMG_H=DMG_B:Goto@De
@LD_H_C:DMG_H=DMG_C:Goto@De
@LD_H_D:DMG_H=DMG_D:Goto@De
@LD_H_E:DMG_H=DMG_E:Goto@De
@LD_H_H:Goto@De
@LD_H_L:DMG_H=DMG_L:Goto@De
@LD_H_xHL:DMG_H=Mem[{HL()}]Goto@De
@LD_H_8:DMG_H={A8()}{ADD1PC()}Goto@De
:END

:DEF __LD_L
@LD_L_A:DMG_L=DMG_A:Goto@De
@LD_L_B:DMG_L=DMG_B:Goto@De
@LD_L_C:DMG_L=DMG_C:Goto@De
@LD_L_D:DMG_L=DMG_D:Goto@De
@LD_L_E:DMG_L=DMG_E:Goto@De
@LD_L_H:DMG_L=DMG_H:Goto@De
@LD_L_L:Goto@De
@LD_L_xHL:DMG_L=Mem[{HL()}]Goto@De
@LD_L_8:DMG_L={A8()}{ADD1PC()}Goto@De
:END

:DEF __LD_xHL
@LD_xHL_B:I={HL()}:J=DMG_B:Goto@PokeIJ_De
@LD_xHL_C:I={HL()}:J=DMG_C:Goto@PokeIJ_De
@LD_xHL_D:I={HL()}:J=DMG_D:Goto@PokeIJ_De
@LD_xHL_E:I={HL()}:J=DMG_E:Goto@PokeIJ_De
@LD_xHL_H:I={HL()}:J=DMG_H:Goto@PokeIJ_De
@LD_xHL_L:I={HL()}:J=DMG_L:Goto@PokeIJ_De
@LD_xHL_8:I={HL()}:J={A8()}{ADD1PC()}Goto@PokeIJ_De
@LD_xHL_A:I={HL()}:J=DMG_A:Goto@PokeIJ_De
:END


:DEF __LD_MISC
@LDI_xHL_A:I={HL()}RGB I+1OUT,DMG_H,DMG_L:J=DMG_A:Goto@PokeIJ_De
@LDD_xHL_A:I={HL()}RGB I-1OUT,DMG_H,DMG_L:J=DMG_A:Goto@PokeIJ_De

@LDI_A_xHL:I={HL()}:DMG_A=Mem[I]RGB I+1OUT,DMG_H,DMG_L:Goto@De
@LDD_A_xHL:I={HL()}:DMG_A=Mem[I]RGB I-1OUT,DMG_H,DMG_L:Goto@De

@LD_A_xBC:DMG_A=Mem[{BC()}]Goto@De
@LD_A_xDE:DMG_A=Mem[{DE()}]Goto@De

@LD_A_x16:DMG_A=Mem[{A16()}]{ADD2PC()}Goto@De
@LD_x16_A:I={A16()}{ADD2PC()}J=DMG_A:Goto@PokeIJ_De

@LD_xBC_A:I={BC()}:J=DMG_A:Goto@PokeIJ_De
@LD_xDE_A:I={DE()}:J=DMG_A:Goto@PokeIJ_De

@LD_xFF_8_A:I=&HFF00+{A8()}{ADD1PC()}J=DMG_A:Goto@PokeIJ_De
'@LD_xFF_8_A:I=&HFF00+{A8()}{ADD1PC()}J=DMG_A:Goto@PokeIJ_IO_De
@LD_A_xFF_8:DMG_A=Mem[&HFF00+{A8()}]{ADD1PC()}Goto@De

@LD_xFF_C_A:I=&HFF00+DMG_C:J=DMG_A:Goto@PokeIJ_De
'@LD_xFF_C_A:I=&HFF00+DMG_C:J=DMG_A:Goto@PokeIJ_IO_De
@LD_A_xFF_C:DMG_A=Mem[&HFF00+DMG_C]Goto@De

@LD_BC_16:DMG_B=Mem[DMG_PC+1]DMG_C={A8()}{ADD2PC()}Goto@De
@LD_DE_16:DMG_D=Mem[DMG_PC+1]DMG_E={A8()}{ADD2PC()}Goto@De
@LD_HL_16:DMG_H=Mem[DMG_PC+1]DMG_L={A8()}{ADD2PC()}Goto@De
@LD_SP_16:DMG_SP={A16()}{ADD2PC()}Goto@De
@LD_SP_HL:DMG_SP={HL()}Goto@De

@LD_HL_SP:I={A8()}{ADD1PC()}DMG_F=ADD_table[RGB(0,0,DMG_SP AND&HFF,I)]AND&h3F:RGB DMG_SP+SGN8_table[I]OUT,DMG_H,DMG_L:Goto@De
'@LD_HL_SP:RGB DMG_SP OUT,DMG_H,DMG_L:Goto@De

@LD_HL_x16:I={A16()}{ADD2PC()}DMG_H=Mem[I+1]DMG_L=Mem[I]Goto@De
@LD_x16_HL:I={A16()}{ADD2PC()}POKE I+1,DMG_H:J=DMG_L:Goto@PokeIJ_De
@LD_x16_SP:I={A16()}{ADD2PC()}POKE I+1,DMG_SP DIV 256J=DMG_SP AND 255Goto@PokeIJ_De
:END


:DEF __PUSH
@PUSH_BC:Mem[DMG_SP-1]=DMG_B:Mem[DMG_SP-2]=DMG_C:DMG_SP=DMG_SP-2Goto@De
@PUSH_DE:Mem[DMG_SP-1]=DMG_D:Mem[DMG_SP-2]=DMG_E:DMG_SP=DMG_SP-2Goto@De
@PUSH_HL:Mem[DMG_SP-1]=DMG_H:Mem[DMG_SP-2]=DMG_L:DMG_SP=DMG_SP-2Goto@De
@PUSH_AF:Mem[DMG_SP-1]=DMG_A:Mem[DMG_SP-2]=DMG_F:DMG_SP=DMG_SP-2Goto@De
:END

:DEF __POP
'@POP_BC:DMG_B=Mem[DMG_SP+1]DMG_C=Mem[DMG_SP]DMG_SP=(DMG_SP+2)AND 65535Goto@De
'@POP_DE:DMG_D=Mem[DMG_SP+1]DMG_E=Mem[DMG_SP]DMG_SP=(DMG_SP+2)AND 65535Goto@De
'@POP_HL:DMG_H=Mem[DMG_SP+1]DMG_L=Mem[DMG_SP]DMG_SP=(DMG_SP+2)AND 65535Goto@De
'@POP_AF:DMG_A=Mem[DMG_SP+1]DMG_F=Mem[DMG_SP]AND&hF0:DMG_SP=(DMG_SP+2)AND 65535Goto@De
@POP_BC:DMG_B=Mem[DMG_SP+1]DMG_C=Mem[DMG_SP]DMG_SP=DMG_SP+2Goto@De
@POP_DE:DMG_D=Mem[DMG_SP+1]DMG_E=Mem[DMG_SP]DMG_SP=DMG_SP+2Goto@De
@POP_HL:DMG_H=Mem[DMG_SP+1]DMG_L=Mem[DMG_SP]DMG_SP=DMG_SP+2Goto@De
:IF(FlagRegHack%)THEN
@POP_AF:DMG_A=Mem[DMG_SP+1]DMG_F=Mem[DMG_SP]DMG_SP=DMG_SP+2Goto@De
:ELSE
@POP_AF:DMG_A=Mem[DMG_SP+1]DMG_F=Mem[DMG_SP]AND&hF0:DMG_SP=DMG_SP+2Goto@De
:ENDIF
:END


:DEF __ADD_A
@ADD_A_A:RGB ADD_table[RGB(0,0,DMG_A,DMG_A)]OUT,DMG_A,DMG_F:Goto@De
@ADD_A_B:RGB ADD_table[RGB(0,0,DMG_A,DMG_B)]OUT,DMG_A,DMG_F:Goto@De
@ADD_A_C:RGB ADD_table[RGB(0,0,DMG_A,DMG_C)]OUT,DMG_A,DMG_F:Goto@De
@ADD_A_D:RGB ADD_table[RGB(0,0,DMG_A,DMG_D)]OUT,DMG_A,DMG_F:Goto@De
@ADD_A_E:RGB ADD_table[RGB(0,0,DMG_A,DMG_E)]OUT,DMG_A,DMG_F:Goto@De
@ADD_A_H:RGB ADD_table[RGB(0,0,DMG_A,DMG_H)]OUT,DMG_A,DMG_F:Goto@De
@ADD_A_L:RGB ADD_table[RGB(0,0,DMG_A,DMG_L)]OUT,DMG_A,DMG_F:Goto@De
@ADD_A_xHL:RGB ADD_table[RGB(0,0,DMG_A,Mem[{HL()}])]OUT,DMG_A,DMG_F:Goto@De
@ADD_A_8:RGB ADD_table[RGB(0,0,DMG_A,{A8()})]OUT,DMG_A,DMG_F:{ADD1PC()}Goto@De
:END


:DEF ADC_A P$
ON DMG_F AND&h10GOTO@DMG_F_AND_x10_ADC_{P$}
  RGB ADC_table[RGB(0,0,DMG_A,DMG_{P$})]OUT,DMG_A,DMG_F
  Goto@De
@DMG_F_AND_x10_ADC_{P$}
  RGB ADD_table[RGB(0,0,DMG_A,DMG_{P$})]OUT,DMG_A,DMG_F
  Goto@De
:END

:DEF __ADC_A
@ADC_A_A:
:ADC_A "A"
@ADC_A_B:
:ADC_A "B"
@ADC_A_C:
:ADC_A "C"
@ADC_A_D:
:ADC_A "D"
@ADC_A_E:
:ADC_A "E"
@ADC_A_H:
:ADC_A "H"
@ADC_A_L:
:ADC_A "L"

@ADC_A_xHL:
ON DMG_F AND&h10GOTO@DMG_F_AND_x10_ADC_xHL
  RGB ADC_table[RGB(0,0,DMG_A,Mem[{HL()}])]OUT,DMG_A,DMG_F
  Goto@De
@DMG_F_AND_x10_ADC_xHL
  RGB ADD_table[RGB(0,0,DMG_A,Mem[{HL()}])]OUT,DMG_A,DMG_F
  Goto@De

@ADC_A_8:
ON DMG_F AND&h10GOTO@DMG_F_AND_x10_ADC_8
  RGB ADC_table[RGB(0,0,DMG_A,{A8()})]OUT,DMG_A,DMG_F
  {ADD1PC()}
  Goto@De
@DMG_F_AND_x10_ADC_8
  RGB ADD_table[RGB(0,0,DMG_A,{A8()})]OUT,DMG_A,DMG_F
  {ADD1PC()}
  Goto@De
:END


:DEF __SUB_A
@SUB_A:RGB SUB_table[RGB(0,0,DMG_A,DMG_A)]OUT,DMG_A,DMG_F:Goto@De
@SUB_B:RGB SUB_table[RGB(0,0,DMG_A,DMG_B)]OUT,DMG_A,DMG_F:Goto@De
@SUB_C:RGB SUB_table[RGB(0,0,DMG_A,DMG_C)]OUT,DMG_A,DMG_F:Goto@De
@SUB_D:RGB SUB_table[RGB(0,0,DMG_A,DMG_D)]OUT,DMG_A,DMG_F:Goto@De
@SUB_E:RGB SUB_table[RGB(0,0,DMG_A,DMG_E)]OUT,DMG_A,DMG_F:Goto@De
@SUB_H:RGB SUB_table[RGB(0,0,DMG_A,DMG_H)]OUT,DMG_A,DMG_F:Goto@De
@SUB_L:RGB SUB_table[RGB(0,0,DMG_A,DMG_L)]OUT,DMG_A,DMG_F:Goto@De
@SUB_xHL:RGB SUB_table[RGB(0,0,DMG_A,Mem[{HL()}])]OUT,DMG_A,DMG_F:Goto@De
@SUB_8:RGB SUB_table[RGB(0,0,DMG_A,{A8()})]OUT,DMG_A,DMG_F:{ADD1PC()}Goto@De
:END


:DEF SBC_A P$
ON DMG_F AND&h10GOTO@DMG_F_AND_x10_SBC_{P$}
  RGB SBC_table[RGB(0,0,DMG_A,DMG_{P$})]OUT,DMG_A,DMG_F
  Goto@De
@DMG_F_AND_x10_SBC_{P$}
  RGB SUB_table[RGB(0,0,DMG_A,DMG_{P$})]OUT,DMG_A,DMG_F
  Goto@De
:END

:DEF __SBC_A
@SBC_A_A:
:SBC_A "A"
@SBC_A_B:
:SBC_A "B"
@SBC_A_C:
:SBC_A "C"
@SBC_A_D:
:SBC_A "D"
@SBC_A_E:
:SBC_A "E"
@SBC_A_H:
:SBC_A "H"
@SBC_A_L:
:SBC_A "L"

@SBC_A_xHL:
ON DMG_F AND&h10GOTO@DMG_F_AND_x10_SBC_8
  RGB SBC_table[RGB(0,0,DMG_A,Mem[{HL()}])]OUT,DMG_A,DMG_F
  Goto@De
@DMG_F_AND_x10_SBC_8
  RGB SUB_table[RGB(0,0,DMG_A,Mem[{HL()}])]OUT,DMG_A,DMG_F
  Goto@De

@SBC_A_8:
ON DMG_F AND&h10GOTO@DMG_F_AND_x10_SBC_xHL
  RGB SBC_table[RGB(0,0,DMG_A,{A8()})]OUT,DMG_A,DMG_F
  {ADD1PC()}
  Goto@De
@DMG_F_AND_x10_SBC_xHL
  RGB SUB_table[RGB(0,0,DMG_A,{A8()})]OUT,DMG_A,DMG_F
  {ADD1PC()}
  Goto@De
:END


:DEF __AND_A
@AND_A:DMG_F=ZeroTable[DMG_A]+&h20Goto@De
@AND_B:DMG_A=DMG_A AND DMG_B:DMG_F=ZeroTable[DMG_A]+&h20Goto@De
@AND_C:DMG_A=DMG_A AND DMG_C:DMG_F=ZeroTable[DMG_A]+&h20Goto@De
@AND_D:DMG_A=DMG_A AND DMG_D:DMG_F=ZeroTable[DMG_A]+&h20Goto@De
@AND_E:DMG_A=DMG_A AND DMG_E:DMG_F=ZeroTable[DMG_A]+&h20Goto@De
@AND_H:DMG_A=DMG_A AND DMG_H:DMG_F=ZeroTable[DMG_A]+&h20Goto@De
@AND_L:DMG_A=DMG_A AND DMG_L:DMG_F=ZeroTable[DMG_A]+&h20Goto@De
@AND_xHL:DMG_A=DMG_A AND Mem[{HL()}]DMG_F=ZeroTable[DMG_A]+&h20Goto@De
@AND_8:DMG_A=DMG_A AND {A8()}{ADD1PC()}DMG_F=ZeroTable[DMG_A]+&h20Goto@De
:END

:DEF __OR__A
@OR_A:DMG_F=ZeroTable[DMG_A]Goto@De
@OR_B:DMG_A=DMG_A OR DMG_B:DMG_F=ZeroTable[DMG_A]Goto@De
@OR_C:DMG_A=DMG_A OR DMG_C:DMG_F=ZeroTable[DMG_A]Goto@De
@OR_D:DMG_A=DMG_A OR DMG_D:DMG_F=ZeroTable[DMG_A]Goto@De
@OR_E:DMG_A=DMG_A OR DMG_E:DMG_F=ZeroTable[DMG_A]Goto@De
@OR_H:DMG_A=DMG_A OR DMG_H:DMG_F=ZeroTable[DMG_A]Goto@De
@OR_L:DMG_A=DMG_A OR DMG_L:DMG_F=ZeroTable[DMG_A]Goto@De
@OR_xHL:DMG_A=DMG_A OR Mem[{HL()}]DMG_F=ZeroTable[DMG_A]Goto@De
@OR_8:DMG_A=DMG_A OR {A8()}{ADD1PC()}DMG_F=ZeroTable[DMG_A]Goto@De
:END

:DEF __XOR_A
@XOR_A:DMG_A=0DMG_F=128Goto@De
@XOR_B:DMG_A=DMG_A XOR DMG_B:DMG_F=ZeroTable[DMG_A]Goto@De
@XOR_C:DMG_A=DMG_A XOR DMG_C:DMG_F=ZeroTable[DMG_A]Goto@De
@XOR_D:DMG_A=DMG_A XOR DMG_D:DMG_F=ZeroTable[DMG_A]Goto@De
@XOR_E:DMG_A=DMG_A XOR DMG_E:DMG_F=ZeroTable[DMG_A]Goto@De
@XOR_H:DMG_A=DMG_A XOR DMG_H:DMG_F=ZeroTable[DMG_A]Goto@De
@XOR_L:DMG_A=DMG_A XOR DMG_L:DMG_F=ZeroTable[DMG_A]Goto@De
@XOR_xHL:DMG_A=DMG_A XOR Mem[{HL()}]DMG_F=ZeroTable[DMG_A]Goto@De
@XOR_8:DMG_A=DMG_A XOR {A8()}{ADD1PC()}DMG_F=ZeroTable[DMG_A]Goto@De
:END

:DEF __CP__A
@CP_A:DMG_F=SUB_table[RGB(0,0,DMG_A,DMG_A)]AND 255Goto@De
@CP_B:DMG_F=SUB_table[RGB(0,0,DMG_A,DMG_B)]AND 255Goto@De
@CP_C:DMG_F=SUB_table[RGB(0,0,DMG_A,DMG_C)]AND 255Goto@De
@CP_D:DMG_F=SUB_table[RGB(0,0,DMG_A,DMG_D)]AND 255Goto@De
@CP_E:DMG_F=SUB_table[RGB(0,0,DMG_A,DMG_E)]AND 255Goto@De
@CP_H:DMG_F=SUB_table[RGB(0,0,DMG_A,DMG_H)]AND 255Goto@De
@CP_L:DMG_F=SUB_table[RGB(0,0,DMG_A,DMG_L)]AND 255Goto@De
@CP_xHL:DMG_F=SUB_table[RGB(0,0,DMG_A,Mem[{HL()}])]AND 255Goto@De
@CP_8:DMG_F=SUB_table[RGB(0,0,DMG_A,{A8()})]AND 255{ADD1PC()}Goto@De
:END

:DEF __INC_A
@INC_A:DMG_A=(DMG_A+1)AND 255DMG_F=INC_table[DMG_A]+(DMG_F AND&h10)Goto@De
@INC_B:DMG_B=(DMG_B+1)AND 255DMG_F=INC_table[DMG_B]+(DMG_F AND&h10)Goto@De
@INC_C:DMG_C=(DMG_C+1)AND 255DMG_F=INC_table[DMG_C]+(DMG_F AND&h10)Goto@De
@INC_D:DMG_D=(DMG_D+1)AND 255DMG_F=INC_table[DMG_D]+(DMG_F AND&h10)Goto@De
@INC_E:DMG_E=(DMG_E+1)AND 255DMG_F=INC_table[DMG_E]+(DMG_F AND&h10)Goto@De
@INC_H:DMG_H=(DMG_H+1)AND 255DMG_F=INC_table[DMG_H]+(DMG_F AND&h10)Goto@De
@INC_L:DMG_L=(DMG_L+1)AND 255DMG_F=INC_table[DMG_L]+(DMG_F AND&h10)Goto@De
@INC_xHL:I={HL()}:J=(Mem[I]+1)AND 255DMG_F=INC_table[J]+(DMG_F AND&h10)Goto@PokeIJ_De
:END

:DEF __DEC_A
@DEC_A:DMG_A=(DMG_A-1)AND 255DMG_F=DEC_table[DMG_A]+(DMG_F AND&h10)Goto@De
@DEC_B:DMG_B=(DMG_B-1)AND 255DMG_F=DEC_table[DMG_B]+(DMG_F AND&h10)Goto@De
@DEC_C:DMG_C=(DMG_C-1)AND 255DMG_F=DEC_table[DMG_C]+(DMG_F AND&h10)Goto@De
@DEC_D:DMG_D=(DMG_D-1)AND 255DMG_F=DEC_table[DMG_D]+(DMG_F AND&h10)Goto@De
@DEC_E:DMG_E=(DMG_E-1)AND 255DMG_F=DEC_table[DMG_E]+(DMG_F AND&h10)Goto@De
@DEC_H:DMG_H=(DMG_H-1)AND 255DMG_F=DEC_table[DMG_H]+(DMG_F AND&h10)Goto@De
@DEC_L:DMG_L=(DMG_L-1)AND 255DMG_F=DEC_table[DMG_L]+(DMG_F AND&h10)Goto@De
@DEC_xHL:I={HL()}:J=(Mem[I]-1)AND 255DMG_F=DEC_table[J]+(DMG_F AND&h10)Goto@PokeIJ_De
:END


:DEF __ADD_16BIT
@ADD_HL_BC:
'DMG_L=ADD_table[RGB(0,0,DMG_L,DMG_C)]
'DMG_F=(DMG_F AND&h80)+(DMG_L AND&h7F)
'DMG_L=DMG_L DIV 256
'ON DMG_F AND&h10GOTO@DMG_F_AND_x10_ADD_HL_BC
RGB ADD_table[RGB(0,0,DMG_L,DMG_C)]OUT,DMG_L,TMP%
ON TMP% AND&h10GOTO@DMG_F_AND_x10_ADD_HL_BC
  DMG_H=ADC_table[RGB(0,0,DMG_H,DMG_B)]
  DMG_F=(DMG_F AND&h80)+(DMG_H AND&h7F)
  DMG_H=DMG_H DIV 256
  Goto@De
@DMG_F_AND_x10_ADD_HL_BC
  DMG_H=ADD_table[RGB(0,0,DMG_H,DMG_B)]
  DMG_F=(DMG_F AND&h80)+(DMG_H AND&h7F)
  DMG_H=DMG_H DIV 256
  Goto@De

@ADD_HL_DE:
'DMG_L=ADD_table[RGB(0,0,DMG_L,DMG_E)]
'DMG_F=(DMG_F AND&h80)+(DMG_L AND&h7F)
'DMG_L=DMG_L DIV 256
'ON DMG_F AND&h10GOTO@DMG_F_AND_x10_ADD_HL_DE
RGB ADD_table[RGB(0,0,DMG_L,DMG_E)]OUT,DMG_L,TMP%
ON TMP% AND&h10GOTO@DMG_F_AND_x10_ADD_HL_DE
  DMG_H=ADC_table[RGB(0,0,DMG_H,DMG_D)]
  DMG_F=(DMG_F AND&h80)+(DMG_H AND&h7F)
  DMG_H=DMG_H DIV 256
  Goto@De
@DMG_F_AND_x10_ADD_HL_DE
  DMG_H=ADD_table[RGB(0,0,DMG_H,DMG_D)]
  DMG_F=(DMG_F AND&h80)+(DMG_H AND&h7F)
  DMG_H=DMG_H DIV 256
  Goto@De

@ADD_HL_HL:
'DMG_L=ADD_table[RGB(0,0,DMG_L,DMG_L)]
'DMG_F=(DMG_F AND&h80)+(DMG_L AND&h7F)
'DMG_L=DMG_L DIV 256
'ON DMG_F AND&h10GOTO@DMG_F_AND_x10_ADD_HL_HL
RGB ADD_table[RGB(0,0,DMG_L,DMG_L)]OUT,DMG_L,TMP%
ON TMP% AND&h10GOTO@DMG_F_AND_x10_ADD_HL_HL
  DMG_H=ADC_table[RGB(0,0,DMG_H,DMG_H)]
  DMG_F=(DMG_F AND&h80)+(DMG_H AND&h7F)
  DMG_H=DMG_H DIV 256
  Goto@De
@DMG_F_AND_x10_ADD_HL_HL
  DMG_H=ADD_table[RGB(0,0,DMG_H,DMG_H)]
  DMG_F=(DMG_F AND&h80)+(DMG_H AND&h7F)
  DMG_H=DMG_H DIV 256
  Goto@De

@ADD_HL_SP:
'RGB DMG_SP OUT,TMP%,TM2%
'DMG_L=ADD_table[RGB(0,0,DMG_L,TM2%)]
'DMG_F=(DMG_F AND&h80)+(DMG_L AND&h7F)
'DMG_L=DMG_L DIV 256
'ON DMG_F AND&h10GOTO@DMG_F_AND_x10_ADD_HL_SP
RGB DMG_SP OUT,TM2%,TMP%
RGB ADD_table[RGB(0,0,DMG_L,TMP%)]OUT,DMG_L,TMP%
ON TMP% AND&h10GOTO@DMG_F_AND_x10_ADD_HL_SP
' DMG_H=ADC_table[RGB(0,0,DMG_H,TMP%)]
  DMG_H=ADC_table[RGB(0,0,DMG_H,TM2%)]
  DMG_F=(DMG_F AND&h80)+(DMG_H AND&h7F)
  DMG_H=DMG_H DIV 256
  Goto@De
@DMG_F_AND_x10_ADD_HL_SP
' DMG_H=ADD_table[RGB(0,0,DMG_H,TMP%)]
  DMG_H=ADD_table[RGB(0,0,DMG_H,TM2%)]
  DMG_F=(DMG_F AND&h80)+(DMG_H AND&h7F)
  DMG_H=DMG_H DIV 256
  Goto@De

'  E8:
'- add sp, r8
'@ADD_SP_R8:I={A8()}{ADD1PC()}TMP%=DMG_SP AND&HFFJ=(DMG_SP+SGN8_table[I])AND&HFFFF:DMG_F=ADD_table[RGB(0,0,TMP%,I)]AND&h3F:DMG_SP=J:Goto@De
@ADD_SP_R8:I={A8()}{ADD1PC()}TMP%=DMG_SP AND&HFF:DMG_SP=DMG_SP+SGN8_table[I]DMG_F=ADD_table[RGB(0,0,TMP%,I)]AND&h3F:Goto@De
:END


:DEF __INC_16BIT
@INC_BC:RGB {BC()}+1OUT,DMG_B,DMG_C:Goto@De
@INC_DE:RGB {DE()}+1OUT,DMG_D,DMG_E:Goto@De
@INC_HL:RGB {HL()}+1OUT,DMG_H,DMG_L:Goto@De
'@INC_SP:DMG_SP=(DMG_SP+1)AND 65535Goto@De
@INC_SP:DMG_SP=DMG_SP+1:Goto@De
:END

:DEF __DEC_16BIT
@DEC_BC:RGB {BC()}-1OUT,DMG_B,DMG_C:Goto@De
@DEC_DE:RGB {DE()}-1OUT,DMG_D,DMG_E:Goto@De
@DEC_HL:RGB {HL()}-1OUT,DMG_H,DMG_L:Goto@De
'@DEC_SP:DMG_SP=(DMG_SP-1)AND 65535Goto@De
@DEC_SP:DMG_SP=DMG_SP-1:Goto@De
:END


:DEF __JP
@JP:DMG_PC={A16()}Goto@De
@JP_NZ:
ON DMG_F AND&h80GOTO@DMG_F_AND_x80_JP_NZ
  {ADD2PC()}
  Goto@De
@DMG_F_AND_x80_JP_NZ
  DMG_PC={A16()}
  Goto@De

@JP_NC:
ON DMG_F AND&h10GOTO@DMG_F_AND_x10_JP_NC
  {ADD2PC()}
  Goto@De
@DMG_F_AND_x10_JP_NC
  DMG_PC={A16()}
  Goto@De

@JP_Z:
ON DMG_F AND&h80GOTO@DMG_F_AND_x80_JP_Z
  DMG_PC={A16()}
  Goto@De
@DMG_F_AND_x80_JP_Z
  {ADD2PC()}
  Goto@De

@JP_C:
ON DMG_F AND&h10GOTO@DMG_F_AND_x10_JP_C
  DMG_PC={A16()}
  Goto@De
@DMG_F_AND_x10_JP_C
  {ADD2PC()}
  Goto@De

@JP_HL:DMG_PC={HL()}Goto@De
:END


:DEF __JR
@JR:DMG_PC=DMG_PC+SGN8_ADD1_table[{A8()}]Goto@De
@JR_NZ:
ON DMG_F AND&h80GOTO@DMG_F_AND_x80_JR_NZ
  {ADD1PC()}
  Goto@De
@DMG_F_AND_x80_JR_NZ
  DMG_PC=DMG_PC+SGN8_ADD1_table[{A8()}]
  DMG_State0=DMG_State0+4
  Goto@De

@JR_NC:
ON DMG_F AND&h10GOTO@DMG_F_AND_x10_JR_NC
  {ADD1PC()}
  Goto@De
@DMG_F_AND_x10_JR_NC
  DMG_PC=DMG_PC+SGN8_ADD1_table[{A8()}]
  DMG_State0=DMG_State0+4
  Goto@De

@JR_Z:
ON DMG_F AND&h80GOTO@DMG_F_AND_x80_JR_Z
  DMG_PC=DMG_PC+SGN8_ADD1_table[{A8()}]
  DMG_State0=DMG_State0+4
  Goto@De
@DMG_F_AND_x80_JR_Z
  {ADD1PC()}
  Goto@De

@JR_C:
ON DMG_F AND&h10GOTO@DMG_F_AND_x10_JR_C
  DMG_PC=DMG_PC+SGN8_ADD1_table[{A8()}]
  DMG_State0=DMG_State0+4
  Goto@De
@DMG_F_AND_x10_JR_C
  {ADD1PC()}
  Goto@De
:END


:DEF __CALL
'::::::::::::::::::::::::::::::::::::::::::
:IF UseDebugger THEN
'::::::::::::::::::::::::::::::::::::::::::
@CALL:RGB DMG_PC+2OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_SP=DMG_SP-2DMG_PC={A16()}PUSH DbgCallTrace,RGB(0,Loaded_ROM_Bank,0,0)+DMG_PC:DMG_State0=DMG_State0+12Goto@De
@CALL_NZ:IF DMG_F AND&h80THEN {ADD2PC()}Goto@De
RGB DMG_PC+2OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_SP=DMG_SP-2DMG_PC={A16()}PUSH DbgCallTrace,RGB(0,Loaded_ROM_Bank,0,0)+DMG_PC:DMG_State0=DMG_State0+12Goto@De
@CALL_NC:IF DMG_F AND&h10THEN {ADD2PC()}Goto@De
RGB DMG_PC+2OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_SP=DMG_SP-2DMG_PC={A16()}PUSH DbgCallTrace,RGB(0,Loaded_ROM_Bank,0,0)+DMG_PC:DMG_State0=DMG_State0+12Goto@De
@CALL_Z:IF DMG_F AND&h80THEN:RGB DMG_PC+2OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_SP=DMG_SP-2DMG_PC={A16()}PUSH DbgCallTrace,RGB(0,Loaded_ROM_Bank,0,0)+DMG_PC:DMG_State0=DMG_State0+12Goto@De
{ADD2PC()}Goto@De
@CALL_C:IF DMG_F AND&h10THEN:RGB DMG_PC+2OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_SP=DMG_SP-2DMG_PC={A16()}PUSH DbgCallTrace,RGB(0,Loaded_ROM_Bank,0,0)+DMG_PC:DMG_State0=DMG_State0+12Goto@De
{ADD2PC()}Goto@De
'::::::::::::::::::::::::::::::::::::::::::
:ELSE 'UseDebugger
'::::::::::::::::::::::::::::::::::::::::::
@CALL:RGB DMG_PC+2OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_SP=DMG_SP-2DMG_PC={A16()}DMG_State0=DMG_State0+12Goto@De
@CALL_NZ:
ON DMG_F AND&h80GOTO@DMG_F_AND_x80_CALL_NZ
  {ADD2PC()}
  Goto@De
@DMG_F_AND_x80_CALL_NZ
  RGB DMG_PC+2OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]
  DMG_SP=DMG_SP-2
  DMG_PC={A16()}
  DMG_State0=DMG_State0+12
  Goto@De

@CALL_NC:
ON DMG_F AND&h10GOTO@DMG_F_AND_x10_CALL_NC
  {ADD2PC()}
  Goto@De
@DMG_F_AND_x10_CALL_NC
  RGB DMG_PC+2OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]
  DMG_SP=DMG_SP-2
  DMG_PC={A16()}
  DMG_State0=DMG_State0+12
  Goto@De

@CALL_Z:
ON DMG_F AND&h80GOTO@DMG_F_AND_x80_CALL_Z
  RGB DMG_PC+2OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]
  DMG_SP=DMG_SP-2
  DMG_PC={A16()}
  DMG_State0=DMG_State0+12
  Goto@De
@DMG_F_AND_x80_CALL_Z
  {ADD2PC()}
  Goto@De

@CALL_C:
ON DMG_F AND&h10GOTO@DMG_F_AND_x10_CALL_C
  RGB DMG_PC+2OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]
  DMG_SP=DMG_SP-2
  DMG_PC={A16()}
  DMG_State0=DMG_State0+12
  Goto@De
@DMG_F_AND_x10_CALL_C
  {ADD2PC()}
  Goto@De
'::::::::::::::::::::::::::::::::::::::::::
:ENDIF'UseDebugger
'::::::::::::::::::::::::::::::::::::::::::
:END


:DEF __RET
'::::::::::::::::::::::::::::::::::::::::::
:IF UseDebugger THEN
'::::::::::::::::::::::::::::::::::::::::::
@RET:TMP%=POP(DbgCallTrace)DMG_PC=(Mem[DMG_SP+1]*256)+Mem[DMG_SP]+DMG_HALT:DMG_SP=DMG_SP+2DMG_HALT=0Goto@De
@RET_NZ:IF DMG_F AND&h80Goto@De
TMP%=POP(DbgCallTrace)DMG_PC=(Mem[DMG_SP+1]*256)+Mem[DMG_SP]+DMG_HALT:DMG_SP=DMG_SP+2DMG_HALT=0DMG_State0=DMG_State0+12Goto@De
@RET_NC:IF DMG_F AND&h10Goto@De
TMP%=POP(DbgCallTrace)DMG_PC=(Mem[DMG_SP+1]*256)+Mem[DMG_SP]+DMG_HALT:DMG_SP=DMG_SP+2DMG_HALT=0DMG_State0=DMG_State0+12Goto@De
@RET_Z:IF DMG_F AND&h80THEN TMP%=POP(DbgCallTrace)DMG_PC=(Mem[DMG_SP+1]*256)+Mem[DMG_SP]+DMG_HALT:DMG_SP=DMG_SP+2DMG_HALT=0DMG_State0=DMG_State0+12Goto@De
Goto@De
@RET_C:IF DMG_F AND&h10THEN TMP%=POP(DbgCallTrace)DMG_PC=(Mem[DMG_SP+1]*256)+Mem[DMG_SP]+DMG_HALT:DMG_SP=DMG_SP+2DMG_HALT=0DMG_State0=DMG_State0+12Goto@De
Goto@De
@RETI:DMG_INTF=1TMP%=POP(DbgCallTrace)DMG_PC=(Mem[DMG_SP+1]*256)+Mem[DMG_SP]+DMG_HALT:DMG_SP=DMG_SP+2DMG_HALT=0Goto@De
'::::::::::::::::::::::::::::::::::::::::::
:ELSE 'UseDebugger
'::::::::::::::::::::::::::::::::::::::::::
'@RET:DMG_PC=(Mem[DMG_SP+1]*256)+Mem[DMG_SP]+DMG_HALT:DMG_SP=DMG_SP+2DMG_HALT=0Goto@De
@RET:DMG_PC=RGB(Mem[DMG_SP]+DMG_HALT,,,Mem[DMG_SP+1],):DMG_SP=DMG_SP+2DMG_HALT=0Goto@De
@RET_NZ:
ON DMG_F AND&h80GOTO@DMG_F_AND_x80_RET_NZ
  Goto@De
@DMG_F_AND_x80_RET_NZ
' DMG_PC=(Mem[DMG_SP+1]*256)+Mem[DMG_SP]+DMG_HALT
  DMG_PC=RGB(Mem[DMG_SP]+DMG_HALT,,,Mem[DMG_SP+1],)
  DMG_SP=DMG_SP+2
  DMG_HALT=0
  DMG_State0=DMG_State0+12
  Goto@De

@RET_NC:
ON DMG_F AND&h10GOTO@DMG_F_AND_x10_RET_NC
  Goto@De
@DMG_F_AND_x10_RET_NC
' DMG_PC=(Mem[DMG_SP+1]*256)+Mem[DMG_SP]+DMG_HALT
  DMG_PC=RGB(Mem[DMG_SP]+DMG_HALT,,,Mem[DMG_SP+1],)
  DMG_SP=DMG_SP+2
  DMG_HALT=0
  DMG_State0=DMG_State0+12
  Goto@De

@RET_Z:
ON DMG_F AND&h80GOTO@De
' DMG_PC=(Mem[DMG_SP+1]*256)+Mem[DMG_SP]+DMG_HALT
  DMG_PC=RGB(Mem[DMG_SP]+DMG_HALT,,,Mem[DMG_SP+1],)
  DMG_SP=DMG_SP+2
  DMG_HALT=0
  DMG_State0=DMG_State0+12
  Goto@De

@RET_C:
ON DMG_F AND&h10GOTO@De
' DMG_PC=(Mem[DMG_SP+1]*256)+Mem[DMG_SP]+DMG_HALT
  DMG_PC=RGB(Mem[DMG_SP]+DMG_HALT,,,Mem[DMG_SP+1],)
  DMG_SP=DMG_SP+2
  DMG_HALT=0
  DMG_State0=DMG_State0+12
  Goto@De

@RETI:DMG_INTF=1DMG_PC=RGB(Mem[DMG_SP]+DMG_HALT,,,Mem[DMG_SP+1],):DMG_SP=DMG_SP+2DMG_HALT=0Goto@De
'::::::::::::::::::::::::::::::::::::::::::
:ENDIF'UseDebugger
'::::::::::::::::::::::::::::::::::::::::::
:END


:DEF __RST
:IF UseDebugger THEN
@RST00:RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_PC=&h00PUSH DbgCallTrace,&h00:DMG_SP=DMG_SP-2Goto@De
@RST08:RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_PC=&h08PUSH DbgCallTrace,&h08:DMG_SP=DMG_SP-2Goto@De
@RST10:RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_PC=&h10PUSH DbgCallTrace,&h10:DMG_SP=DMG_SP-2Goto@De
@RST18:RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_PC=&h18PUSH DbgCallTrace,&h18:DMG_SP=DMG_SP-2Goto@De
@RST20:RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_PC=&h20PUSH DbgCallTrace,&h20:DMG_SP=DMG_SP-2Goto@De
@RST28:RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_PC=&h28PUSH DbgCallTrace,&h28:DMG_SP=DMG_SP-2Goto@De
@RST30:RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_PC=&h30PUSH DbgCallTrace,&h30:DMG_SP=DMG_SP-2Goto@De
@RST38:RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_PC=&h38PUSH DbgCallTrace,&h38:DMG_SP=DMG_SP-2Goto@De
:ELSE 'UseDebugger
@RST00:RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_PC=&h00:DMG_SP=DMG_SP-2Goto@De
@RST08:RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_PC=&h08:DMG_SP=DMG_SP-2Goto@De
@RST10:RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_PC=&h10:DMG_SP=DMG_SP-2Goto@De
@RST18:RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_PC=&h18:DMG_SP=DMG_SP-2Goto@De
@RST20:RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_PC=&h20:DMG_SP=DMG_SP-2Goto@De
@RST28:RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_PC=&h28:DMG_SP=DMG_SP-2Goto@De
@RST30:RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_PC=&h30:DMG_SP=DMG_SP-2Goto@De
@RST38:RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]DMG_PC=&h38:DMG_SP=DMG_SP-2Goto@De
:ENDIF'UseDebugger
:END


:DEF __BIT_MANIP_1
@RLCA:I=DMG_A DIV 128DMG_A=(DMG_A*2+I)AND 255DMG_F=I*16Goto@De
@RLA:TMP%=DMG_A AND&h80:DMG_A=(DMG_A*2OR((DMG_F AND&h10)DIV 16))AND 255DMG_F=TMP% DIV 8Goto@De
@RRCA:I=DMG_A AND 1DMG_A=(DMG_A DIV 2)+I*128DMG_F=I*16Goto@De
@RRA:TMP%=DMG_A AND 1DMG_A=((DMG_A DIV 2)+(DMG_F AND&h10)*8)AND 255DMG_F=TMP%*&h10Goto@De

@SCF:DMG_F=(DMG_F AND&b10000000)+&h10Goto@De
@CCF:DMG_F=(DMG_F XOR&h10)AND&b10010000Goto@De
@CPL:DMG_A=DMG_A XOR &HFF:DMG_F=DMG_F OR&b01100000Goto@De
@DAA:RGB DAA_table[DMG_A+(DMG_F AND&h70)*16]OUT,DMG_A,DMG_F Goto@De
:END


:DEF __STOP
@STOP:'  // !!!TODO!!!
:END


:DEF __HALT
'::::::::::::::::::::::::::::::::::::::::::
:  IF HALT_SkipHack%==0THEN
'::::::::::::::::::::::::::::::::::::::::::

@HALT:
  ON DMG_INTF GOTO@De_SKIP_IRQ
    DMG_HALT=1
    ON(Mem[#IE]AND Mem[#IF])==0GOTO@De'_SKIP_IRQ
      DMG_PC=DMG_PC-1
      Goto@De'_SKIP_IRQ

'::::::::::::::::::::::::::::::::::::::::::
:  ELSE'HALT_SkipHack%
'::::::::::::::::::::::::::::::::::::::::::
'::::::::::::::::::::::::::::::::::::::::::
:    IF ExperimentalRealTimeEmuPacing%==0THEN
'::::::::::::::::::::::::::::::::::::::::::

@HALT:
''DMG_HALT=1
  DMG_state0=#LineTimeTotal
  ON DMG_INTF GOTO@De_SKIP_IRQ
    DMG_HALT=1
'   ON(Mem[#IE]AND Mem[#IF]AND&b11111)==0GOTO@De'_SKIP_IRQ
    ON(Mem[#IE]AND Mem[#IF])==0GOTO@De'_SKIP_IRQ
      DMG_PC=DMG_PC-1
      Goto@De'_SKIP_IRQ

'::::::::::::::::::::::::::::::::::::::::::
:    ELSE 'ExperimentalRealTimeEmuPacing%
'::::::::::::::::::::::::::::::::::::::::::

@HALT:
  ON DMG_INTF GOTO@De_SKIP_IRQ
    DMG_HALT=1
    DMG_State1=#LineTimeTotal
    ON(Mem[#IE]AND Mem[#IF])==0GOTO@De'_SKIP_IRQ
      DMG_PC=DMG_PC-1
      Goto@De'_SKIP_IRQ

'::::::::::::::::::::::::::::::::::::::::::
:    ENDIF'ExperimentalRealTimeEmuPacing%
'::::::::::::::::::::::::::::::::::::::::::
'::::::::::::::::::::::::::::::::::::::::::
:  ENDIF'HALT_SkipHack%
'::::::::::::::::::::::::::::::::::::::::::
:END



'#######################################################


:DEF Instructions

:__INVALID

:__LD_A
:__LD_B
:__LD_C
:__LD_D
:__LD_E
:__LD_H
:__LD_L
:__LD_xHL

:__LD_MISC


:__PUSH
:__POP


:__ADD_A
:__ADC_A

:__SUB_A
:__SBC_A

:__CP__A


:__AND_A
:__OR__A
:__XOR_A


:__INC_A
:__DEC_A


:__ADD_16BIT

:__INC_16BIT
:__DEC_16BIT


:__JP
:__JR

:__CALL
:__RET

:__RST
:__IRQ


:__STOP
:__HALT


:__BIT_MANIP_1
:  Instructions_CB

@PkMn_Gen2_CopyBytes:
  FOR I=0 TO {BC()}-1
    POKE {DE()}+I,Mem[{HL()}+I]
  NEXT I

  DMG_D = DMG_D+DMG_B  DMG_E = DMG_E+DMG_C
  DMG_H = DMG_H+DMG_B  DMG_L = DMG_L+DMG_C

  Goto@RET'@De


''IF {DE()} <= &h7FFF THEN @De
' COPY MEM,{DE()},MEM,{HL()},{BC()}
'
' DMG_D = DMG_D+DMG_B  DMG_E = DMG_E+DMG_C
' DMG_H = DMG_H+DMG_B  DMG_L = DMG_L+DMG_C
'
' Goto@De

@PkMn_Gen2_FarCopyBytes:
  FOR I=0 TO {BC()}-1
    POKE {DE()}+I,CartROM[DMG_A*&h4000+RGB(0,0,DMG_H  AND&h3F,DMG_L)+I]
  NEXT I

  DMG_D = DMG_D+DMG_B  DMG_E = DMG_E+DMG_C
  DMG_H = DMG_H+DMG_B  DMG_L = DMG_L+DMG_C

  Goto@RET'@De


@PkMn_Gen2_FarCopyBytesDouble:
  FOR I=0 TO {BC()}-1
    J=CartROM[DMG_A*&h4000+RGB(0,0,DMG_H AND&h3F,DMG_L)+I]
    POKE {DE()} +     2*I, J
    POKE {DE()} + 1 + 2*I, J
  NEXT I

  DMG_D = DMG_D+2*DMG_B  DMG_E = DMG_E+2*DMG_C
  DMG_H = DMG_H+  DMG_B  DMG_L = DMG_L+  DMG_C

  Goto@RET'@De


@PokeIJ_De:
:  Poke "Goto@De"


  @NOP


:END'Instructions



'#######################################################


:DEF __RLC
@RLC_B:DMG_F=DMG_B DIV 128DMG_B=((DMG_B*2)OR DMG_F)AND 255DMG_F=(DMG_F*16)OR ZeroTable[DMG_B]Goto@De
@RLC_C:DMG_F=DMG_C DIV 128DMG_C=((DMG_C*2)OR DMG_F)AND 255DMG_F=(DMG_F*16)OR ZeroTable[DMG_C]Goto@De
@RLC_D:DMG_F=DMG_D DIV 128DMG_D=((DMG_D*2)OR DMG_F)AND 255DMG_F=(DMG_F*16)OR ZeroTable[DMG_D]Goto@De
@RLC_E:DMG_F=DMG_E DIV 128DMG_E=((DMG_E*2)OR DMG_F)AND 255DMG_F=(DMG_F*16)OR ZeroTable[DMG_E]Goto@De
@RLC_H:DMG_F=DMG_H DIV 128DMG_H=((DMG_H*2)OR DMG_F)AND 255DMG_F=(DMG_F*16)OR ZeroTable[DMG_H]Goto@De
@RLC_L:DMG_F=DMG_L DIV 128DMG_L=((DMG_L*2)OR DMG_F)AND 255DMG_F=(DMG_F*16)OR ZeroTable[DMG_L]Goto@De
@RLC_xHL:I={HL()}:J=Mem[I]DMG_F=J DIV 128J=((J*2)OR DMG_F)AND 255DMG_F=(DMG_F*16)OR ZeroTable[J]Goto@PokeIJ_De
@RLC_A:DMG_F=DMG_A DIV 128DMG_A=((DMG_A*2)OR DMG_F)AND 255DMG_F=(DMG_F*16)OR ZeroTable[DMG_A]Goto@De
:END

:DEF __RRC
@RRC_B:DMG_F=DMG_B AND 1DMG_B=(DMG_B DIV 2)OR(DMG_F*128)DMG_F=(DMG_F*16)OR ZeroTable[DMG_B]Goto@De
@RRC_C:DMG_F=DMG_C AND 1DMG_C=(DMG_C DIV 2)OR(DMG_F*128)DMG_F=(DMG_F*16)OR ZeroTable[DMG_C]Goto@De
@RRC_D:DMG_F=DMG_D AND 1DMG_D=(DMG_D DIV 2)OR(DMG_F*128)DMG_F=(DMG_F*16)OR ZeroTable[DMG_D]Goto@De
@RRC_E:DMG_F=DMG_E AND 1DMG_E=(DMG_E DIV 2)OR(DMG_F*128)DMG_F=(DMG_F*16)OR ZeroTable[DMG_E]Goto@De
@RRC_H:DMG_F=DMG_H AND 1DMG_H=(DMG_H DIV 2)OR(DMG_F*128)DMG_F=(DMG_F*16)OR ZeroTable[DMG_H]Goto@De
@RRC_L:DMG_F=DMG_L AND 1DMG_L=(DMG_L DIV 2)OR(DMG_F*128)DMG_F=(DMG_F*16)OR ZeroTable[DMG_L]Goto@De
@RRC_xHL:I={HL()}:J=Mem[I]DMG_F=J AND 1J=(J DIV 2)OR(DMG_F*128)DMG_F=(DMG_F*16)OR ZeroTable[J]Goto@PokeIJ_De
@RRC_A:DMG_F=DMG_A AND 1DMG_A=(DMG_A DIV 2)OR(DMG_F*128)DMG_F=(DMG_F*16)OR ZeroTable[DMG_A]Goto@De
:END



:DEF RL P$:
ON DMG_{P$} AND&h80GOTO@DMG_{P$}_AND_x80_RL_{P$}
  DMG_{P$}=(DMG_{P$}*2+(DMG_F AND&h10)DIV 16)AND 255
  DMG_F=ZeroTable[DMG_{P$}]OR&h10
  Goto@De
@DMG_{P$}_AND_x80_RL_{P$}
  DMG_{P$}=(DMG_{P$}*2OR(DMG_F AND&h10)DIV 16)AND 255
  DMG_F = ZeroTable[DMG_{P$}]
  Goto@De
:END

:DEF __RL
@RL_B:
:RL "B"
@RL_C:
:RL "C"
@RL_D:
:RL "D"
@RL_E:
:RL "E"
@RL_H:
:RL "H"
@RL_L:
:RL "L"

@RL_xHL:
I={HL()}
J=Mem[I]
ON J AND&h80GOTO@J_AND_x80_RL_xHL
  J=(J*2+(DMG_F AND&h10)DIV 16)AND 255
  DMG_F=ZeroTable[J]OR&h10
  Goto@PokeIJ_De
@J_AND_x80_RL_xHL
  J=(J*2OR(DMG_F AND&h10)DIV 16)AND 255
  DMG_F=ZeroTable[J]
  Goto@PokeIJ_De

@RL_A:
:RL "A"
:END



:DEF RR P$
ON DMG_F AND&h10GOTO@DMG_F_AND_x10_RR_{P$}
  RGB RR_C_table[DMG_{P$}]OUT,DMG_{P$},DMG_F
  Goto@De
@DMG_F_AND_x10_RR_{P$}
  RGB RR_NC_table[DMG_{P$}]OUT,DMG_{P$},DMG_F
  Goto@De
:END

:DEF __RR
@RR_B:
:RR "B"
@RR_C:
:RR "C"
@RR_D:
:RR "D"
@RR_E:
:RR "E"
@RR_H:
:RR "H"
@RR_L:
:RR "L"

@RR_xHL:
I={HL()}
J=Mem[I]
ON DMG_F AND&h10GOTO@DMG_F_AND_x10_RR_xHL
  RGB RR_C_table[J]OUT,J,DMG_F
  Goto@PokeIJ_De
@DMG_F_AND_x10_RR_xHL
  RGB RR_NC_table[J]OUT,J,DMG_F
  Goto@PokeIJ_De

@RR_A:
:RR "A"
:END


:DEF __SLA
'@SLA_B:DMG_B=SLA_table[DMG_B]DMG_F=DMG_B AND&HFF:DMG_B=DMG_B DIV 256Goto@De
@SLA_B:RGB SLA_table[DMG_B]OUT,DMG_B,DMG_F:Goto@De
@SLA_C:RGB SLA_table[DMG_C]OUT,DMG_C,DMG_F:Goto@De
@SLA_D:RGB SLA_table[DMG_D]OUT,DMG_D,DMG_F:Goto@De
@SLA_E:RGB SLA_table[DMG_E]OUT,DMG_E,DMG_F:Goto@De
@SLA_H:RGB SLA_table[DMG_H]OUT,DMG_H,DMG_F:Goto@De
@SLA_L:RGB SLA_table[DMG_L]OUT,DMG_L,DMG_F:Goto@De
'@SLA_xHL:I={HL()}:J=Mem[I]J=SLA_table[J]DMG_F=J AND&HFFJ=J DIV 256Goto@PokeIJ_De
@SLA_xHL:I={HL()}:RGB SLA_table[Mem[I]]OUT,J,DMG_F:Goto@PokeIJ_De
@SLA_A:RGB SLA_table[DMG_A]OUT,DMG_A,DMG_F:Goto@De
:END

:DEF __SRA
'@SRA_B:DMG_B=SRA_table[DMG_B]DMG_F=DMG_B AND&HFF:DMG_B=DMG_B DIV 256Goto@De
@SRA_B:RGB SRA_table[DMG_B]OUT,DMG_B,DMG_F:Goto@De
@SRA_C:RGB SRA_table[DMG_C]OUT,DMG_C,DMG_F:Goto@De
@SRA_D:RGB SRA_table[DMG_D]OUT,DMG_D,DMG_F:Goto@De
@SRA_E:RGB SRA_table[DMG_E]OUT,DMG_E,DMG_F:Goto@De
@SRA_H:RGB SRA_table[DMG_H]OUT,DMG_H,DMG_F:Goto@De
@SRA_L:RGB SRA_table[DMG_L]OUT,DMG_L,DMG_F:Goto@De
'@SRA_xHL:I={HL()}:J=Mem[I]J=SRA_table[J]DMG_F=J AND&HFFJ=J DIV 256Goto@PokeIJ_De
@SRA_xHL:I={HL()}:RGB SRA_table[Mem[I]]OUT,J,DMG_F:Goto@PokeIJ_De
@SRA_A:RGB SRA_table[DMG_A]OUT,DMG_A,DMG_F:Goto@De
:END


:DEF __SWAP
'@SWAP_B:DMG_F=SWAP_table[DMG_B]DMG_B=DMG_F DIV 256DMG_F=DMG_F AND 255Goto@De
@SWAP_B:RGB SWAP_table[DMG_B]OUT,DMG_B,DMG_F:Goto@De
@SWAP_C:RGB SWAP_table[DMG_C]OUT,DMG_C,DMG_F:Goto@De
@SWAP_D:RGB SWAP_table[DMG_D]OUT,DMG_D,DMG_F:Goto@De
@SWAP_E:RGB SWAP_table[DMG_E]OUT,DMG_E,DMG_F:Goto@De
@SWAP_H:RGB SWAP_table[DMG_H]OUT,DMG_H,DMG_F:Goto@De
@SWAP_L:RGB SWAP_table[DMG_L]OUT,DMG_L,DMG_F:Goto@De
'@SWAP_xHL:I={HL()}:DMG_F=SWAP_table[Mem[I]]J=DMG_F DIV 256DMG_F=DMG_F AND 255Goto@PokeIJ_De
@SWAP_xHL:I={HL()}:RGB SWAP_table[Mem[I]]OUT,J,DMG_F:Goto@PokeIJ_De
@SWAP_A:RGB SWAP_table[DMG_A]OUT,DMG_A,DMG_F:Goto@De
:END


:DEF __SRL
@SRL_B:RGB SRL_table[DMG_B]OUT,DMG_B,DMG_F:Goto@De
@SRL_C:RGB SRL_table[DMG_C]OUT,DMG_C,DMG_F:Goto@De
@SRL_D:RGB SRL_table[DMG_D]OUT,DMG_D,DMG_F:Goto@De
@SRL_E:RGB SRL_table[DMG_E]OUT,DMG_E,DMG_F:Goto@De
@SRL_H:RGB SRL_table[DMG_H]OUT,DMG_H,DMG_F:Goto@De
@SRL_L:RGB SRL_table[DMG_L]OUT,DMG_L,DMG_F:Goto@De
@SRL_xHL:RGB SRL_table[Mem[I]]OUT,J,DMG_F:I={HL()}:Goto@PokeIJ_De
@SRL_A:RGB SRL_table[DMG_A]OUT,DMG_A,DMG_F:Goto@De
:END


:DEF __BIT_0
@BIT_0_B:DMG_F=DMG_F AND&h10OR BIT0_table[DMG_B]Goto@De
@BIT_0_C:DMG_F=DMG_F AND&h10OR BIT0_table[DMG_C]Goto@De
@BIT_0_D:DMG_F=DMG_F AND&h10OR BIT0_table[DMG_D]Goto@De
@BIT_0_E:DMG_F=DMG_F AND&h10OR BIT0_table[DMG_E]Goto@De
@BIT_0_H:DMG_F=DMG_F AND&h10OR BIT0_table[DMG_H]Goto@De
@BIT_0_L:DMG_F=DMG_F AND&h10OR BIT0_table[DMG_L]Goto@De
@BIT_0_xHL:DMG_F=DMG_F AND&h10OR BIT0_table[Mem[{HL()}]]Goto@De
@BIT_0_A:DMG_F=DMG_F AND&h10OR BIT0_table[DMG_A]Goto@De
:END


:DEF __BIT_1
@BIT_1_B:DMG_F=DMG_F AND&h10OR BIT1_table[DMG_B]Goto@De
@BIT_1_C:DMG_F=DMG_F AND&h10OR BIT1_table[DMG_C]Goto@De
@BIT_1_D:DMG_F=DMG_F AND&h10OR BIT1_table[DMG_D]Goto@De
@BIT_1_E:DMG_F=DMG_F AND&h10OR BIT1_table[DMG_E]Goto@De
@BIT_1_H:DMG_F=DMG_F AND&h10OR BIT1_table[DMG_H]Goto@De
@BIT_1_L:DMG_F=DMG_F AND&h10OR BIT1_table[DMG_L]Goto@De
@BIT_1_xHL:DMG_F=DMG_F AND&h10OR BIT1_table[Mem[{HL()}]]Goto@De
@BIT_1_A:DMG_F=DMG_F AND&h10OR BIT1_table[DMG_A]Goto@De
:END


:DEF __BIT_2
@BIT_2_B:DMG_F=DMG_F AND&h10OR BIT2_table[DMG_B]Goto@De
@BIT_2_C:DMG_F=DMG_F AND&h10OR BIT2_table[DMG_C]Goto@De
@BIT_2_D:DMG_F=DMG_F AND&h10OR BIT2_table[DMG_D]Goto@De
@BIT_2_E:DMG_F=DMG_F AND&h10OR BIT2_table[DMG_E]Goto@De
@BIT_2_H:DMG_F=DMG_F AND&h10OR BIT2_table[DMG_H]Goto@De
@BIT_2_L:DMG_F=DMG_F AND&h10OR BIT2_table[DMG_L]Goto@De
@BIT_2_xHL:DMG_F=DMG_F AND&h10OR BIT2_table[Mem[{HL()}]]Goto@De
@BIT_2_A:DMG_F=DMG_F AND&h10OR BIT2_table[DMG_A]Goto@De
:END


:DEF __BIT_3
@BIT_3_B:DMG_F=DMG_F AND&h10OR BIT3_table[DMG_B]Goto@De
@BIT_3_C:DMG_F=DMG_F AND&h10OR BIT3_table[DMG_C]Goto@De
@BIT_3_D:DMG_F=DMG_F AND&h10OR BIT3_table[DMG_D]Goto@De
@BIT_3_E:DMG_F=DMG_F AND&h10OR BIT3_table[DMG_E]Goto@De
@BIT_3_H:DMG_F=DMG_F AND&h10OR BIT3_table[DMG_H]Goto@De
@BIT_3_L:DMG_F=DMG_F AND&h10OR BIT3_table[DMG_L]Goto@De
@BIT_3_xHL:DMG_F=DMG_F AND&h10OR BIT3_table[Mem[{HL()}]]Goto@De
@BIT_3_A:DMG_F=DMG_F AND&h10OR BIT3_table[DMG_A]Goto@De
:END


:DEF __BIT_4
@BIT_4_B:DMG_F=DMG_F AND&h10OR BIT4_table[DMG_B]Goto@De
@BIT_4_C:DMG_F=DMG_F AND&h10OR BIT4_table[DMG_C]Goto@De
@BIT_4_D:DMG_F=DMG_F AND&h10OR BIT4_table[DMG_D]Goto@De
@BIT_4_E:DMG_F=DMG_F AND&h10OR BIT4_table[DMG_E]Goto@De
@BIT_4_H:DMG_F=DMG_F AND&h10OR BIT4_table[DMG_H]Goto@De
@BIT_4_L:DMG_F=DMG_F AND&h10OR BIT4_table[DMG_L]Goto@De
@BIT_4_xHL:DMG_F=DMG_F AND&h10OR BIT4_table[Mem[{HL()}]]Goto@De
@BIT_4_A:DMG_F=DMG_F AND&h10OR BIT4_table[DMG_A]Goto@De
:END


:DEF __BIT_5
@BIT_5_B:DMG_F=DMG_F AND&h10OR BIT5_table[DMG_B]Goto@De
@BIT_5_C:DMG_F=DMG_F AND&h10OR BIT5_table[DMG_C]Goto@De
@BIT_5_D:DMG_F=DMG_F AND&h10OR BIT5_table[DMG_D]Goto@De
@BIT_5_E:DMG_F=DMG_F AND&h10OR BIT5_table[DMG_E]Goto@De
@BIT_5_H:DMG_F=DMG_F AND&h10OR BIT5_table[DMG_H]Goto@De
@BIT_5_L:DMG_F=DMG_F AND&h10OR BIT5_table[DMG_L]Goto@De
@BIT_5_xHL:DMG_F=DMG_F AND&h10OR BIT5_table[Mem[{HL()}]]Goto@De
@BIT_5_A:DMG_F=DMG_F AND&h10OR BIT5_table[DMG_A]Goto@De
:END


:DEF __BIT_6
@BIT_6_B:DMG_F=DMG_F AND&h10OR BIT6_table[DMG_B]Goto@De
@BIT_6_C:DMG_F=DMG_F AND&h10OR BIT6_table[DMG_C]Goto@De
@BIT_6_D:DMG_F=DMG_F AND&h10OR BIT6_table[DMG_D]Goto@De
@BIT_6_E:DMG_F=DMG_F AND&h10OR BIT6_table[DMG_E]Goto@De
@BIT_6_H:DMG_F=DMG_F AND&h10OR BIT6_table[DMG_H]Goto@De
@BIT_6_L:DMG_F=DMG_F AND&h10OR BIT6_table[DMG_L]Goto@De
@BIT_6_xHL:DMG_F=DMG_F AND&h10OR BIT6_table[Mem[{HL()}]]Goto@De
@BIT_6_A:DMG_F=DMG_F AND&h10OR BIT6_table[DMG_A]Goto@De
:END


:DEF __BIT_7
@BIT_7_B:DMG_F=DMG_F AND&h10OR BIT7_table[DMG_B]Goto@De
@BIT_7_C:DMG_F=DMG_F AND&h10OR BIT7_table[DMG_C]Goto@De
@BIT_7_D:DMG_F=DMG_F AND&h10OR BIT7_table[DMG_D]Goto@De
@BIT_7_E:DMG_F=DMG_F AND&h10OR BIT7_table[DMG_E]Goto@De
@BIT_7_H:DMG_F=DMG_F AND&h10OR BIT7_table[DMG_H]Goto@De
@BIT_7_L:DMG_F=DMG_F AND&h10OR BIT7_table[DMG_L]Goto@De
@BIT_7_xHL:DMG_F=DMG_F AND&h10OR BIT7_table[Mem[{HL()}]]Goto@De
@BIT_7_A:DMG_F=DMG_F AND&h10OR BIT7_table[DMG_A]Goto@De
:END



:DEF __RES_0
@RES_0_B:DMG_B=DMG_B AND&b11111110Goto@De
@RES_0_C:DMG_C=DMG_C AND&b11111110Goto@De
@RES_0_D:DMG_D=DMG_D AND&b11111110Goto@De
@RES_0_E:DMG_E=DMG_E AND&b11111110Goto@De
@RES_0_H:DMG_H=DMG_H AND&b11111110Goto@De
@RES_0_L:DMG_L=DMG_L AND&b11111110Goto@De
@RES_0_xHL:I={HL()}:J=Mem[I]AND&b11111110Goto@PokeIJ_De
@RES_0_A:DMG_A=DMG_A AND&b11111110Goto@De
:END


:DEF __RES_1
@RES_1_B:DMG_B=DMG_B AND&b11111101Goto@De
@RES_1_C:DMG_C=DMG_C AND&b11111101Goto@De
@RES_1_D:DMG_D=DMG_D AND&b11111101Goto@De
@RES_1_E:DMG_E=DMG_E AND&b11111101Goto@De
@RES_1_H:DMG_H=DMG_H AND&b11111101Goto@De
@RES_1_L:DMG_L=DMG_L AND&b11111101Goto@De
@RES_1_xHL:I={HL()}:J=Mem[I]AND&b11111101Goto@PokeIJ_De
@RES_1_A:DMG_A=DMG_A AND&b11111101Goto@De
:END


:DEF __RES_2
@RES_2_B:DMG_B=DMG_B AND&b11111011Goto@De
@RES_2_C:DMG_C=DMG_C AND&b11111011Goto@De
@RES_2_D:DMG_D=DMG_D AND&b11111011Goto@De
@RES_2_E:DMG_E=DMG_E AND&b11111011Goto@De
@RES_2_H:DMG_H=DMG_H AND&b11111011Goto@De
@RES_2_L:DMG_L=DMG_L AND&b11111011Goto@De
@RES_2_xHL:I={HL()}:J=Mem[I]AND&b11111011Goto@PokeIJ_De
@RES_2_A:DMG_A=DMG_A AND&b11111011Goto@De
:END


:DEF __RES_3
@RES_3_B:DMG_B=DMG_B AND&b11110111Goto@De
@RES_3_C:DMG_C=DMG_C AND&b11110111Goto@De
@RES_3_D:DMG_D=DMG_D AND&b11110111Goto@De
@RES_3_E:DMG_E=DMG_E AND&b11110111Goto@De
@RES_3_H:DMG_H=DMG_H AND&b11110111Goto@De
@RES_3_L:DMG_L=DMG_L AND&b11110111Goto@De
@RES_3_xHL:I={HL()}:J=Mem[I]AND&b11110111Goto@PokeIJ_De
@RES_3_A:DMG_A=DMG_A AND&b11110111Goto@De
:END


:DEF __RES_4
@RES_4_B:DMG_B=DMG_B AND&b11101111Goto@De
@RES_4_C:DMG_C=DMG_C AND&b11101111Goto@De
@RES_4_D:DMG_D=DMG_D AND&b11101111Goto@De
@RES_4_E:DMG_E=DMG_E AND&b11101111Goto@De
@RES_4_H:DMG_H=DMG_H AND&b11101111Goto@De
@RES_4_L:DMG_L=DMG_L AND&b11101111Goto@De
@RES_4_xHL:I={HL()}:J=Mem[I]AND&b11101111Goto@PokeIJ_De
@RES_4_A:DMG_A=DMG_A AND&b11101111Goto@De
:END


:DEF __RES_5
@RES_5_B:DMG_B=DMG_B AND&b11011111Goto@De
@RES_5_C:DMG_C=DMG_C AND&b11011111Goto@De
@RES_5_D:DMG_D=DMG_D AND&b11011111Goto@De
@RES_5_E:DMG_E=DMG_E AND&b11011111Goto@De
@RES_5_H:DMG_H=DMG_H AND&b11011111Goto@De
@RES_5_L:DMG_L=DMG_L AND&b11011111Goto@De
@RES_5_xHL:I={HL()}:J=Mem[I]AND&b11011111Goto@PokeIJ_De
@RES_5_A:DMG_A=DMG_A AND&b11011111Goto@De
:END


:DEF __RES_6
@RES_6_B:DMG_B=DMG_B AND&b10111111Goto@De
@RES_6_C:DMG_C=DMG_C AND&b10111111Goto@De
@RES_6_D:DMG_D=DMG_D AND&b10111111Goto@De
@RES_6_E:DMG_E=DMG_E AND&b10111111Goto@De
@RES_6_H:DMG_H=DMG_H AND&b10111111Goto@De
@RES_6_L:DMG_L=DMG_L AND&b10111111Goto@De
@RES_6_xHL:I={HL()}:J=Mem[I]AND&b10111111Goto@PokeIJ_De
@RES_6_A:DMG_A=DMG_A AND&b10111111Goto@De
:END


:DEF __RES_7
@RES_7_B:DMG_B=DMG_B AND&b01111111Goto@De
@RES_7_C:DMG_C=DMG_C AND&b01111111Goto@De
@RES_7_D:DMG_D=DMG_D AND&b01111111Goto@De
@RES_7_E:DMG_E=DMG_E AND&b01111111Goto@De
@RES_7_H:DMG_H=DMG_H AND&b01111111Goto@De
@RES_7_L:DMG_L=DMG_L AND&b01111111Goto@De
@RES_7_xHL:I={HL()}:J=Mem[I]AND&b01111111Goto@PokeIJ_De
@RES_7_A:DMG_A=DMG_A AND&b01111111Goto@De
:END



:DEF __SET_0
@SET_0_B:DMG_B=DMG_B OR&b00000001Goto@De
@SET_0_C:DMG_C=DMG_C OR&b00000001Goto@De
@SET_0_D:DMG_D=DMG_D OR&b00000001Goto@De
@SET_0_E:DMG_E=DMG_E OR&b00000001Goto@De
@SET_0_H:DMG_H=DMG_H OR&b00000001Goto@De
@SET_0_L:DMG_L=DMG_L OR&b00000001Goto@De
@SET_0_xHL:I={HL()}:J=Mem[I]OR&b00000001Goto@PokeIJ_De
@SET_0_A:DMG_A=DMG_A OR&b00000001Goto@De
:END


:DEF __SET_1
@SET_1_B:DMG_B=DMG_B OR&b00000010Goto@De
@SET_1_C:DMG_C=DMG_C OR&b00000010Goto@De
@SET_1_D:DMG_D=DMG_D OR&b00000010Goto@De
@SET_1_E:DMG_E=DMG_E OR&b00000010Goto@De
@SET_1_H:DMG_H=DMG_H OR&b00000010Goto@De
@SET_1_L:DMG_L=DMG_L OR&b00000010Goto@De
@SET_1_xHL:I={HL()}:J=Mem[I]OR&b00000010Goto@PokeIJ_De
@SET_1_A:DMG_A=DMG_A OR&b00000010Goto@De
:END


:DEF __SET_2
@SET_2_B:DMG_B=DMG_B OR&b00000100Goto@De
@SET_2_C:DMG_C=DMG_C OR&b00000100Goto@De
@SET_2_D:DMG_D=DMG_D OR&b00000100Goto@De
@SET_2_E:DMG_E=DMG_E OR&b00000100Goto@De
@SET_2_H:DMG_H=DMG_H OR&b00000100Goto@De
@SET_2_L:DMG_L=DMG_L OR&b00000100Goto@De
@SET_2_xHL:I={HL()}:J=Mem[I]OR&b00000100Goto@PokeIJ_De
@SET_2_A:DMG_A=DMG_A OR&b00000100Goto@De
:END


:DEF __SET_3
@SET_3_B:DMG_B=DMG_B OR&b00001000Goto@De
@SET_3_C:DMG_C=DMG_C OR&b00001000Goto@De
@SET_3_D:DMG_D=DMG_D OR&b00001000Goto@De
@SET_3_E:DMG_E=DMG_E OR&b00001000Goto@De
@SET_3_H:DMG_H=DMG_H OR&b00001000Goto@De
@SET_3_L:DMG_L=DMG_L OR&b00001000Goto@De
@SET_3_xHL:I={HL()}:J=Mem[I]OR&b00001000Goto@PokeIJ_De
@SET_3_A:DMG_A=DMG_A OR&b00001000Goto@De
:END


:DEF __SET_4
@SET_4_B:DMG_B=DMG_B OR&b00010000Goto@De
@SET_4_C:DMG_C=DMG_C OR&b00010000Goto@De
@SET_4_D:DMG_D=DMG_D OR&b00010000Goto@De
@SET_4_E:DMG_E=DMG_E OR&b00010000Goto@De
@SET_4_H:DMG_H=DMG_H OR&b00010000Goto@De
@SET_4_L:DMG_L=DMG_L OR&b00010000Goto@De
@SET_4_xHL:I={HL()}:J=Mem[I]OR&b00010000Goto@PokeIJ_De
@SET_4_A:DMG_A=DMG_A OR&b00010000Goto@De
:END


:DEF __SET_5
@SET_5_B:DMG_B=DMG_B OR&b00100000Goto@De
@SET_5_C:DMG_C=DMG_C OR&b00100000Goto@De
@SET_5_D:DMG_D=DMG_D OR&b00100000Goto@De
@SET_5_E:DMG_E=DMG_E OR&b00100000Goto@De
@SET_5_H:DMG_H=DMG_H OR&b00100000Goto@De
@SET_5_L:DMG_L=DMG_L OR&b00100000Goto@De
@SET_5_xHL:I={HL()}:J=Mem[I]OR&b00100000Goto@PokeIJ_De
@SET_5_A:DMG_A=DMG_A OR&b00100000Goto@De
:END


:DEF __SET_6
@SET_6_B:DMG_B=DMG_B OR&b01000000Goto@De
@SET_6_C:DMG_C=DMG_C OR&b01000000Goto@De
@SET_6_D:DMG_D=DMG_D OR&b01000000Goto@De
@SET_6_E:DMG_E=DMG_E OR&b01000000Goto@De
@SET_6_H:DMG_H=DMG_H OR&b01000000Goto@De
@SET_6_L:DMG_L=DMG_L OR&b01000000Goto@De
@SET_6_xHL:I={HL()}:J=Mem[I]OR&b01000000Goto@PokeIJ_De
@SET_6_A:DMG_A=DMG_A OR&b01000000Goto@De
:END


:DEF __SET_7
@SET_7_B:DMG_B=DMG_B OR&b10000000Goto@De
@SET_7_C:DMG_C=DMG_C OR&b10000000Goto@De
@SET_7_D:DMG_D=DMG_D OR&b10000000Goto@De
@SET_7_E:DMG_E=DMG_E OR&b10000000Goto@De
@SET_7_H:DMG_H=DMG_H OR&b10000000Goto@De
@SET_7_L:DMG_L=DMG_L OR&b10000000Goto@De
@SET_7_xHL:I={HL()}:J=Mem[I]OR&b10000000Goto@PokeIJ_De
@SET_7_A:DMG_A=DMG_A OR&b10000000Goto@De
:END



'#######################################################


:DEF Instructions_CB
'' cpu0_cb.smby
@PFX_CB:
   opcode_CB={A8()}
   {ADD1PC()}
   DMG_State0=DMG_State0+StateTableCB[opcode_CB]

:  Decode_CB

:__RLC
:__RRC

:__RL
:__RR

:__SLA
:__SRA
:__SWAP
:__SRL

:__BIT_0
:__BIT_1
:__BIT_2
:__BIT_3
:__BIT_4
:__BIT_5
:__BIT_6
:__BIT_7

:__RES_0
:__RES_1
:__RES_2
:__RES_3
:__RES_4
:__RES_5
:__RES_6
:__RES_7

:__SET_0
:__SET_1
:__SET_2
:__SET_3
:__SET_4
:__SET_5
:__SET_6
:__SET_7

:END'Instructions_CB



'#######################################################


:DEF __IRQ
@DI:DMG_INTF=0Goto@De_SKIP_IRQ
@EI:DMG_INTF=1Goto@De_SKIP_IRQ
:END

'#######################################################

:DEF IRQ_Intr
'IF(Mem[&h45B9]==&h21)THEN Mem[&h45B9] = &hFA
  ON DMG_INTF GOTO@IRQ_END
'   DMG_HALT=0

    ON Mem[#IE]AND Mem[#IF]AND&b11111 GOTO\
'   PendingIRQ=Mem[#IE]AND Mem[#IF]AND&b11111
'   ON PendingIRQ GOTO\
    @I00000,@I00001,@I00010,@I00011,@I00100,@I00101,@I00110,@I00111,\
    @I01000,@I01001,@I01010,@I01011,@I01100,@I01101,@I01110,@I01111,\
    @I10000,@I10001,@I10010,@I10011,@I10100,@I10101,@I10110,@I10111,\
    @I11000,@I11001,@I11010,@I11011,@I11100,@I11101,@I11110,@I11111

      'V-blank
  @I00001 @I00011 @I00101 @I00111 @I01001 @I01011 @I01101 @I01111
  @I10001 @I10011 @I10101 @I10111 @I11001 @I11011 @I11101 @I11111
' @I00001
'     DMG_INTF=0:DMG_State0=DMG_State0+20'16
      DMG_HALT=0
      DMG_INTF=0:DMG_State0=DMG_State0+16
      Mem[#IF]=Mem[#IF]AND&b11111110
  @IRQ40_VBLANK:
      RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]
      DMG_PC=&h40
      DMG_SP=DMG_SP-2
      Goto@IRQ_END

      'STAT
  @I00010 @I00110 @I01010 @I01110
  @I10010 @I10110 @I11010 @I11110
' @I00010
' @I00011
'     DMG_INTF=0:DMG_State0=DMG_State0+20'16
      DMG_HALT=0
      DMG_INTF=0:DMG_State0=DMG_State0+16
      Mem[#IF]=Mem[#IF]AND&b11111101
  @IRQ48___STAT:
      RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]
      DMG_PC=&h48
      DMG_SP=DMG_SP-2
      Goto@IRQ_END

      'Timer
  @I00100 @I01100
  @I10100 @I11100
' @I00100 @I00101
' @I00110 @I00111
'     DMG_INTF=0:DMG_State0=DMG_State0+20'16
      DMG_HALT=0
      DMG_INTF=0:DMG_State0=DMG_State0+16
      Mem[#IF]=Mem[#IF]AND&b11111011
  @IRQ50__TIMER:
      RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]
      DMG_PC=&h50
      DMG_SP=DMG_SP-2
      Goto@IRQ_END

      'Serial I/O
  @I01000
  @I11000
' @I01000 @I01001 @I01010 @I01011
' @I01100 @I01101 @I01110 @I01111
'     DMG_INTF=0:DMG_State0=DMG_State0+20'16
      DMG_HALT=0
      DMG_INTF=0:DMG_State0=DMG_State0+16
      Mem[#IF]=Mem[#IF]AND&b11110111
  @IRQ58_SERIAL:
      RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]
      DMG_PC=&h58
      DMG_SP=DMG_SP-2
      Goto@IRQ_END

      'Joypad
  @I10000
' @I10000 @I10001 @I10010 @I10011 @I10100 @I10101 @I10110 @I10111
' @I11000 @I11001 @I11010 @I11011 @I11100 @I11101 @I11110 @I11111
'     DMG_INTF=0:DMG_State0=DMG_State0+20'16
      DMG_HALT=0
      DMG_INTF=0:DMG_State0=DMG_State0+16
      Mem[#IF]=Mem[#IF]AND&b11101111
  @IRQ60_JOYPAD:
      RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]
      DMG_PC=&h60
      DMG_SP=DMG_SP-2
      Goto@IRQ_END

  @I00000
:END



'#######################################################


:DEF Timer
'::::::::::::::::::::::::::::::::::::::::::
: IF DisableTimer%THEN RETURN
'::::::::::::::::::::::::::::::::::::::::::
: IF ExperimentalRealTimeEmuPacing%==0THEN
:   IF ExperimentalRealTimeTimer%==0THEN
'::::::::::::::::::::::::::::::::::::::::::

  ClockMain = ClockMain + 1
  ClockDiv  = ClockDiv  + 1

  ON ClockDiv>15 GOTO@ClockDiv_GT_15
    ClockDiv = 0

    Mem[#DIV] = Mem[#DIV] + 1
    ON Mem[#DIV]<256 Goto@APU_Tick

  @ClockDiv_GT_15
'::::::::::::::::::::::::::::::::::::::::::
:   ELSE 'ExperimentalRealTimeTimer%
'::::::::::::::::::::::::::::::::::::::::::

  TMP%=MilliSec()
  ClockMain = TMP%-Latch0
  ClockDiv  = TMP%-Latch1

  ON ClockDiv>0 GOTO@ClockDiv_GT_0
    Latch1=TMP%

    Mem[#DIV] = Mem[#DIV] + 1
    ON Mem[#DIV]<256 Goto@APU_Tick

  @ClockDiv_GT_0


'::::::::::::::::::::::::::::::::::::::::::
:   ENDIF'ExperimentalRealTimeTimer%
: ELSE 'ExperimentalRealTimeEmuPacing%
'::::::::::::::::::::::::::::::::::::::::::


  TMP%=PERFEND(2)*2
  ClockMain = ClockMain + TMP%
  ClockDiv  = ClockDiv  + TMP%
  PERFBEGIN 2

  ON ClockDiv>15 GOTO@ClockDiv_GT_15
    ClockDiv = 0

    Mem[#DIV] = Mem[#DIV] + 1
    ON Mem[#DIV]<256 Goto@APU_Tick

  @ClockDiv_GT_15

'::::::::::::::::::::::::::::::::::::::::::
: ENDIF'ExperimentalRealTimeEmuPacing%
'::::::::::::::::::::::::::::::::::::::::::

: SIO_Tick
  @APU_END

'::::::::::::::::::::::::::::::::::::::::::
: IF TAC_TimerHack% == 0 THEN
'::::::::::::::::::::::::::::::::::::::::::
  ON Mem[#TAC]AND 4\
  GOTO@Mem_TAC_AND_4

    ON ClockMain>=POW4[Mem[#TAC]]\
    GOTO@ClockMain_LQ_POW4_Mem_TAC

      ClockMain = 0
      Mem[#TIMA] = Mem[#TIMA] + 1
      ON Mem[#TIMA]>255\
      GOTO@Mem_TIMA_GT_255

        Mem[#TIMA]=Mem[#TMA]
'       Mem[#IF]=Mem[#IF]OR(Mem[#IE]AND&b00100)
        Mem[#IF]=Mem[#IF]OR&b00100

  @Mem_TIMA_GT_255
  @ClockMain_LQ_POW4_Mem_TAC
  @Mem_TAC_AND_4

'::::::::::::::::::::::::::::::::::::::::::
: ENDIF'TAC_TimerHack%
'::::::::::::::::::::::::::::::::::::::::::
:END'Timer



'#######################################################


:DEF SIO_Defines
'::::::::::::::::::::::::::::::::::::::::::
:IF    Enbl_GB_Printer%    THEN
'::::::::::::::::::::::::::::::::::::::::::
    ENUM #SIO_Prntr_Mode_Idle        = &h00,\
         #SIO_Prntr_Mode_Ready2Print = &h08,\
         #SIO_Prntr_Mode_Printing    = &h06,\
         #SIO_Prntr_Mode_Done        = &h04

    'Serial I/O
    VAR SIO_OUT
    VAR SIO_OUT_CP
    VAR SIO_IN
    VAR SIO_IN_CP
    VAR SIO_Prntr_Stat    = #SIO_Prntr_Mode_Idle
    VAR SIO_Prntr_Stat_CP

    VAR SIO_TransferFlag
    VAR SIO_ShiftClock
    VAR SIO_Counter
    VAR SIO_PrntrActive
'::::::::::::::::::::::::::::::::::::::::::
:ENDIF'Enbl_GB_Printer%
'::::::::::::::::::::::::::::::::::::::::::
:END

'#######################################################

:DEF SIO_Tick
'::::::::::::::::::::::::::::::::::::::::::
:  IF  Enbl_GB_Printer%==0THEN RETURN
'::::::::::::::::::::::::::::::::::::::::::

    IF(SIO_PrntrActive==0)Goto@SkipGBPrntr
    IF SIO_TransferFlag THEN

      SIO_Counter=SIO_Counter+1

      IF(SIO_Counter AND  7)== 0THEN
        SIO_OUT_CP = SIO_OUT
      ENDIF

      RGB 2*Mem[#SB]+(SIO_IN AND 1) OUT,,Mem[#SB]
      SIO_IN=SIO_IN DIV 2

      IF(SIO_Counter AND 15)== 7THEN
        SIO_IN    = &h81
        SIO_IN_CP = SIO_IN

        Color 3,HSVF(1.0/255*SIO_IN,1.0,1.0)
        TPrint 3,format$("# %02x      # %02x     ",SIO_Counter, SIO_IN);

        SIO_TransferFlag = 0
        Mem[#IF]=Mem[#IF]OR&b1000
      ENDIF

      IF(SIO_Counter AND 15)==15THEN
        SIO_IN    = &h0f
        SIO_IN_CP = SIO_IN

        Color 3,HSVF(1.0/255*SIO_IN,1.0,1.0)
        TPrint 3,format$("# %02x      # %02x     ",SIO_Counter, SIO_IN);

        SIO_TransferFlag = 0
        Mem[#IF]=Mem[#IF]OR&b1000
      ENDIF

      IF(SIO_Counter>=&h70)THEN
        SIO_Counter=0
      ENDIF

      Goto@ENDOnSioCounter

'==============================================================
     @ENDOnSioCounter
'==============================================================
    ELSE
     SIO_Counter=0
      RGB 2*Mem[#SB] OUT,,Mem[#SB]
     SIO_IN=SIO_IN DIV 2
     SIO_Counter=SIO_Counter+1
    ENDIF

@SkipGBPrntr
:END

'#######################################################

:DEF SIO_Mem CallBack$
'::::::::::::::::::::::::::::::::::::::::::
:IF    Enbl_GB_Printer%    THEN
'::::::::::::::::::::::::::::::::::::::::::
@SB
    Mem[I]=J
    IF(SIO_TransferFlag==0)THEN
      SIO_OUT = J

      IF(SIO_OUT==&h88)THEN
        SIO_PrntrActive = 1
        SIO_Counter     = 0
        CLS 3\
      ENDIF

      IF(SIO_PrntrActive==0)THEN \
        {CallBack$}

      Color 3,HSVF(1.0/255*SIO_OUT,1.0,1.0)
      TPrint 3,format$("# %02x      # %02x     ",SIO_Counter, SIO_OUT);

      SIO_TransferFlag   = 1
    ENDIF
    {CallBack$}

@SC
    Mem[I]=J

    {CallBack$}

'::::::::::::::::::::::::::::::::::::::::::
:ELSE 'Enbl_GB_Printer%
'::::::::::::::::::::::::::::::::::::::::::

@SB
@SC
    Mem[I]=J
    {CallBack$}

'::::::::::::::::::::::::::::::::::::::::::
:ENDIF'Enbl_GB_Printer%
'::::::::::::::::::::::::::::::::::::::::::
:END



'#######################################################

:DEF PPU_Tick
'    ************************************************
'    * PPU_update
'    ************************************************

@PPU
'::::::::::::::::::::::::::::::::::::::::::
:IF ExperimentalRealTimeEmuPacing% THEN
'::::::::::::::::::::::::::::::::::::::::::
  DMG_state1=0
'::::::::::::::::::::::::::::::::::::::::::
:ELSE' ExperimentalRealTimeEmuPacing%
'::::::::::::::::::::::::::::::::::::::::::
  DMG_State0=0
'::::::::::::::::::::::::::::::::::::::::::
:ENDIF'ExperimentalRealTimeEmuPacing%
'::::::::::::::::::::::::::::::::::::::::::

' Mem[&HFF84]=&hC9  'Skip OAM delay

  LY%=MEM[#LY]

  IF PPU_On THEN\
  ON PPU_Mode Goto@PPUMode_HBlank,@PPUMode_VBlank,@PPUMode_OAM,@PPUMode_VRAM,@PPU_END

@PPU_END
  Mem[#STAT]=(Mem[#STAT]AND&hFC)+PPU_Mode

' Mem[&hCD38]=1     'PkMn RBGY W2W
' IF Button(0,#B_L2)THEN Mem[&hCD38]=1
' Mem[&HFF84]=&hC9  'Skip OAM delay
                    'PkMn GSC W2W
' IF Button(0,#B_L2)THEN RGB &h01010101OUT Mem[&hCEA3],Mem[&hCEA4],Mem[&hCEA5],Mem[&hCEA6]\
'                        RGB &h0___0100OUT,Mem[&hD20B],Mem[&hD20C]
'\'Mem[&hD20B]=&h01  'PkMn GSC NoWild
'  Mem[&hD20B]=&HFF  'PkMn GSC NoWild

  ENDLOOP

  RETURN



@PPUMode_OAM
: ON #Scale Goto@OScale0,@OScale1,@OScale2,@OScale3,@OScale4,@OScale5
: @OScale0
: GOTO@OScaleEND
: @OScale1
: GOTO@OScaleEND
: @OScale2
: GOTO@OScaleEND
: @OScale3
: GOTO@OScaleEND
: @OScale4
' LineOfs_BG#[Mem[#LY]+21,0]=LineOfs_X_Table#[Mem[#SCX]]
' LineOfs_BG#[Mem[#LY]+21,2]=LineOfs_Y_Table#[Mem[#SCY]]
  LineOfs_BG#[LY%+21,0]=LineOfs_X_Table#[Mem[#SCX]]
  LineOfs_BG#[LY%+21,2]=LineOfs_Y_Table#[Mem[#SCY]]
: GOTO@OScaleEND
: @OScale5
' LineOfs_BG#[Mem[#LY],0] = LineOfs_X_Table#[Mem[#SCX]]
' LineOfs_BG#[Mem[#LY],2] = LineOfs_Y_Table#[Mem[#SCY]]
' LineOfsWin#[Mem[#LY]+18,0] = LineOfs_X_Table#[Mem[#WX]]
' LineOfsWin#[Mem[#LY]+18,2] = LineOfs_Y_Table#[Mem[#WY]]
  IF(CommonTileData)THEN
  LineOfs_BG#[LY%,0]=LineOfs_X_Table#[Mem[#SCX]]
' ELSEIF(BG_TileMap)THEN
' LineOfs_BG#[LY%,0]=LineOfs_X_Table#[Mem[#SCX]] + 512/1280
  ELSE
  LineOfs_BG#[LY%,0]=LineOfs_X_Table#[Mem[#SCX]] + 512/1280
  ENDIF
  LineOfs_BG#[LY%,2]=LineOfs_Y_Table#[Mem[#SCY]]
: @OScaleEND
' PPU_Mode=#PPUMode_VRAM
  PPU_Mode=3
  Goto@PPU_END



@PPUMode_VRAM
' PPU_Mode=#PPUMode_HBlank
  PPU_Mode=0

' IF Mem[#STAT]AND 8THEN \
  ON Mem[#STAT]AND 8GOTO@Mem_STAT_AND_8
    Mem[#IF]=Mem[#IF]OR&b00010
  @Mem_STAT_AND_8

  Goto@PPU_END



@PPUMode_HBlank
  ' Go to Next line
  ON LY% >= 143 GOTO@Mem_LY_GQ_143


' PPU_Mode=#PPUMode_VBlank
  PPU_Mode=1

  Mem[#IF]=Mem[#IF]OR&b00001

  IF Mem[#STAT]AND 16THEN \
    Mem[#IF]=Mem[#IF]OR&b00010

' Mem[#LY]=Mem[#LY]+1 'inc lineNo
  Mem[#LY]=LY%+1 'inc lineNo

  ON(Mem[#STAT]AND 64)\
  &&(LY%==Mem[#LYC])GOTO@Mem_STAT_AND_64_NN_Mem_LY_EQ_Mem_LYC_02
    Mem[#IF]=Mem[#IF]OR&b00010
    Mem[#STAT]=Mem[#STAT]OR&b100
  @Mem_STAT_AND_64_NN_Mem_LY_EQ_Mem_LYC_02

''ON(LY%==Mem[#LYC])GOTO@Mem_LY_EQ_Mem_LYC_02
''  Mem[#STAT]=Mem[#STAT]OR&b100
''  ON(Mem[#STAT]AND 64)GOTO@Mem_STAT_AND_64_02
''    Mem[#IF]=Mem[#IF]OR&b00010
''@Mem_STAT_AND_64_02
''@Mem_LY_EQ_Mem_LYC_02

  Goto @PPU_END


  ' Entering VBlank
  @Mem_LY_GQ_143

' PPU_Mode=#PPUMode_OAM
  PPU_Mode=2
  IF Mem[#STAT]AND 32THEN \
    Mem[#IF]=Mem[#IF]OR&b00010

' Mem[#LY]=Mem[#LY]+1 'inc lineNo
  Mem[#LY]=LY%+1 'inc lineNo

  ON(Mem[#STAT]AND 64)\
  &&(LY%==Mem[#LYC])GOTO@Mem_STAT_AND_64_NN_Mem_LY_EQ_Mem_LYC_01
    Mem[#IF]=Mem[#IF]OR&b00010
    Mem[#STAT]=Mem[#STAT]OR&b100
  @Mem_STAT_AND_64_NN_Mem_LY_EQ_Mem_LYC_01

''ON(LY%==Mem[#LYC])GOTO@Mem_LY_EQ_Mem_LYC_01
''  Mem[#STAT]=Mem[#STAT]OR&b100
''  ON(Mem[#STAT]AND 64)GOTO@Mem_STAT_AND_64_01
''    Mem[#IF]=Mem[#IF]OR&b00010
''@Mem_STAT_AND_64_01
''@Mem_LY_EQ_Mem_LYC_01

  Goto @PPU_END



@PPUMode_VBlank
  ON LY% >= 153 GOTO@Mem_LY_GQ_153

' PPU_Mode=#PPUMode_OAM
  PPU_Mode=2

  ON VRAM_DoUpdateBitmap GOTO@VRAM_DoUpdateBitmap
  GLOAD 1024,   0, 512,  48,VRAM_Bitmap, BGP,0
  GLOAD 1024,  48, 512,  48,VRAM_Bitmap,OBP0,0
  GLOAD 1024,  96, 512,  48,VRAM_Bitmap,OBP1,0
  ''    FOR TMP%=1024 TO 1535 STEP 8
  '     FOR TMP%=1031 TO 1542 STEP 8
  '       GLINE TMP%,   0,TMP%, 143,RGB( 63,255,  0,255),#G_ALPHA
  '     NEXT
  ''    FOR TMP%=   0 TO  143 STEP 8
  '     FOR TMP%=   7 TO  150 STEP 8
  '       GLINE 1024,TMP%,1535,TMP%,RGB( 63,255,  0,255),#G_ALPHA
  '     NEXT
  '     GUPDATE 4

  VRAM_DoUpdateBitmap=0
  @VRAM_DoUpdateBitmap


  ON VRAM_DoUpdate_BG GOTO@VRAM_DoUpdate_BG
' TUPDATE #BGScreen}
:IF(ENVTYPE()!=2)THEN
  TUPDATE #BGScreen
:ENDIF
' TLOAD #BGScreen,    0,  0, 64, 64,VRAM_BG_Map
' TLOAD #BGScreen,  128,  0, 64, 64,VRAM_WinMap

  VRAM_DoUpdate_BG=0
  @VRAM_DoUpdate_BG


  ON VRAM_DoUpdateWin GOTO@VRAM_DoUpdateWin

' TUPDATE #WinScreen}
:IF(ENVTYPE()!=2)THEN
  TUPDATE #WinScreen
:ENDIF
' TLOAD #WinScreen,    0,  0, 64, 64,VRAM_BG_Map
' TLOAD #WinScreen, 128,  0, 64, 64,VRAM_WinMap

  VRAM_DoUpdateWin=0
  @VRAM_DoUpdateWin


' LFilter #BGLayer},3,LineOfs_BG#,1
''LFilter #WinLayer},3,LineOfsWin#,1
:IF(BG_ProcScanLines%)THEN
:IF(ENVTYPE()!=2)THEN
  LFilter #BGLayer,3,LineOfs_BG#,1
:ENDIF
:ENDIF'(BG_ProcScanLines%)
' LFilter #WinLayer,3,LineOfsWin#,1

:IF RecordAPUWrites% THEN
  PRGINS "VSync"
:ENDIF

: FPS_PerfEmuMenu

' ENDIF

' IF Mem[#STAT]AND 64THEN
'   IF Mem[#LY]==Mem[#LYC]THEN
'     Mem[#IF]=Mem[#IF]OR&b00010
'     Mem[#STAT]=Mem[#STAT]OR&b100
'   ENDIF
' ENDIF

  ON(Mem[#STAT]AND 64)\
  &&(LY%==Mem[#LYC])GOTO@Mem_STAT_AND_64_NN_Mem_LY_EQ_Mem_LYC_03
    Mem[#IF]=Mem[#IF]OR&b00010
    Mem[#STAT]=Mem[#STAT]OR&b100
  @Mem_STAT_AND_64_NN_Mem_LY_EQ_Mem_LYC_03

''ON(LY%==Mem[#LYC])GOTO@Mem_LY_EQ_Mem_LYC_03
''  Mem[#STAT]=Mem[#STAT]OR&b100
''  ON(Mem[#STAT]AND 64)GOTO@Mem_STAT_AND_64_03
''    Mem[#IF]=Mem[#IF]OR&b00010
''@Mem_STAT_AND_64_03
''@Mem_LY_EQ_Mem_LYC_03

  Goto@PPU_END


  @Mem_LY_GQ_153
' ELSE
''''  '4x
''''    LineOfs_BG#[Mem[#LY]+21,0]=LineOfs_X_Table#[Mem[#SCX]]
''''    LineOfs_BG#[Mem[#LY]+21,2]=LineOfs_Y_Table#[Mem[#SCY]]
''''  '5x
''''  ' LineOfs_BG#[Mem[#LY],0] = LineOfs_X_Table#[Mem[#SCX]]
''''  ' LineOfs_BG#[Mem[#LY],2] = LineOfs_Y_Table#[Mem[#SCY]]
''''
''''  ' LineOfsWin#[Mem[#LY]+18,0] = LineOfs_X_Table#[Mem[#WX]]
''''  ' LineOfsWin#[Mem[#LY]+18,2] = LineOfs_Y_Table#[Mem[#WY]]
''''
' Mem[#LY]=Mem[#LY]+1 'inc lineNo
  Mem[#LY]=LY%+1 'inc lineNo

  ON(Mem[#STAT]AND 64)\
  &&(LY%==Mem[#LYC])GOTO@Mem_STAT_AND_64_NN_Mem_LY_EQ_Mem_LYC_04
    Mem[#IF]=Mem[#IF]OR&b00010
    Mem[#STAT]=Mem[#STAT]OR&b100
  @Mem_STAT_AND_64_NN_Mem_LY_EQ_Mem_LYC_04

''ON(LY%==Mem[#LYC])GOTO@Mem_LY_EQ_Mem_LYC_04
''  Mem[#STAT]=Mem[#STAT]OR&b100
''  ON(Mem[#STAT]AND 64)GOTO@Mem_STAT_AND_64_04
''    Mem[#IF]=Mem[#IF]OR&b00010
''@Mem_STAT_AND_64_04
''@Mem_LY_EQ_Mem_LYC_04

  Goto@PPU_END

:END



'#######################################################


:DEF Ch1_Trigger
    'To prevent popping artifacts:
'   BGMPause 1
'   BGMPause 5

    'Trigger note playback:
    BGMPlay  1, 128, 4'*APU_Pwr
    BGMPlay  5, 138, 4'*APU_Pwr

'   BGMPause 1, TMP%
'   BGMPause 5, TMP%

    Ch1_Trg = 0
    Ch1_Pos = 0
    Ch1_Len#= Ch1_LenP#

: IF VibrateCh1% THEN
    Vibrate  1,0,PitchLo#[Ch1_Frq], Ch1_PanL*APU_VolLft#*31, \
                 PitchHi#[Ch1_Frq], Ch1_PanL*APU_VolLft#*16
    Vibrate  1,1,PitchLo#[Ch1_Frq], Ch1_PanR*APU_VolRgt#*31, \
                 PitchHi#[Ch1_Frq], Ch1_PanR*APU_VolRgt#*16
: ENDIF

:END'Ch1_Trigger


:DEF Ch2_Trigger
    'To prevent popping artifacts:
'   BGMPause 2
'   BGMPause 6

    'Trigger note playback:
    BGMPlay  2, 129, 4'*APU_Pwr
    BGMPlay  6, 139, 4'*APU_Pwr

'   BGMPause 2, TMP%
'   BGMPause 6, TMP%

    Ch2_Trg = 0
    Ch2_Pos = 0
    Ch2_Len#= Ch2_LenP#

: IF VibrateCh2% THEN
    Vibrate  1,0,PitchLo#[Ch2_Frq], Ch2_PanL*APU_VolLft#*31, \
                 PitchHi#[Ch2_Frq], Ch2_PanL*APU_VolLft#*16
    Vibrate  1,1,PitchLo#[Ch2_Frq], Ch2_PanR*APU_VolRgt#*31, \
                 PitchHi#[Ch2_Frq], Ch2_PanR*APU_VolRgt#*16
: ENDIF

:END'Ch2_Trigger


:DEF Ch3_Trigger
      'Set PCM
      WAVSet 226,127,127,127,127,PCMSample$*8,81
  '   WAVSet 226,127,127,  0,127,PCMSample$*8,81

      'To prevent popping artifacts:
'     BGMPause 3

      'Trigger note playback:
'     BGMPlay  3, 130, 2*APU_Pwr*Ch3_Vol
      BGMPlay  3, 130, 2*Ch3_Vol

      Ch3_Trg = 0
      Ch3_Pos = 0
      Ch3_Len#= Ch3_LenP#

: IF VibrateCh3% THEN
'   Vibrate  1,  PitchLo#[Ch3_Frq], Ch3_Pwr*Ch3_Vol*APU_Pwr*31, \
'                PitchHi#[Ch3_Frq], Ch3_Pwr*Ch3_Vol*APU_Pwr*16
    Vibrate  1,  PitchLo#[Ch3_Frq], Ch3_Pwr*Ch3_Vol*31, \
                 PitchHi#[Ch3_Frq], Ch3_Pwr*Ch3_Vol*16
: ENDIF

:END'Ch3_Trigger


:DEF Ch4_Trigger

'BEEP 24 'Low Tom
'BEEP 31 'DancedrumKit Kick
'BEEP 56 'Timbals
'BEEP 60 'Bell tree
'BEEP 61 'Wadaiko

'   BEEP 24,\
'   \    BEEP 150,\
'   BGMPitch#[Ch4_SCF*8+Ch4_DivRate], 31*(Ch4_PanL*APU_VolLft#)/140,  0
'   BEEP 24,\
'   \    BEEP 150,\
'   BGMPitch#[Ch4_SCF*8+Ch4_DivRate], 31*(Ch4_PanR*APU_VolRgt#)/140,127

'   BGMPLAY 4,131,31*(Ch4_PanL*APU_VolLft#)/140
'   BGMPLAY 8,141,31*(Ch4_PanR*APU_VolRgt#)/140

    BGMPLAY 4,131,15*(Ch4_PanL*APU_VolLft#)/140
    BGMPLAY 8,141,15*(Ch4_PanR*APU_VolRgt#)/140

'   BGMPitch 4,NoisePitch#[Ch4_SCF*8+Ch4_DivRate]
'   BGMPitch 8,NoisePitch#[Ch4_SCF*8+Ch4_DivRate]

    Ch4_Trg = 0
    Ch4_Pos = 0
    Ch4_Len#= Ch4_LenP#

: IF VibrateCh4% THEN
'   Vibrate  1,0,PitchLo#[Ch4_SCF*8+Ch4_DivRate], Ch4_PanL*APU_VolLft#*31, \
'                PitchHi#[Ch4_SCF*8+Ch4_DivRate], Ch4_PanL*APU_VolLft#*16
'   Vibrate  1,1,PitchLo#[Ch4_SCF*8+Ch4_DivRate], Ch4_PanR*APU_VolRgt#*31, \
'                PitchHi#[Ch4_SCF*8+Ch4_DivRate], Ch4_PanR*APU_VolRgt#*16
    Vibrate  1,50
: ENDIF

:END'Ch4_Trigger



:DEF APU_Tick
  @APU_Tick
  Mem[#DIV]=0

: IF RecordAPUWrites% THEN
  PRGINS "APU_Tick"
: ENDIF

' IF(APU_Pwr==0)THEN
' ON(APU_Pwr==0)GOTO@APU_Pwr_EQ_0
'   BGMPause
'   Vibrate
'   Goto@APU_END
' @APU_Pwr_EQ_0
' ENDIF

  SNDMVOL 127*APU_Pwr


''======================
'' CH #1 (PULSE+SWEEP)
''======================
' BGMVol 1,4'*APU_Pwr
' BGMVol 5,4'*APU_Pwr

  'Set duty
  WAVSet 224,127,127,127,127,Ch1_Duty$*8,69
' WAVSet 224,127,127,  0,127,Ch1_Duty$*8,69

  'Length
' BGMVar 1,2,(Ch1_LEnbl!=0)*Ch1_Len#
' BGMVar 5,2,(Ch1_LEnbl!=0)*Ch1_Len#

  'Envelope
  BGMVar 1,3,Ch1_Attk#
  BGMVar 5,3,Ch1_Attk#

  'Initial vol L|R
  BGMVar 5,0,Ch1_PanL*APU_VolLft#*Ch1_InitV#
  BGMVar 5,1,Ch1_PanR*APU_VolRgt#*Ch1_InitV#

  'Final vol L|R
  BGMVar 1,0,Ch1_PanL*APU_VolLft#*Ch1_EnvDir#
  BGMVar 1,1,Ch1_PanR*APU_VolRgt#*Ch1_EnvDir#

  '
  BGMVar 1,4,Ch1_PitchMod
  BGMVar 5,4,Ch1_PitchMod

  'If trigger bit is set...
' IF Ch1_Trg THEN
  ON Ch1_Trg GOTO@Ch1_Trg
:   Ch1_Trigger
  @Ch1_Trg
' ENDIF

  Ch1_Pos = Ch1_Pos+1

' IF(Ch1_LEnbl)&&(64*Ch1_Len#<Ch1_Pos)THEN
  ON(Ch1_LEnbl)&&(64*Ch1_Len#<Ch1_Pos)GOTO@Ch1_LEnbl_NN_64_T_Ch1_Len_LT_Ch1_Pos
    Ch1_Pos = 0
    BGMPause 1,Ch1_Len#*2
    BGMPause 5,Ch1_Len#*2
  @Ch1_LEnbl_NN_64_T_Ch1_Len_LT_Ch1_Pos
' ENDIF

  'Set frequency
  BGMPitch 1,BGMPitch#[Ch1_Frq]
  BGMPitch 5,BGMPitch#[Ch1_Frq]


''======================
'' CH #2 (PULSE)
''======================
' BGMVol 2,4'*APU_Pwr
' BGMVol 6,4'*APU_Pwr

  'Set duty
  WAVSet 225,127,127,127,127,Ch2_Duty$*8,69
' WAVSet 225,127,127,  0,127,Ch2_Duty$*8,69

  'Length
' BGMVar 2,2,(Ch2_LEnbl!=0)*Ch2_Len#
' BGMVar 6,2,(Ch2_LEnbl!=0)*Ch2_Len#

  'Envelope
  BGMVar 2,3,Ch2_Attk#
  BGMVar 6,3,Ch2_Attk#

  'Initial vol L|R
  BGMVar 6,0,Ch2_PanL*APU_VolLft#*Ch2_InitV#
  BGMVar 6,1,Ch2_PanR*APU_VolRgt#*Ch2_InitV#

  'Final vol L|R
  BGMVar 2,0,Ch2_PanL*APU_VolLft#*Ch2_EnvDir#
  BGMVar 2,1,Ch2_PanR*APU_VolRgt#*Ch2_EnvDir#

  'If trigger bit is set...
' IF Ch2_Trg THEN
  ON Ch2_Trg GOTO@Ch2_Trg
:   Ch2_Trigger
  @Ch2_Trg
' ENDIF

  Ch2_Pos = Ch2_Pos+1

' IF(Ch2_LEnbl)&&(64*Ch2_Len#<Ch2_Pos)THEN
  ON(Ch2_LEnbl)&&(64*Ch2_Len#<Ch2_Pos)GOTO@Ch2_LEnbl_NN_64_T_Ch2_Len_LT_Ch2_Pos
    Ch2_Pos = 0
    BGMPause 2,Ch2_Len#*2
    BGMPause 6,Ch2_Len#*2
  @Ch2_LEnbl_NN_64_T_Ch2_Len_LT_Ch2_Pos
' ENDIF

  'Set frequency
  BGMPitch 2,BGMPitch#[Ch2_Frq]
  BGMPitch 6,BGMPitch#[Ch2_Frq]


''======================
'' CH #3 (PCM)
''======================
' IF Ch3_Pwr THEN
  ON Ch3_Pwr GOTO@Ch3_Pwr
'   BGMVol 3,2*APU_Pwr*Ch3_Vol
    BGMVol 3,3*Ch3_Vol

    'Vol L|R
    BGMVar 3,0,Ch3_PanL*APU_VolLft#
    BGMVar 3,1,Ch3_PanR*APU_VolRgt#

'   BGMCont 3

    'If trigger bit is set...
'   IF Ch3_Trg THEN
    ON Ch3_Trg GOTO@Ch3_Trg
:     Ch3_Trigger
    @Ch3_Trg
'   ENDIF

    Ch3_Pos = Ch3_Pos+1

'   IF(Ch3_LEnbl)&&(256*Ch3_Len#<Ch3_Pos)THEN
    ON(Ch3_LEnbl)&&(256*Ch3_Len#<Ch3_Pos)GOTO@Ch3_LEnbl_NN_256_T_Ch3_Len_LT_Ch3_Pos
      Ch3_Pos = 0
      BGMPause 3,Ch3_Len#*2
    @Ch3_LEnbl_NN_256_T_Ch3_Len_LT_Ch3_Pos
'   ENDIF

  'Set frequency
  BGMPitch 3,BGMPitch#[Ch3_Frq]

  GOTO@Ch3_Pwr_

  @Ch3_Pwr
' ELSE
    BGMPause 3
: IF VibrateCh3% THEN
    Vibrate
: ENDIF
  @Ch3_Pwr_
' ENDIF

''======================
'' CH #4 (NOISE)
''======================
'IF Ch4_Trg THEN
'BGMPause 4
'BGMPlay 4,131,8*APU_Pwr
'Ch4_Trg=0
'Ch4_Pos=0
'ENDIF
: IF EnblNoiseChnl% THEN

  'Set PCM
' RANDOMIZE 7,7
: Noise$="HEX$(RGB(RND(256),RND(256),RND(256),RND(256)),8)"
  WAVSet 227,127,0,0,127,{(Noise$+"+")*63+Noise$},57

  'Envelope
  BGMVar 4,3,Ch4_Attk#
  BGMVar 8,3,Ch4_Attk#

  'Initial vol L|R
  BGMVar 8,0,Ch4_PanL*APU_VolLft#*Ch4_InitV#
  BGMVar 8,1,Ch4_PanR*APU_VolRgt#*Ch4_InitV#

  'Final vol L|R
  BGMVar 4,0,Ch4_PanL*APU_VolLft#*Ch4_EnvDir#
  BGMVar 4,1,Ch4_PanR*APU_VolRgt#*Ch4_EnvDir#

  'If trigger bit is set...
' IF Ch4_Trg THEN
  ON Ch4_Trg GOTO@Ch4_Trg
:   Ch4_Trigger
  @Ch4_Trg
' ENDIF

  Ch4_Pos = Ch4_Pos+1

' IF(Ch4_LEnbl)&&(64*Ch4_Len#<Ch4_Pos)THEN
  ON(Ch4_LEnbl)&&(64*Ch4_Len#<Ch4_Pos)GOTO@Ch4_LEnbl_NN_64_T_Ch4_Len_LT_Ch4_Pos
    Ch4_Pos = 0
    BGMPause 4,Ch4_Len#*2
    BGMPause 8,Ch4_Len#*2
  @Ch4_LEnbl_NN_64_T_Ch4_Len_LT_Ch4_Pos
' ENDIF

  'Set frequency
  BGMPitch 4,BGMPitch#[Ch4_SCF*8+Ch4_DivRate]
  BGMPitch 8,BGMPitch#[Ch4_SCF*8+Ch4_DivRate]

' BGMVol 4,16'*APU_Pwr
' BGMVol 8,16'*APU_Pwr

'' IF Ch4_CntSW THEN
'''  Ch4_Duty$=format$("%02X%02X%02X%02X%02X%02X%02X%02X",RND(128)*2,RND(128)*2,RND(128)*2,RND(128)*2,RND(128)*2,RND(128)*2,RND(128)*2,RND(128)*2)
''   Ch4_Duty$={("format$("+#DQ+"%02X"+#DQ+",RND(2)*255)")+("+format$("+#DQ+"%02X"+#DQ+",RND(2)*255)")*63}
''   WAVSet 227,127,127,127,127,Ch4_Duty$* 8,69
'' ELSE
'''  Ch4_Duty$=format$("%02X%02X%02X%02X%02X%02X%02X%02X",RND( 8)*32,RND( 8)*32,RND( 8)*32,RND( 8)*32,RND( 8)*32,RND( 8)*32,RND( 8)*32,RND( 8)*32)
''   Ch4_Duty$={("format$("+#DQ+"%02X"+#DQ+",RND(2)*255)")+("+format$("+#DQ+"%02X"+#DQ+",RND(2)*255)")*31}
''   WAVSet 227,127,127,127,127,Ch4_Duty$*16,69
'' ENDIF
'' WAVSet 227,127,127,127,127,Ch4_Duty$*8,69
'' WAVSet 227,127,127,127,127,Ch4_Duty$*64,69
'
'  'Length
'' BGMVar 4,2,60
'
'  'Envelope
'  BGMVar 4,3,Ch4_Attk#
'  BGMVar 8,3,Ch4_Attk#
'
'  'Initial vol L|R
'  BGMVar 8,0,Ch4_PanL*APU_VolLft#*Ch4_InitV#
'  BGMVar 8,1,Ch4_PanR*APU_VolRgt#*Ch4_InitV#
'
'  'Final vol L|R
'  BGMVar 4,0,Ch4_PanL*APU_VolLft#*Ch4_EnvDir#
'  BGMVar 4,1,Ch4_PanR*APU_VolRgt#*Ch4_EnvDir#
'
'  'If trigger bit is set...
'  IF Ch4_Trg THEN
'    'To prevent popping artifacts:
'    BGMPause 4
'    BGMPause 8
'
'    'Trigger note playback:
'    BGMPlay 4,131,16*APU_Pwr
'    BGMPlay 8,141,16*APU_Pwr
'    IF Ch4_LEnbl THEN
'      BGMPause 4,Ch4_Len#*2
'      BGMPause 8,Ch4_Len#*2
'    ENDIF
'
'    Ch4_Trg=0
'    Ch4_Len#=Ch4_LenP#
''   Ch4_Pos=0
'  ENDIF
'
'  'Set frequency
'  BGMPitch 4,NoisePitch#[Ch4_SCF*8+Ch4_DivRate]
'  BGMPitch 8,NoisePitch#[Ch4_SCF*8+Ch4_DivRate]
'' BGMPitch 4,BGMPitch#[Ch4_SCF*8+Ch4_DivRate]
'' BGMPitch 8,BGMPitch#[Ch4_SCF*8+Ch4_DivRate]

: ENDIF'EnblNoiseChnl%

  Goto@APU_END
:END

'#######################################################

:DEF UpdatePCM(I%,P%,CallBack$)
:  RETURN format$(    \
:    "Mem[%d]=J:WavRAM[%d]=WavMemory[J]"+          \
:    "PCMSample$=format$("+#DQ+                     \
:    "%%04X%%04X%%04X%%04X%%04X%%04X%%04X%%04X"+   \
:    "%%04X%%04X%%04X%%04X%%04X%%04X%%04X%%04X"+#DQ+\
:    ",WavRAM[0],WavRAM[1],WavRAM[2],WavRAM[3],"+  \
:    "WavRAM[4],WavRAM[5],WavRAM[6],WavRAM[7],"+   \
:    "WavRAM[8],WavRAM[9],WavRAM[10],WavRAM[11],"+ \
:    "WavRAM[12],WavRAM[13],WavRAM[14],"+          \
:    "WavRAM[15])%s", \
:  I%,P%,CallBack$)
:END

'#######################################################

:DEF ApuMem CallBack$
'*******
'* APU *
'*******

'''''''''''''''''''''''''''''''''''''''
' The APU emulation is glitchy and    '
' over all lacking at the moment...   '
' Don!'t expect all games to sound    '
' bearable. :>                        '
'                                     '
'''''''''''''''''''''''''''''''''''''''

@NR10
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("F0&H%02X",J)
: ENDIF
  Mem[I]=J
  Ch1_PitchMod = J DIV 2
  {CallBack$}

' -- Channel 1: Pulse (sweep) --
@NR11
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("F1&H%02X",J)
: ENDIF
  Mem[I]=J

  'Duty
  Ch1_Duty$=PulseDuty$[J DIV 64]

  'Length
: t1="(J AND 63)"
' Ch1_LenP#=(64-{t1})*(1/256)
  Ch1_LenP#=(64-{t1})/256

  {CallBack$}


@NR12
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("F2&H%02X",J)
: ENDIF
  Mem[I] = J

  'Initial vol
  Ch1_InitV# = VolInit#[J]

  'Direction
' IF J AND 8 THEN
  ON J AND 8 GOTO@J_AND_8a
    Ch1_EnvDir# = VolInit#[&HFF]
    Ch1_Attk#   = EnvDn#[J]
    {CallBack$}
  @J_AND_8a
' ELSE
    Ch1_EnvDir# = VolInit#[&h00]
    Ch1_Attk#   = EnvDn#[J]
    {CallBack$}
' ENDIF

  {CallBack$}


@NR13
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("F3&H%02X",J)
: ENDIF
  Mem[I]=J

  'Set frequency:
  Ch1_Frq=RGB(0,0,Mem[#NR14],J)

  {CallBack$}


@NR14
  TMP%=J AND&b111
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("F4&H%02X",J)
: ENDIF
  Mem[I]=TMP%

  'If trigger bit is set...
' IF J AND&h80THEN
' ON J AND&h80GOTO@J_AND_x80b
    Ch1_Trg = (J AND&h80)!=0

    'If consecutive bit is set...
    Ch1_LEnbl = (J AND&h40)!=0
':  Ch1_Trigger

  @J_AND_x80b
' ENDIF

  'Set frequency
  Ch1_Frq=RGB(0,0,TMP%,Mem[#NR13])

  {CallBack$}


' -- Channel 2: Pulse --
@NR21
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("P1&H%02X",J)
: ENDIF
  Mem[I]=J

  'Duty
  Ch2_Duty$=PulseDuty$[J DIV 64]

  'Length
: t1="(J AND 63)"
' Ch2_LenP#=(64-{t1})*(1/256)
  Ch2_LenP#=(64-{t1})/256

  {CallBack$}


@NR22
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("P2&H%02X",J)
: ENDIF
  Mem[I]=J

  'Initial vol
  Ch2_InitV#=VolInit#[J]

  'Direction
' IF J AND 8 THEN
  ON J AND 8 GOTO@J_AND_8c
    Ch2_EnvDir# = VolInit#[&HFF]
    Ch2_Attk# = EnvDn#[J]
    {CallBack$}
  @J_AND_8c
' ELSE
    Ch2_EnvDir# = VolInit#[&h00]
    Ch2_Attk# = EnvDn#[J]
    {CallBack$}
' ENDIF

  {CallBack$}


@NR23
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("P3&H%02X",J)
: ENDIF
  Mem[I]=J

  'Set frequency:
  Ch2_Frq=RGB(0,0,Mem[#NR24],J)

  {CallBack$}


@NR24
  TMP%=J AND&b111
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("P4&H%02X",J)
: ENDIF
  Mem[I]=TMP%

  'If trigger bit is set...
' IF J AND&h80THEN
' ON J AND&h80GOTO@J_AND_x80d
    Ch2_Trg = (J AND&h80)!=0

    'If consecutive bit is set...
    Ch2_LEnbl = (J AND&h40)!=0
':  Ch2_Trigger

  @J_AND_x80d
' ENDIF

  'Set frequency
  Ch2_Frq=RGB(0,0,TMP%,Mem[#NR23])

  {CallBack$}


' -- Channel 3: PCM --

@NR30
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("W0&H%02X",J)
: ENDIF
  Mem[I]=J

' IF J AND&h80 THEN
'  ON J AND&h80GOTO@J_AND_x80e
'    Ch3_Pwr=1
'    Ch3_Trg=1
'    {CallBack$}
'  @J_AND_x80e
'' ELSE
'    Ch3_Pwr=0
'   {CallBack$}
'' ENDIF

  Ch3_Pwr = (J AND&h80)!=0

  {CallBack$}


@NR31
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("W1&H%02X",J)
: ENDIF
  Mem[I]=J

  'Length
: t1="J"
' Ch3_LenP#=(256-{t1})*(1/256)
  Ch3_LenP#=(256-{t1})/256

  {CallBack$}


@NR32
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("W2&H%02X",J)
: ENDIF
  Mem[I]=J
''Ch3_Vol=WAV_Vol[(J DIV 32)AND 3]
  Ch3_Vol=WAV_Vol[J]
' BGMVol 3,2*Ch3_Vol
' PUSH PCMVOL$,FORMAT$("%X",Ch3_Vol)
  {CallBack$}


@NR33
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("W3&H%02X",J)
: ENDIF
  Mem[I]=J

  'Set frequency:
  Ch3_Frq=RGB(0,0,Mem[#NR34],J)

  {CallBack$}


@NR34
  TMP%=J AND&b111
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("W4&H%02X",J)
: ENDIF
  Mem[I]=TMP%

  'If trigger bit is set...
' IF J AND&h80 THEN
' ON J AND&h80GOTO@J_AND_x80f
    Ch3_Trg = (J AND&h80)!=0

    'If consecutive bit is set...
    Ch3_LEnbl = (J AND&h40)!=0
':  Ch3_Trigger

  @J_AND_x80f
' ENDIF

  'Set frequency
  Ch3_Frq=RGB(0,0,TMP%,Mem[#NR33])

  {CallBack$}


: IF RecordAPUWrites% THEN

@FF30:
  PRGINS FORMAT$("S0&H%02X",J)
  {UpdatePCM(&HFF30,&h0,CallBack$)}
@FF31:
  PRGINS FORMAT$("S1&H%02X",J)
  {UpdatePCM(&HFF31,&h1,CallBack$)}
@FF32:
  PRGINS FORMAT$("S2&H%02X",J)
  {UpdatePCM(&HFF32,&h2,CallBack$)}
@FF33:
  PRGINS FORMAT$("S3&H%02X",J)
  {UpdatePCM(&HFF33,&h3,CallBack$)}
@FF34:
  PRGINS FORMAT$("S4&H%02X",J)
  {UpdatePCM(&HFF34,&h4,CallBack$)}
@FF35:
  PRGINS FORMAT$("S5&H%02X",J)
  {UpdatePCM(&HFF35,&h5,CallBack$)}
@FF36:
  PRGINS FORMAT$("S6&H%02X",J)
  {UpdatePCM(&HFF36,&h6,CallBack$)}
@FF37:
  PRGINS FORMAT$("S7&H%02X",J)
  {UpdatePCM(&HFF37,&h7,CallBack$)}
@FF38:
  PRGINS FORMAT$("S8&H%02X",J)
  {UpdatePCM(&HFF38,&h8,CallBack$)}
@FF39:
  PRGINS FORMAT$("S9&H%02X",J)
  {UpdatePCM(&HFF39,&h9,CallBack$)}
@FF3A:
  PRGINS FORMAT$("SA&H%02X",J)
  {UpdatePCM(&HFF3a,&ha,CallBack$)}
@FF3B:
  PRGINS FORMAT$("SB&H%02X",J)
  {UpdatePCM(&HFF3b,&hb,CallBack$)}
@FF3C:
  PRGINS FORMAT$("SC&H%02X",J)
  {UpdatePCM(&HFF3c,&hc,CallBack$)}
@FF3D:
  PRGINS FORMAT$("SD&H%02X",J)
  {UpdatePCM(&HFF3d,&hd,CallBack$)}
@FF3E:
  PRGINS FORMAT$("SE&H%02X",J)
  {UpdatePCM(&HFF3e,&he,CallBack$)}
@FF3F:
  PRGINS FORMAT$("SF&H%02X",J)
  {UpdatePCM(&HFF3f,&hf,CallBack$)}

: ELSE
@FF30:{UpdatePCM(&HFF30,&h0,CallBack$)}
@FF31:{UpdatePCM(&HFF31,&h1,CallBack$)}
@FF32:{UpdatePCM(&HFF32,&h2,CallBack$)}
@FF33:{UpdatePCM(&HFF33,&h3,CallBack$)}
@FF34:{UpdatePCM(&HFF34,&h4,CallBack$)}
@FF35:{UpdatePCM(&HFF35,&h5,CallBack$)}
@FF36:{UpdatePCM(&HFF36,&h6,CallBack$)}
@FF37:{UpdatePCM(&HFF37,&h7,CallBack$)}
@FF38:{UpdatePCM(&HFF38,&h8,CallBack$)}
@FF39:{UpdatePCM(&HFF39,&h9,CallBack$)}
@FF3A:{UpdatePCM(&HFF3a,&ha,CallBack$)}
@FF3B:{UpdatePCM(&HFF3b,&hb,CallBack$)}
@FF3C:{UpdatePCM(&HFF3c,&hc,CallBack$)}
@FF3D:{UpdatePCM(&HFF3d,&hd,CallBack$)}
@FF3E:{UpdatePCM(&HFF3e,&he,CallBack$)}
@FF3F:{UpdatePCM(&HFF3f,&hf,CallBack$)}
: ENDIF

' -- Channel 4: Noise --
@NR41
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("N1&H%02X",J)
: ENDIF
  Mem[I]=J

  'Length
: t1="(J AND 63)"
' Ch4_LenP#=(64-{t1})*(1/256)
  Ch4_LenP#=(64-{t1})/256

  {CallBack$}


@NR42
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("N2&H%02X",J)
: ENDIF
  Mem[I] = J

  'Initial vol
  Ch4_InitV# = VolInit#[J]

  'Direction
' IF J AND 8 THEN
  ON J AND 8 GOTO @J_AND_8g
    Ch4_EnvDir# = VolInit#[&HFF] / 2
    Ch4_Attk#   =  63.0 - EnvDn#[J] / 2
    {CallBack$}
  @J_AND_8g
' ELSE
    Ch4_EnvDir# = VolInit#[&h00] / 2
    Ch4_Attk#   = 127.0 - EnvDn#[J] / 2
    {CallBack$}
' ENDIF

  {CallBack$}


@NR43
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("N3&H%02X",J)
: ENDIF
  Mem[I]=J

  'Set Shift Clock Frequency:
  Ch4_SCF     =  J DIV 16
  Ch4_CntSW   = (J AND 8) != 0
  Ch4_DivRate =  J AND 3

  {CallBack$}


@NR44
  TMP%=J AND&b111
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("N4&H%02X",J)
: ENDIF
  Mem[I]=TMP%

  'If trigger bit is set...
' ON J AND&h80GOTO@J_AND_x80h
    Ch4_Trg = (J AND&h80)!=0

    'If consecutive bit is set...
    Ch4_LEnbl = (J AND&h40)!=0
':  Ch4_Trigger

  @J_AND_x80h
' ENDIF
  {CallBack$}


' -- APU global --
@NR50
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("G0&H%02X",J)
: ENDIF
  Mem[I]=J
  APU_VolLft# = VolLft#[J]
  APU_VolRgt# = VolRgt#[J]

  {CallBack$}


@NR51
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("G1&H%02X",J)
: ENDIF
  Mem[I]=J

  Ch4_PanL=(J AND&h80)!=0
  Ch3_PanL=(J AND&h40)!=0
  Ch2_PanL=(J AND&h20)!=0
  Ch1_PanL=(J AND&h10)!=0

  Ch4_PanR=(J AND&h08)!=0
  Ch3_PanR=(J AND&h04)!=0
  Ch2_PanR=(J AND&h02)!=0
  Ch1_PanR=(J AND&h01)!=0

  {CallBack$}


@NR52
: IF RecordAPUWrites% THEN
  PRGINS FORMAT$("G2&H%02X",J)
: ENDIF
  Mem[I]=J


  APU_Pwr=(J AND&h80)!=0

  Ch4_Pwr=(J AND&h08)!=0

  Ch2_Pwr=(J AND&h02)!=0
  Ch1_Pwr=(J AND&h01)!=0


  SNDMVOL 127*APU_Pwr

  BGMVOL 4,127*Ch4_Pwr

  BGMVOL 2,127*Ch2_Pwr
  BGMVOL 1,127*Ch1_Pwr


  {CallBack$}

'***********
'* APU END *
'***********

'-----------------------------------
:END



'#######################################################

:VAR Switch_ROM_BankNO%=0
:DEF Switch_ROM_Bank

  :IF Use_VPC% THEN
    Loaded_ROM_Bank = New_ROM_Bank

  :ELSE'Use_VPC%
'   IF New_ROM_Bank!=Loaded_ROM_Bank THEN
    ON(New_ROM_Bank!=Loaded_ROM_Bank)GOTO@New_ROM_Bank_NEQ_Loaded_ROM_BankSwitch_ROM_BankNO%
    COPY Mem,&h4000,CartROM,&h4000*(New_ROM_Bank AND ROM_last_bank),&h4000
    Loaded_ROM_Bank = New_ROM_Bank
'   ENDIF
    @New_ROM_Bank_NEQ_Loaded_ROM_BankSwitch_ROM_BankNO%

  : Switch_ROM_BankNO%=Switch_ROM_BankNO%+1
  :ENDIF'Use_VPC%
:END

'#######################################################

:DEF Poke CallBack$

':IF UseDebugger THEN
'  PUSH DbgWriteLogSrc, DbgPCLog[LAST(DbgPCLog)]
'  PUSH DbgWriteLogPtr, I
'  PUSH DbgWriteLogVal, J
':ENDIF'UseDebugger


ON I Goto\
\'\'-- 0000 --
\'  {"@MBC,"              *&h8000}\
\'\'-- 8000 --
\'  {"@VRAM_Bitmap,"      *&h1800}\
\'  {"@VRAM_put_tilemap0,"*&h0400}\
\'  {"@VRAM_put_tilemap1,"*&h0400}\
\'\'-- a000 --
\'  {"@E,"                *&h2000}\
\'\'-- c000 --
\'  {"@R,"                *&h2000}\
\'\'-- e000 --
\'  {"@M,"                *&h1e00}\
\'  {"@OY,@OX,@OU,@OA,"   *    40}\
\'  {"@DE,"               *    96}\
\'-- 0000 --
\
\
:PRGINS format$("@%s_%d,",Cart$,0)*&h_1000+format$("@%s_%d,",Cart$,1)*&h_1000+format$("@%s_%d,",Cart$,2)*&h_1000+format$("@%s_%d,",Cart$,3)*&h_1000+"\"
:PRGINS format$("@%s_%d,",Cart$,4)*&h_1000+format$("@%s_%d,",Cart$,5)*&h_1000+format$("@%s_%d,",Cart$,6)*&h_1000+format$("@%s_%d,",Cart$,7)*&h_1000+"\"
\
\':PRGINS"@MBC,"            *&h8000+"\"
\'-- 8000 --
:PRGINS"@VRBt,"             *&h1800+"\"
:PRGINS"@VRp0,"             *&h0400+"\"
:PRGINS"@VRp1,"             *&h0400+"\"
\'-- a000 --
:PRGINS"@E,"                *&h2000+"\"
\'-- c000 --
:PRGINS"@R,"                *&h2000+"\"
\'-- e000 --
:PRGINS"@M,"                *&h1e00+"\"
:PRGINS"@OY,@OX,@OU,@OA,"   *    40+"\"
:PRGINS"@DE,"               *    96+"\"
\' - ff00 -
@P1,\
\
@SB,@SC,                  @R,\
\
@DIV,                     @R,@R,@R,@R,@R,@R,@R,@R,@R,@R,@R,\
\
@NR10,@NR11,@NR12,@NR13,@NR14,@R,\
@NR21,@NR22,@NR23,@NR24,\
@NR30,@NR31,@NR32,@NR33,@NR34,@R,\
@NR41,@NR42,@NR43,@NR44,\
@NR50,@NR51,@NR52,        @R,@R,@R,@R,@R,@R,@R,@R,@R,\
\
@FF30,@FF31,@FF32,@FF33,\
@FF34,@FF35,@FF36,@FF37,\
@FF38,@FF39,@FF3A,@FF3B,\
@FF3C,@FF3D,@FF3E,@FF3F,\
\
@LCDC,@STAT,              @R,@R,\
@LY,                      @R,\
@DMA,@BGP,@OBP0,@OBP1,\
\
:IF(#HWVer$=="CGB")||(#HWVer$=="AGB")THEN
\
@WY,@WX,                  @R,\
@FF4D,                    @R,\
@FF4F,\
@FF50,\
@HDMA1,@HDMA2,\
@HDMA3,@HDMA4,\
@HDMA5,\
@FF56,                    @R,@R,@R,@R,@R,@R,@R,@R,@R,\
                          @R,@R,@R,@R,@R,@R,@R,@R,@R,@R,@R,@R,\
@FF6C,                    @R,@R,@R,\
@FF70,                    @R,\
@FF72,\
@FF74,@FF75,@FF76,@FF77

:ELSE '#HWVer$ == "CGB"
\
@WY,@WX,                  @R,@R,@R,@R,\
@FF50

:ENDIF'#HWVer$ == "CGB"


'@PokeIJ_IO_De:
'ON I-&HFF00 Goto\
'@P1,\
'\
'@SB,@SC,                  @R,\
'\
'@DIV,                     @R,@R,@R,@R,@R,@R,@R,@R,@R,@R,@R,\
'\
'@NR10,@NR11,@NR12,@NR13,@NR14,@R,\
'@NR21,@NR22,@NR23,@NR24,\
'@NR30,@NR31,@NR32,@NR33,@NR34,@R,\
'@NR41,@NR42,@NR43,@NR44,\
'@NR50,@NR51,@NR52,        @R,@R,@R,@R,@R,@R,@R,@R,@R,\
'\
'@FF30,@FF31,@FF32,@FF33,\
'@FF34,@FF35,@FF36,@FF37,\
'@FF38,@FF39,@FF3A,@FF3B,\
'@FF3C,@FF3D,@FF3E,@FF3F,\
'\
'@LCDC,@STAT,              @R,@R,\
'@LY,                      @R,\
'@DMA,@BGP,@OBP0,@OBP1,\
'\
':IF(#HWVer$=="CGB")||(#HWVer$=="AGB")THEN
'\
'@WY,@WX,                  @R,\
'@FF4D,                    @R,\
'@FF4F,\
'@FF50,\
'@HDMA1,@HDMA2,\
'@HDMA3,@HDMA4,\
'@HDMA5,\
'@FF56,                    @R,@R,@R,@R,@R,@R,@R,@R,@R,\
'                          @R,@R,@R,@R,@R,@R,@R,@R,@R,@R,@R,@R,\
'@FF6C,                    @R,@R,@R,\
'@FF70,                    @R,\
'@FF72,\
'@FF74,@FF75,@FF76,@FF77
'
':ELSE '#HWVer$ == "CGB"
'\
'@WY,@WX,                  @R,@R,@R,@R,\
'@FF50
'
':ENDIF'#HWVer$ == "CGB"

'@INVALID
'  DIALOG format$("Memory error: %d [0x%04x]",I,I)
'  {CallBack$}
'
:IF(#HWVer$=="CGB")||(#HWVer$=="AGB")THEN

@FF4D
  Mem[I] = J
  {CallBack$}

@FF4F
  Mem[I] = J
  {CallBack$}

' ---

@HDMA1
  Mem[I] = J
  CGB_VRAM_DMA_SRC% = RGB(CGB_VRAM_DMA_SRC%,,,J,)
  {CallBack$}

@HDMA2
  Mem[I] = J
  CGB_VRAM_DMA_SRC% = RGB(CGB_VRAM_DMA_SRC%,,,,J AND &HF0)
  {CallBack$}

' ---

@HDMA3
  Mem[I] = J
  CGB_VRAM_DMA_DST% = RGB(CGB_VRAM_DMA_DST%,,,&H80+(J AND &H1F),)
  {CallBack$}

@HDMA4
  Mem[I] = J
  CGB_VRAM_DMA_DST% = RGB(CGB_VRAM_DMA_DST%,,,,J AND &HF0)
  {CallBack$}

' ---

@HDMA5
  Mem[I] = J
' CGB_VRAM_DMA_MODE%   = 0 != (J AND &H80)
  CGB_VRAM_DMA_LENGTH% = J AND &H7F
  ON(0!=(J AND&H80))GOTO\
        @GeneralPurpose,\
        @HBLANK

  @GeneralPurpose
      COPY Mem, &H2000+CGB_VRAM_DMA_DST%, Mem, CGB_VRAM_DMA_SRC%, CGB_VRAM_DMA_LENGTH%
'     Mem[I] = &HFF
      {CallBack$}

  @HBLANK
      COPY Mem,        CGB_VRAM_DMA_DST%, Mem, CGB_VRAM_DMA_SRC%, CGB_VRAM_DMA_LENGTH%
      FOR I%=&H8000 TO CGB_VRAM_DMA_LENGTH%-1
        POKE I%,Mem[I%]
      NEXT
'     Mem[I] = &HFF
      {CallBack$}

' ---

@FF56
  Mem[I] = J
  {CallBack$}

@FF6C
  Mem[I] = J
  {CallBack$}

@FF70
  Mem[I] = J
  {CallBack$}

@FF72
  Mem[I] = J
  {CallBack$}

@FF74
  Mem[I] = J
  {CallBack$}

@FF75
  Mem[I] = J
  {CallBack$}

@FF76
  Mem[I] = J
  {CallBack$}

@FF77
  Mem[I] = J
  {CallBack$}

:ENDIF'#HWVer$ == "CGB"

@R
  Mem[I]=J
  {CallBack$}

@M
  Mem[I-&H2000]=J
  {CallBack$}

:SIO_Mem CallBack$

@IOAM
  Mem[I]=J
  SpriteNo =DivideBy4[I]
  ON I AND 3Goto@y,@x,@uv,@attr

@OY
  Mem[I]=J
: if(DisableObj%==0)then
  SpriteNo =DivideBy4[I]
@y
' IF SpriteSz_16 THEN
  ON SpriteSz_16 GOTO@SpriteSz_16y
    SPOFS SpriteNo,,2+J
'   SPOFS SpriteNo+40,,10+J
    SPOFS SpriteNo+40,0,8
    {CallBack$}
  @SpriteSz_16y
' ELSE
    SPOFS SpriteNo,,2+J
' ENDIF
: ENDIF'not DisableObj% then
  {CallBack$}

@OX
  Mem[I]=J
  SpriteNo =DivideBy4[I]
@x
' IF SpriteSz_16 THEN
  ON SpriteSz_16 GOTO@SpriteSz_16x
    SPOFS SpriteNo,72+J,
'   SPOFS SpriteNo+40,72+J,
    SPOFS SpriteNo+40,0,8
    {CallBack$}
  @SpriteSz_16x
' ELSE
    SPOFS SpriteNo,72+J,
' ENDIF
  {CallBack$}

@OU
  Mem[I]=J
: if(DisableObj%==0)then
  SpriteNo = DivideBy4[I]
@uv
  U = U_Values[J]

  Atr=OAM_Value[SpriteNo,2]
  V = V_Values[J]+3*(Atr AND 16)

  OAM_Value[SpriteNo,0] = U
  OAM_Value[SpriteNo,1] = V

' IF SpriteSz_16 THEN
  ON SpriteSz_16 GOTO@SpriteSz_16uv
    SPCHR SpriteNo,u,v,8,8,OAM_Value[SpriteNo,2]
    SPCHR SpriteNo+40,u+8,v,8,8,OAM_Value[SpriteNo,2]
    {CallBack$}
  @SpriteSz_16uv
' ELSE
    SPCHR SpriteNo,u,v,8,8,OAM_Value[SpriteNo,2]
' ENDIF
: ENDIF'not DisableObj% then
  {CallBack$}

@OA
  Mem[I]=J
: if(DisableObj%==0)then
  SpriteNo =DivideBy4[I]
@attr
  Atr=AtrFlipY[J]+AtrFlipX[J]
  OAM_Value[SpriteNo,2]=Atr

' IF SpriteSz_16 THEN
  ON SpriteSz_16 GOTO@SpriteSz_16at
    SPCHR SpriteNo,OAM_Value[SpriteNo,0],OAM_Value[SpriteNo,1],8,8,Atr
    SPCHR SpriteNo+40,OAM_Value[SpriteNo,0]+8,OAM_Value[SpriteNo,1],8,8,Atr
    {CallBack$}
  @SpriteSz_16at
' ELSE
    SPCHR SpriteNo,OAM_Value[SpriteNo,0],OAM_Value[SpriteNo,1],8,8,Atr
' ENDIF
: ENDIF'not DisableObj% then
  {CallBack$}


@MBC
  ON CartridgeType Goto\
    @De,@MBC1,@MBC2,@MBC3,@DE,@MBC5,\
    @MBC3,@DE,@MBC_cam'_RTC
    {CallBack$}

@MBC1

  IF     I<&H2000 THEN
  @M1_0 @M1_1
    ERAM_Access=(J AND &HF) == &HA
    {CallBack$}

  ELSEIF I<&H4000 THEN
  @M1_2 @M1_3
    New_ROM_Bank = (New_ROM_Bank AND &HE0) OR (J AND &H1F)

    ON (J AND &H1F) == &H00\
    GOTO@J_AND_x1F_EQ_x00
      New_ROM_Bank=New_ROM_Bank+1

    @J_AND_x1F_EQ_x00
:   Switch_ROM_Bank
    {CallBack$}

  ELSEIF I<&H6000 THEN
  @M1_4 @M1_5
    ON ERAM_mode==0\
    GOTO@ERAM_mode_EQ_0
      New_ROM_Bank = (New_ROM_Bank AND &H1F) OR (J AND &HE0)
      New_ERAM_Bank = 0
      {CallBack$}

    @ERAM_mode_EQ_0
      New_ERAM_Bank = J AND 3
:     Switch_ERAM_Bank
      {CallBack$}


  ELSE
  @M1_6 @M1_7
    ERAM_mode = J AND 1
    {CallBack$}
  ENDIF

  {CallBack$}

@MBC2

  IF I<&H2000 THEN
  @M2_0 @M2_1
    ON (I AND &H0100)==0\
    GOTO@I_AND_x0100_EQ_0
      ERAM_Access = (J AND &HF)==&HA

    @I_AND_x0100_EQ_0
    {CallBack$}

  ELSEIF I<&H4000 THEN
  @M2_2 @M2_3
    ON I AND &H0100\
    GOTO@I_AND_x0100
      New_ROM_Bank = J  AND ROM_last_bank AND &H0F
      IF New_ROM_Bank==0 THEN New_ROM_Bank = 1
:     Switch_ROM_Bank

    @I_AND_x0100
    {CallBack$}

  ELSE
  @M2_4 @M2_5 @M2_6 @M2_7
    {CallBack$}

  ENDIF

  {CallBack$}

@MBC3
'@MBC_cam

  IF I<&H2000 THEN
  @M3_0 @M3_1
    ERAM_Access = (J AND &HF)==&H0A
    {CallBack$}

  ELSEIF I<&H4000 THEN
  @M3_2 @M3_3
    New_ROM_Bank = ((New_ROM_Bank AND &H180)+(J AND &H7F))AND ROM_last_bank
    IF New_ROM_Bank==0 THEN New_ROM_Bank=1
:   Switch_ROM_Bank
    {CallBack$}

  ELSEIF I<&H6000 THEN
  @M3_4 @M3_5
    New_ERAM_Bank = J AND Last_ERAM_Bank
:   Switch_ERAM_Bank
    New_ROM_Bank=((New_ROM_Bank AND &H7F)+((J AND &H3)*256))AND ROM_last_bank
:   Switch_ROM_Bank
    {CallBack$}

  ELSE
  @M3_6 @M3_7
    {CallBack$}

  ENDIF

  {CallBack$}

@MBC3_RTC
  IF I<&H2000 THEN
  @M3R_0 @M3R_1
    ERAM_Access = (J AND &HF)==&H0A
    {CallBack$}

  ELSEIF I<&H4000 THEN
  @M3R_2 @M3R_3
    New_ROM_Bank = ((New_ROM_Bank AND &H180)+(J AND &H7F))AND ROM_last_bank
    IF New_ROM_Bank==0 THEN New_ROM_Bank=1
:   Switch_ROM_Bank
    {CallBack$}

  ELSEIF I<&H6000 THEN
  @M3R_4  @M3R_5
    ON(J)GOTO\
      @M3RE,@M3RE,@M3RE,@M3RE,@M3RE,\
      @M3RE,@M3RE,@M3RE,@RTC_Sec,\
      @RTC_Min,@RTC_Hour,@RTC_DayL,\
      @RTC_DayH

  @M3RE
    New_ERAM_Bank = J AND Last_ERAM_Bank
    : Switch_ERAM_Bank
    New_ROM_Bank = ((New_ROM_Bank AND &H7F)+((J AND &H3)*256))AND ROM_last_bank
    : Switch_ROM_Bank
    {CallBack$}

: IF(FreezeRTC%)THEN
  @RTC_Sec
    TMRead {FreezeRTCTime$} Out ,,Mem[&HA000]
    {CallBack$}
  @RTC_Min
    TMRead {FreezeRTCTime$} Out , Mem[&HA000] ,
    {CallBack$}
  @RTC_Hour
    TMRead {FreezeRTCTime$} Out   Mem[&HA000],,
    {CallBack$}
  @RTC_DayL
    DTRead {FreezeRTCDay$} Out ,,TMP%
    RGB TMP% Out ,,Mem[&HA000]
    {CallBack$}
  @RTC_DayH
    DTRead {FreezeRTCDay$} Out ,,TMP%
    RGB TMP% Out , Mem[&HA000],
    {CallBack$}

: ELSE'(FreezeRTC%)
  @RTC_Sec
    TMRead Out ,,Mem[&HA000]
    {CallBack$}
  @RTC_Min
    TMRead Out , Mem[&HA000] ,
    {CallBack$}
  @RTC_Hour
    TMRead Out   Mem[&HA000],,
    {CallBack$}
  @RTC_DayL
    DTRead Out ,,TMP%
    RGB TMP% Out ,,Mem[&HA000]
    {CallBack$}
  @RTC_DayH
    DTRead Out ,,TMP%
    RGB TMP% Out , Mem[&HA000],
    {CallBack$}
: ENDIF'(FreezeRTC%)

' ' Copy current RAM page back into ERAM
' COPY ERAM, (Loaded_ERAM_Bank * &H2000) AND LAST(ERAM),   \
'      Mem,  &HA000,                                       \
'      &H2000
' FILL Mem,RND(60),&HA000,&H2000
' Mem[&HA000]=59'RND(60)
' {CallBack$}

  ELSE
  @M3R_6 @M3R_7
    {CallBack$}

  ENDIF

  {CallBack$}


@MBC5
  IF I<&H2000 THEN
  @M5_0 @M5_1
    ERAM_Access = (J AND &HF)==&H0A
    {CallBack$}

  ELSEIF I<&H3000 THEN
  @M5_2
    New_ROM_Bank = ((New_ROM_Bank AND &H100) OR J)AND ROM_last_bank
:   Switch_ROM_Bank
    {CallBack$}

  ELSEIF I<&H4000 THEN
  @M5_3
    New_ROM_Bank = ((New_ROM_Bank AND &HFF) OR (J AND 1)*256)AND ROM_last_bank
:   Switch_ROM_Bank
    {CallBack$}

  ELSEIF I<&H6000 THEN
  @M5_4 @M5_5
    New_ERAM_Bank = J AND 3
:   Switch_ERAM_Bank
    {CallBack$}

  ELSE
  @M5_6 @M5_7
    {CallBack$}

  ENDIF

  {CallBack$}


''@MBC_cam
'  IF I<&H2000 THEN
'  @MCam_0 @MCam_1
'    ERAM_Access=(J AND &HF)==&HA
'    {CallBack$}
'
'  ELSEIF I<&H4000 THEN
'  @MCam_2 @MCam_3
'    New_ROM_Bank = J AND &H3F
':   Switch_ROM_Bank
'    {CallBack$}
'
'  ELSEIF I<&H6000 THEN
'  @MCam_4 @MCam_5
'    ON J<&H10\
'    GOTO@J_LT_x10
'      New_ERAM_Bank = J
':     Switch_ERAM_Bank
'      CamRegsOn = 0
'      {CallBack$}
'
'    @J_LT_x10
''     FOR A%=&H0000 TO &H1FFFF
''       ERAM[A%]=RND(256)
''     NEXT
'      CamRegsOn = 1
'      {CallBack$}
'
'  ELSE
'  @MCam_6 @MCam_7
'    {CallBack$}
'
'  ENDIF

@MBC_cam

  IF I<&H2000 THEN
  @MCam_0 @MCam_1
    ERAM_Access = (J AND &HF)==&H0A
    {CallBack$}

  ELSEIF I<&H4000 THEN
  @MCam_2 @MCam_3
    New_ROM_Bank = ((New_ROM_Bank AND &H180)+(J AND &H7F))AND ROM_last_bank
    IF New_ROM_Bank==0 THEN New_ROM_Bank=1
:   Switch_ROM_Bank
    {CallBack$}

  ELSEIF I<&H6000 THEN
  @MCam_4 @MCam_5
    ON((J AND&H10)==0)\
    GOTO@J_LT_x10
      New_ERAM_Bank = J AND Last_ERAM_Bank
:     Switch_ERAM_Bank
      New_ROM_Bank=((New_ROM_Bank AND &H7F)+((J AND &H3)*256))AND ROM_last_bank
:     Switch_ROM_Bank
      CamRegsOn = 0
      {CallBack$}
    @J_LT_x10
      New_ERAM_Bank = J AND Last_ERAM_Bank
:     Switch_ERAM_Bank
      CamRegsOn = 1
'     FOR N%=&H0100 TO &H0FFF
'       MEM[&HA000+N%]=N%AND 255'RND(256)
'     NEXT

'     TMP%=GTARGET()
'     GTARGET 4
'     FOR N%=&H0100 TO &H0FFF
'       HSV GPGET((N%*8)DIV 128,(N%*8)AND 127)OUT,,I%
'       MEM[&HA000+N%]=I%
'     NEXT
'     GTARGET TMP%

      COPY MEM, &HA100, MEM, &H8000, &H0E00

'     TMP%=GTARGET()
'     GTARGET 4
'     FOR N%=000 TO 111
'     FOR M%=000 TO 127
'       HSV GPGET(M%,N%)OUT,,I%
'       I% = 3 - (I% DIV 64)
'       ERAM[&H0100+(N%*256)+(M%*2)  ] = ERAM[&H0100+(N%*256)+(M%*2)  ] OR ((I% AND 1)!=0)*(1<<(7-(7 AND M%)))
'       ERAM[&H0100+(N%*256)+(M%*2)+1] = ERAM[&H0100+(N%*256)+(M%*2)+1] OR ((I% AND 2)!=0)*(1<<(7-(7 AND M%)))
'     NEXT
'     NEXT
'     GTARGET TMP%
      {CallBack$}

  ELSE
  @MCam_6 @MCam_7
    {CallBack$}

  ENDIF

  {CallBack$}

'*******
'* PPU *
'*******
@VRBt
@VRAM_Bitmap
  Mem[I]=J

''IF(Mem[#LY]>=144)THEN {CallBack$} ENDIF
'::::::::::::::::::::::::::::::::::::::::::
: if(DisableBG%==0)||(DisableWin%==0)||(DisableObj%==0)then
'::::::::::::::::::::::::::::::::::::::::::
  d0=Mem[_d0[I]]
  d1=Mem[_d1[I]]

': TileX="((_TileIdx[I]AND 63)*8)"
': TileY="_TileY[I]"
  TileX=(_TileIdx[I]AND 63)*8
  TileY=_TileY[I]

: FOR x=0TO 7

    sx  =_sx[x]
    TMP% =((d0 AND sx)==0)+(((d1 AND sx)==0)*2)

'   VRAM_cache[({TileY}*512)+{TileX}+x]=TMP%
'   VRAM_Bitmap[{TileY},{TileX}+x]=TMP%
    VRAM_cache[(TileY*512)+TileX+x]=TMP%
    VRAM_Bitmap[TileY,TileX+x]=TMP%
    IF VRAM_cache[TMP%]!=TMP% THEN VRAM_DoUpdateBitmap=1
'   VRAM_DoUpdateBitmap=VRAM_cache[TMP%]!=TMP%

: Next x
'::::::::::::::::::::::::::::::::::::::::::
: ENDIF'not DisableBGWinObj% then
'::::::::::::::::::::::::::::::::::::::::::

  {CallBack$}


@VRAM_put_tilemap0
@VRp0
  Mem[I]=J


'::::::::::::::::::::::::::::::::::::::::::
: if(DisableBG%==0)then
'::::::::::::::::::::::::::::::::::::::::::


' ofs =((CommonTileData==0)&&J<128)*256
' TileIdx=J+&HE800
' TileIdx=J+ofs+&HE800
' TileIdx=J+(J<128)*256+&HE800
' TileIdx=J+((CommonTileData==0)&&J<128)*256+&HE800
  TileIdx=J+&HE800
  TileId2=J+(J<128)*256+&HE800

' IF(BG_TileMap==0)THEN
    TMP%=I-&H9800
' ELSE
'   TMP%=I-&H9C00
' ENDIF

' IF TileCache0[TMP%]==TileIdx THEN {CallBack$}
  ON TileCache0[TMP%]==TileIdx\
  GOTO@TileCache0_Tmp_EQ_TileIdx,@TileCache0_Tmp_EQ_TileIdx_

  @TileCache0_Tmp_EQ_TileIdx
'   y=(TMP% DIV 32)*128+(TMP% AND 31)*2
'   VRAM_BG_Map[y     ]=TileIdx
'   VRAM_BG_Map[y+64  ]=TileIdx
'   VRAM_BG_Map[y+4096]=TileIdx
'   VRAM_BG_Map[y+4160]=TileIdx

    y=(TMP% DIV 32)*256+(TMP% AND 31)*2
    VRAM_BG_Map[y     ]=TileIdx
    VRAM_BG_Map[y+64  ]=TileIdx
    VRAM_BG_Map[y+8192]=TileIdx
    VRAM_BG_Map[y+8256]=TileIdx

    VRAM_BG_Map[y+128 ]=TileId2
    VRAM_BG_Map[y+192 ]=TileId2
    VRAM_BG_Map[y+8320]=TileId2
    VRAM_BG_Map[y+8384]=TileId2

    TileCache0[TMP%] =TileIdx

    VRAM_DoUpdate_BG=1

  @TileCache0_Tmp_EQ_TileIdx_
'::::::::::::::::::::::::::::::::::::::::::
: ENDIF'not DisableBG% then
'::::::::::::::::::::::::::::::::::::::::::


  {CallBack$}


@VRAM_put_tilemap1
@VRp1
  Mem[I]=J


'::::::::::::::::::::::::::::::::::::::::::
: if(DisableWin%==0)then
'::::::::::::::::::::::::::::::::::::::::::


' IF(WinTileMap==0)THEN
'   TMP%=I-&H9800
' ELSE
    TMP%=I-&H9C00
' ENDIF
' ofs=(((CommonTileData==0)&&J<128))*256
' TileIdx=J+&HE800
' TileIdx=J+ofs+&HE800
' TileIdx=J+(J<128)*256+&HE800
  TileIdx=J+((CommonTileData==0)&&J<128)*256+&HE800

  ON TileCache1[TMP%]==TileIdx\
  GOTO@TileCache1_Tmp_EQ_TileIdx,@TileCache1_Tmp_EQ_TileIdx_

  @TileCache1_Tmp_EQ_TileIdx
    VRAM_WinMap[TMP% DIV 32,(TMP% AND 31)*2]=TileIdx
    TileCache1[TMP%]=TileIdx
    VRAM_DoUpdateWin=1


  @TileCache1_Tmp_EQ_TileIdx_
'::::::::::::::::::::::::::::::::::::::::::
: ENDIF'not DisableBGWin% then
'::::::::::::::::::::::::::::::::::::::::::


  {CallBack$}


'To make sure the current PPU mode
'is visible:
@STAT
  Mem[#STAT]=(J AND &HFC)+PPU_Mode
  {CallBack$}


: ON #Scale Goto@WScale0,@WScale1,@WScale2,@WScale3,@WScale4,@WScale5
: @WScale0
: GOTO@WScaleEND
: @WScale1
: GOTO@WScaleEND
: @WScale2
: GOTO@WScaleEND
: @WScale3
: GOTO@WScaleEND
: @WScale4
@WY
  Mem[I]=J

:IF(ENVTYPE()!=2)THEN
  LMATRIX #WinLayer,-73,-21,Mem[#WX]*4,J*4,4,4
:ENDIF
  {CallBack$}


@WX
  Mem[I]=J

:IF(ENVTYPE()!=2)THEN
  LMATRIX #WinLayer,-73,-21,J*4,Mem[#WY]*4,4,4
:ENDIF
  {CallBack$}
: GOTO@WScaleEND
: @WScale5
@WY
  Mem[I]=J

:IF(ENVTYPE()!=2)THEN
  LMATRIX #WinLayer,-41,0,Mem[#WX]*5,J*5,5,5
:ENDIF
  {CallBack$}


@WX
  Mem[I]=J

:IF(ENVTYPE()!=2)THEN
  LMATRIX #WinLayer,-41,0,J*5,Mem[#WY]*5,5,5
:ENDIF
  {CallBack$}
: @WScaleEND

@LY
  ON PPU_On GOTO@PPU_On
    Mem[#LY] = 0

  @PPU_On
    {CallBack$}


@DMA
  Mem[I]=J

  'Perform DMA copy operation
  COPY Mem,&HFE00,Mem,J*256,&HA0

'::::::::::::::::::::::::::::::::::::::::::
: if(DisableObj%==0)then
'::::::::::::::::::::::::::::::::::::::::::

:   DIM DivideBy4[&h10000]
:   FOR I=0 TO &HFFFF
:     DivideBy4[I]=(I DIV 4)MOD 40
:   Next


    'Update visible sprites

:   FOR K=&hFE00 TO &hFE9F STEP 4
      Y  = Mem[K]
      x  = Mem[K+1]

      No = Mem[K+2]
      U  = U_Values[No]

      Atr= Mem[K+3]
      V  = V_Values[No]+3*(Atr AND 16)

      Atr=AtrFlipX[Atr]+AtrFlipY[Atr]

      OAM_Value[(K DIV 4)MOD 40,0] = U
      OAM_Value[(K DIV 4)MOD 40,1] = V
      OAM_Value[(K DIV 4)MOD 40,2] = Atr

      ON SpriteSz_16\
      GOTO@SpriteSz_16oamK

        SPCHR (K DIV 4)MOD 40,   u,  v,8,8,Atr
        SPOFS (K DIV 4)MOD 40,72+x,2+y

        SPCHR 40+(K DIV 4)MOD 40,u+8,v,8,8,Atr
'       SPOFS 40+(K DIV 4)MOD 40,72+x,10+y
        SPOFS 40+(K DIV 4)MOD 40,0,8
        GOTO@SpriteSz_16oamK_

      @SpriteSz_16oamK
        SPCHR (K DIV 4)MOD 40,   u,  v,8,8,Atr
        SPOFS (K DIV 4)MOD 40,72+x,2+y

      @SpriteSz_16oamK_
:   Next

'::::::::::::::::::::::::::::::::::::::::::
: ENDIF'not DisableObj% then
'::::::::::::::::::::::::::::::::::::::::::

  {CallBack$}

@BGP
  IF(Mem[I]==J)THEN {CallBack$}
  Mem[I]=J
:if(DisableBG%==0)&&(DisableWin%==0)then
  RGB Pals[J]OUT A%,R%,G%,B%
  BGP[3]=BGPal[B%]OR&HFF_000000
  BGP[2]=BGPal[G%]OR&HFF_000000
  BGP[1]=BGPal[R%]OR&HFF_000000
  BGP[0]=BGPal[A%]OR&HFF_000000
  VRAM_DoUpdateBitmap=1
:ENDIF'not DisableBGWin% then
  {CallBack$}

@OBP0
  IF(Mem[I]==J)THEN {CallBack$}
  Mem[I]=J
:if(DisableObj%==0)then
  RGB Pals[J]OUT A%,R%,G%,B%
  OBP0[3]=OBPal0[B%]AND&h00FFFFFF
  OBP0[2]=OBPal0[G%]OR&HFF_000000
  OBP0[1]=OBPal0[R%]OR&HFF_000000
  OBP0[0]=OBPal0[A%]OR&HFF_000000
  VRAM_DoUpdateBitmap=1
:ENDIF'not DisableObj% then
  {CallBack$}

@OBP1
  IF(Mem[I]==J)THEN {CallBack$}
  Mem[I]=J
:if(DisableObj%==0)then
  RGB Pals[J]OUT A%,R%,G%,B%
  OBP1[3]=OBPal1[B%]AND&h00FFFFFF
  OBP1[2]=OBPal1[G%]OR&HFF_000000
  OBP1[1]=OBPal1[R%]OR&HFF_000000
  OBP1[0]=OBPal1[A%]OR&HFF_000000
  VRAM_DoUpdateBitmap=1
:ENDIF'not DisableObj% then
  {CallBack$}

@LCDC


:if(DisableObj%==0)then


  Mem[I]=J

:LCDC_lbl0$ = ""
:FOR J=0 TO 254
:  PUSH LCDC_lbl0$,format$("@LC%d,",J)
:Next
:PUSH LCDC_lbl0$,"@LC255"

  ON J Goto {LCDC_lbl0$}

':FOR J=0 TO 255
'    {format$("@LC%d",J)}
': IF J AND   1THEN
'    TSHOW 1BG_on=1
': ELSE
'    THIDE 1BG_on=0
': ENDIF
':
': IF J AND  8THEN
'    BG_TileMap=1
': ELSE
'    BG_TileMap=0
': ENDIF
':
': IF J AND  16THEN
'    CommonTileData=1
': ELSE
'    CommonTileData=0
': ENDIF
':
': IF J AND  32THEN
'    TSHOW 0SPSHOW 100WinOn=1
': ELSE
'    THIDE 0SPHIDE 100WinOn=0
': ENDIF
':
': IF J AND  64THEN
'    WinTileMap=1
': ELSE
'    WinTileMap=0
': ENDIF
':
': IF J AND 128THEN
'    PPU_On=1
': ELSE
'    PPU_On=0Mem[#LY]=0PPU_Mode=1DMG_State0=0
': ENDIF
':
': IF(J AND 2)THEN
':  IF(J AND 4)THEN
'    Goto@LCDC24
':  ELSE
'    Goto@LCDC2x
':  ENDIF
': ELSEIF(J AND 4)THEN
'    Goto@LCDCx4
': ENDIF
':
'   {CallBack$}
':Next

: FOR J=0 TO 255
: LCDC_Txt$=""
''    {format$("@LC%d",J)}
:   PUSH LCDC_Txt$,format$("@LC%d:",J)
:   IF J AND   1THEN
'      TSHOW 1BG_on=1
:IF(ENVTYPE()!=2)THEN
:     PUSH LCDC_Txt$,"TSHOW 1BG_on=1"
:ELSE
:     PUSH LCDC_Txt$,"BG_on=1"
:ENDIF
:   ELSE
'      THIDE 1BG_on=0
:IF(ENVTYPE()!=2)THEN
:     PUSH LCDC_Txt$,"THIDE 1BG_on=0"
:ELSE
:     PUSH LCDC_Txt$,"BG_on=0"
:ENDIF
:   ENDIF
:
:   IF J AND  8THEN
'      BG_TileMap=1
':    PUSH LCDC_Txt$,"BG_TileMap=1TPAGE #BGScreen,4,1024,128VRAM_DoUpdate_BG=1"
:     PUSH LCDC_Txt$,"BG_TileMap=1"
:   ELSE
'      BG_TileMap=0
':    PUSH LCDC_Txt$,"BG_TileMap=0TPAGE #BGScreen,4,1024,  0VRAM_DoUpdate_BG=1"
:     PUSH LCDC_Txt$,"BG_TileMap=0"
:   ENDIF
:
:   IF J AND  16THEN
'      CommonTileData=1
:     PUSH LCDC_Txt$,"CommonTileData=1"
:   ELSE
'      CommonTileData=0
:     PUSH LCDC_Txt$,"CommonTileData=0"
:   ENDIF
:
:   IF J AND  32THEN
'      TSHOW 0SPSHOW 100WinOn=1
:IF(ENVTYPE()!=2)THEN
:     PUSH LCDC_Txt$,"TSHOW 0SPSHOW 100WinOn=1"
:ELSE
:     PUSH LCDC_Txt$,"WinOn=1"
:ENDIF
:   ELSE
'      THIDE 0SPHIDE 100WinOn=0
:IF(ENVTYPE()!=2)THEN
:     PUSH LCDC_Txt$,"THIDE 0SPHIDE 100WinOn=0"
:ELSE
:     PUSH LCDC_Txt$,"WinOn=0"
:ENDIF
:   ENDIF
:
:   IF J AND  64THEN
'      WinTileMap=1
:     PUSH LCDC_Txt$,"WinTileMap=1"
:   ELSE
'      WinTileMap=0
:     PUSH LCDC_Txt$,"WinTileMap=0"
:   ENDIF
:
:   IF J AND 128THEN
'      PPU_On=1
:     PUSH LCDC_Txt$,"PPU_On=1"
:   ELSE
'      PPU_On=0Mem[#LY]=0PPU_Mode=1DMG_State0=0
:     PUSH LCDC_Txt$,format$("PPU_On=0Mem[%d]=0PPU_Mode=1DMG_State0=0",#LY)
:   ENDIF
:
: IF(J AND 2)THEN
:  IF(J AND 4)THEN
'    Goto@LCDC24
:     PUSH LCDC_Txt$,"Goto@LCDC24:"
:  ELSE
'    Goto@LCDC2x
:     PUSH LCDC_Txt$,"Goto@LCDC2x:"
:  ENDIF
: ELSEIF(J AND 4)THEN
'    Goto@LCDCx4
:     PUSH LCDC_Txt$,"Goto@LCDCx4:"
: ENDIF
:
'   {CallBack$}
:     PUSH LCDC_Txt$,CallBack$
:   PRGINS LCDC_Txt$
: Next


@LCDC2x
'SPSHOW 0SPSHOW 40SPSHOW 1SPSHOW 41
'SPSHOW 2SPSHOW 42SPSHOW 3SPSHOW 43
'SPSHOW 4SPSHOW 44SPSHOW 5SPSHOW 45
'SPSHOW 6SPSHOW 46SPSHOW 7SPSHOW 47
'SPSHOW 8SPSHOW 48SPSHOW 9SPSHOW 49
'SPSHOW 10SPSHOW 50SPSHOW 11SPSHOW 51
'SPSHOW 12SPSHOW 52SPSHOW 13SPSHOW 53
'SPSHOW 14SPSHOW 54SPSHOW 15SPSHOW 55
'SPSHOW 16SPSHOW 56SPSHOW 17SPSHOW 57
'SPSHOW 18SPSHOW 58SPSHOW 19SPSHOW 59
'SPSHOW 20SPSHOW 60SPSHOW 21SPSHOW 61
'SPSHOW 22SPSHOW 62SPSHOW 23SPSHOW 63
'SPSHOW 24SPSHOW 64SPSHOW 25SPSHOW 65
'SPSHOW 26SPSHOW 66SPSHOW 27SPSHOW 67
'SPSHOW 28SPSHOW 68SPSHOW 29SPSHOW 69
'SPSHOW 30SPSHOW 70SPSHOW 31SPSHOW 71
'SPSHOW 32SPSHOW 72SPSHOW 33SPSHOW 73
'SPSHOW 34SPSHOW 74SPSHOW 35SPSHOW 75
'SPSHOW 36SPSHOW 76SPSHOW 37SPSHOW 77
'SPSHOW 38SPSHOW 78SPSHOW 39SPSHOW 79
SPSHOW 0SPSHOW 1
SPSHOW 2SPSHOW 3
SPSHOW 4SPSHOW 5
SPSHOW 6SPSHOW 7
SPSHOW 8SPSHOW 9
SPSHOW 10SPSHOW 11
SPSHOW 12SPSHOW 13
SPSHOW 14SPSHOW 15
SPSHOW 16SPSHOW 17
SPSHOW 18SPSHOW 19
SPSHOW 20SPSHOW 21
SPSHOW 22SPSHOW 23
SPSHOW 24SPSHOW 25
SPSHOW 26SPSHOW 27
SPSHOW 28SPSHOW 29
SPSHOW 30SPSHOW 31
SPSHOW 32SPSHOW 33
SPSHOW 34SPSHOW 35
SPSHOW 36SPSHOW 37
SPSHOW 38SPSHOW 39
SpriteSz_16=0
SPUNLINK 40SPUNLINK 41SPUNLINK 42SPUNLINK 43
SPUNLINK 44SPUNLINK 45SPUNLINK 46SPUNLINK 47
SPUNLINK 48SPUNLINK 49SPUNLINK 50SPUNLINK 51
SPUNLINK 52SPUNLINK 53SPUNLINK 54SPUNLINK 55
SPUNLINK 56SPUNLINK 57SPUNLINK 58SPUNLINK 59
SPUNLINK 60SPUNLINK 61SPUNLINK 62SPUNLINK 63
SPUNLINK 64SPUNLINK 65SPUNLINK 66SPUNLINK 67
SPUNLINK 68SPUNLINK 69SPUNLINK 70SPUNLINK 71
SPUNLINK 72SPUNLINK 73SPUNLINK 74SPUNLINK 75
SPUNLINK 76SPUNLINK 77SPUNLINK 78SPUNLINK 79
SPHIDE 40SPHIDE 41
SPHIDE 42SPHIDE 43
SPHIDE 44SPHIDE 45
SPHIDE 46SPHIDE 47
SPHIDE 48SPHIDE 49
SPHIDE 50SPHIDE 51
SPHIDE 52SPHIDE 53
SPHIDE 54SPHIDE 55
SPHIDE 56SPHIDE 57
SPHIDE 58SPHIDE 59
SPHIDE 60SPHIDE 61
SPHIDE 62SPHIDE 63
SPHIDE 64SPHIDE 65
SPHIDE 66SPHIDE 67
SPHIDE 68SPHIDE 69
SPHIDE 70SPHIDE 71
SPHIDE 72SPHIDE 73
SPHIDE 74SPHIDE 75
SPHIDE 76SPHIDE 77
SPHIDE 78SPHIDE 79
{CallBack$}

@LCDC24
SPSHOW 0SPSHOW 40SPSHOW 1SPSHOW 41
SPSHOW 2SPSHOW 42SPSHOW 3SPSHOW 43
SPSHOW 4SPSHOW 44SPSHOW 5SPSHOW 45
SPSHOW 6SPSHOW 46SPSHOW 7SPSHOW 47
SPSHOW 8SPSHOW 48SPSHOW 9SPSHOW 49
SPSHOW 10SPSHOW 50SPSHOW 11SPSHOW 51
SPSHOW 12SPSHOW 52SPSHOW 13SPSHOW 53
SPSHOW 14SPSHOW 54SPSHOW 15SPSHOW 55
SPSHOW 16SPSHOW 56SPSHOW 17SPSHOW 57
SPSHOW 18SPSHOW 58SPSHOW 19SPSHOW 59
SPSHOW 20SPSHOW 60SPSHOW 21SPSHOW 61
SPSHOW 22SPSHOW 62SPSHOW 23SPSHOW 63
SPSHOW 24SPSHOW 64SPSHOW 25SPSHOW 65
SPSHOW 26SPSHOW 66SPSHOW 27SPSHOW 67
SPSHOW 28SPSHOW 68SPSHOW 29SPSHOW 69
SPSHOW 30SPSHOW 70SPSHOW 31SPSHOW 71
SPSHOW 32SPSHOW 72SPSHOW 33SPSHOW 73
SPSHOW 34SPSHOW 74SPSHOW 35SPSHOW 75
SPSHOW 36SPSHOW 76SPSHOW 37SPSHOW 77
SPSHOW 38SPSHOW 78SPSHOW 39SPSHOW 79
SpriteSz_16=1
SPLINK 40,0,31SPLINK 41,1,31SPLINK 42,2,31SPLINK 43,3,31
SPLINK 44,4,31SPLINK 45,5,31SPLINK 46,6,31SPLINK 47,7,31
SPLINK 48,8,31SPLINK 49,9,31SPLINK 50,10,31SPLINK 51,11,31
SPLINK 52,12,31SPLINK 53,13,31SPLINK 54,14,31SPLINK 55,15,31
SPLINK 56,16,31SPLINK 57,17,31SPLINK 58,18,31SPLINK 59,19,31
SPLINK 60,20,31SPLINK 61,21,31SPLINK 62,22,31SPLINK 63,23,31
SPLINK 64,24,31SPLINK 65,25,31SPLINK 66,26,31SPLINK 67,27,31
SPLINK 68,28,31SPLINK 69,29,31SPLINK 70,30,31SPLINK 71,31,31
SPLINK 72,32,31SPLINK 73,33,31SPLINK 74,34,31SPLINK 75,35,31
SPLINK 76,36,31SPLINK 77,37,31SPLINK 78,38,31SPLINK 79,39,31
{CallBack$}

@LCDCx4
SPHIDE 0SPHIDE 40SPHIDE 1SPHIDE 41
SPHIDE 2SPHIDE 42SPHIDE 3SPHIDE 43
SPHIDE 4SPHIDE 44SPHIDE 5SPHIDE 45
SPHIDE 6SPHIDE 46SPHIDE 7SPHIDE 47
SPHIDE 8SPHIDE 48SPHIDE 9SPHIDE 49
SPHIDE 10SPHIDE 50SPHIDE 11SPHIDE 51
SPHIDE 12SPHIDE 52SPHIDE 13SPHIDE 53
SPHIDE 14SPHIDE 54SPHIDE 15SPHIDE 55
SPHIDE 16SPHIDE 56SPHIDE 17SPHIDE 57
SPHIDE 18SPHIDE 58SPHIDE 19SPHIDE 59
SPHIDE 20SPHIDE 60SPHIDE 21SPHIDE 61
SPHIDE 22SPHIDE 62SPHIDE 23SPHIDE 63
SPHIDE 24SPHIDE 64SPHIDE 25SPHIDE 65
SPHIDE 26SPHIDE 66SPHIDE 27SPHIDE 67
SPHIDE 28SPHIDE 68SPHIDE 29SPHIDE 69
SPHIDE 30SPHIDE 70SPHIDE 31SPHIDE 71
SPHIDE 32SPHIDE 72SPHIDE 33SPHIDE 73
SPHIDE 34SPHIDE 74SPHIDE 35SPHIDE 75
SPHIDE 36SPHIDE 76SPHIDE 37SPHIDE 77
SPHIDE 38SPHIDE 78SPHIDE 39SPHIDE 79
SpriteSz_16=1
SPLINK 40,0,31SPLINK 41,1,31SPLINK 42,2,31SPLINK 43,3,31
SPLINK 44,4,31SPLINK 45,5,31SPLINK 46,6,31SPLINK 47,7,31
SPLINK 48,8,31SPLINK 49,9,31SPLINK 50,10,31SPLINK 51,11,31
SPLINK 52,12,31SPLINK 53,13,31SPLINK 54,14,31SPLINK 55,15,31
SPLINK 56,16,31SPLINK 57,17,31SPLINK 58,18,31SPLINK 59,19,31
SPLINK 60,20,31SPLINK 61,21,31SPLINK 62,22,31SPLINK 63,23,31
SPLINK 64,24,31SPLINK 65,25,31SPLINK 66,26,31SPLINK 67,27,31
SPLINK 68,28,31SPLINK 69,29,31SPLINK 70,30,31SPLINK 71,31,31
SPLINK 72,32,31SPLINK 73,33,31SPLINK 74,34,31SPLINK 75,35,31
SPLINK 76,36,31SPLINK 77,37,31SPLINK 78,38,31SPLINK 79,39,31
{CallBack$}


: else 'not DisableObj% then


  Mem[I]=J

: LCDC_lbl0$ = ""
: FOR J=0 TO 254
:   PUSH LCDC_lbl0$,format$("@LC%d,",J)
: Next
: PUSH LCDC_lbl0$,"@LC255"

  ON J Goto {LCDC_lbl0$}

: FOR J=0 TO 255
: LCDC_Txt$=""
''    {format$("@LC%d",J)}
:   PUSH LCDC_Txt$,format$("@LC%d:",J)
:   IF J AND   1THEN
'      TSHOW 1BG_on=1
:IF(ENVTYPE()!=2)THEN
:     PUSH LCDC_Txt$,"TSHOW 1BG_on=1"
:ELSE
:     PUSH LCDC_Txt$,"BG_On=1"
:ENDIF
:   ELSE
'      THIDE 1BG_on=0
:IF(ENVTYPE()!=2)THEN
:     PUSH LCDC_Txt$,"THIDE 1BG_on=0"
:ELSE
:     PUSH LCDC_Txt$,"BG_On=0"
:ENDIF
:   ENDIF
:
:   IF J AND  8THEN
'      BG_TileMap=1
:     PUSH LCDC_Txt$,"BG_TileMap=1"
:   ELSE
'      BG_TileMap=0
:     PUSH LCDC_Txt$,"BG_TileMap=0"
:   ENDIF
:
:   IF J AND  16THEN
'      CommonTileData=1
:     PUSH LCDC_Txt$,"CommonTileData=1"
:   ELSE
'      CommonTileData=0
:     PUSH LCDC_Txt$,"CommonTileData=0"
:   ENDIF
:
:   IF J AND  32THEN
'      TSHOW 0SPSHOW 100WinOn=1
:IF(ENVTYPE()!=2)THEN
:     PUSH LCDC_Txt$,"TSHOW 0SPSHOW 100WinOn=1"
:ELSE
:     PUSH LCDC_Txt$,"WinOn=1"
:ENDIF
:   ELSE
'      THIDE 0SPHIDE 100WinOn=0
:IF(ENVTYPE()!=2)THEN
:     PUSH LCDC_Txt$,"THIDE 0SPHIDE 100WinOn=0"
:ELSE
:     PUSH LCDC_Txt$,"WinOn=0"
:ENDIF
:   ENDIF
:
:   IF J AND  64THEN
'      WinTileMap=1
:     PUSH LCDC_Txt$,"WinTileMap=1"
:   ELSE
'      WinTileMap=0
:     PUSH LCDC_Txt$,"WinTileMap=0"
:   ENDIF
:
:   IF J AND 128THEN
'      PPU_On=1
:     PUSH LCDC_Txt$,"PPU_On=1"
:   ELSE
'      PPU_On=0Mem[#LY]=0PPU_Mode=1DMG_State0=0
:     PUSH LCDC_Txt$,format$("PPU_On=0Mem[%d]=0PPU_Mode=1DMG_State0=0",#LY)
:   ENDIF
:
'   {CallBack$}
:     PUSH LCDC_Txt$,CallBack$
{LCDC_Txt$}
: Next


: ENDIF'not DisableObj% then
'***********
'* PPU END *
'***********

'-----------------------------------



'#######################################################


@E
@ERAM
  ON ERAM_Access GOTO@ERAM_Access
    ON CartridgeType==2GOTO@CartridgeType_EQ_2
      Mem[(I AND &H1FF)+&HA000]=J
      {CallBack$}

  @CartridgeType_EQ_2
    Mem[I]=J

  @ERAM_Access
  {CallBack$}


@hPokeIJ_De:@IO
'ON I-&HFF00 Goto \
'\'ON I and &h00ffGoto \
'\'x0       x1       x2       x3       x4       x5       x6       x7       x8       x9       xA       xB       xC       xD       xE       xF
' @P1,     @REGULAR,@REGULAR,@REGULAR,@DIV,    @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ '0x
' @REGULAR,@NR11,   @NR12,   @NR13,   @NR14,   @REGULAR,@NR21,   @NR22,   @REGULAR,@NR24,   @NR30,   @NR31,   @NR32,   @REGULAR,@NR34,   @REGULAR,\ '1x
' @NR41,   @NR42,   @NR43,   @NR44,   @NR50,   @NR51,   @NR52,   @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ '2x
' @FF30,   @FF31,   @FF32,   @FF33,   @FF34,   @FF35,   @FF36,   @FF37,   @FF38,   @FF39,   @FF3A,   @FF3B,   @FF3C,   @FF3D,   @FF3E,   @FF3F,   \ '3x
' @LCDC,   @STAT,   @REGULAR,@REGULAR,@LY,     @REGULAR,@DMA,    @BGP,    @OBP0,   @OBP1,   @WY,     @WX,     @REGULAR,@REGULAR,@REGULAR,@REGULAR,\ '4x
' @FF50,   @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ '5x
' @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ '6x
' @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ '7x
' @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ '8x
' @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ '9x
' @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ 'Ax
' @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ 'Bx
' @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ 'Cx
' @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ 'Dx
' @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ 'Ex
' @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR   'Fx
ON I-&HFF00 Goto \
\'ON I and &h00ffGoto \
\'x0       x1       x2       x3       x4       x5       x6       x7       x8       x9       xA       xB       xC       xD       xE       xF
  @P1,     @REGULAR,@REGULAR,@REGULAR,@DIV,    @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ '0x
  @REGULAR,@NR11,   @NR12,   @NR13,   @NR14,   @REGULAR,@NR21,   @NR22,   @NR23,   @NR24,   @NR30,   @NR31,   @NR32,   @NR33,   @NR34,   @REGULAR,\ '1x
  @NR41,   @NR42,   @NR43,   @NR44,   @NR50,   @NR51,   @NR52,   @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ '2x
  @FF30,   @FF31,   @FF32,   @FF33,   @FF34,   @FF35,   @FF36,   @FF37,   @FF38,   @FF39,   @FF3A,   @FF3B,   @FF3C,   @FF3D,   @FF3E,   @FF3F,   \ '3x
  @LCDC,   @STAT,   @REGULAR,@REGULAR,@LY,     @REGULAR,@DMA,    @BGP,    @OBP0,   @OBP1,   @WY,     @WX,     @REGULAR,@REGULAR,@REGULAR,@REGULAR,\ '4x
  @FF50,   @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ '5x
  @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ '6x
  @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ '7x
  @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ '8x
  @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ '9x
  @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ 'Ax
  @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ 'Bx
  @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ 'Cx
  @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ 'Dx
  @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,\ 'Ex
  @REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR,@REGULAR   'Fx

@REGULAR
  Mem[I]=J
  {CallBack$}
'********
'* Misc *
'********

'Unload BootROM after bootup sequence
@FF50
  : IF SupportBootROM% THEN

  IF UseBootROM THEN \
    DisableBootROM

  : ENDIF'SupportBootROM%

  Mem[I]=J
  {CallBack$}

@P1
'::::::::::::::::::::::::::::::::::::::::::
: IF InputDevice$=="CONTROLLER" THEN
'::::::::::::::::::::::::::::::::::::::::::

: IF    (#HWVer$=="SGB")||(#HWVer$=="SGB2")THEN
'   IF(SFC_PacketTransfer)&&(J AND &H30)&&((J AND &H30)!=&H30)THEN
    IF(SFC_PacketTransfer)&&((J AND &H30)!=&H00)THEN
      SFC_Packet=SFC_Packet*2+((J AND &H30)==&H10)
      SFC_PacketCount=SFC_PacketCount+1
      IF(SFC_PacketCount AND 7)==0THEN
        SFC_Packet=(SFC_Packet AND 15)*16+(SFC_Packet DIV 16)
        PUSH SFC_Packets,SFC_Packet
        IF(SFC_PacketCount==8)THEN
          SFC_PacketCommand = (SFC_Packet DIV  8)AND &H1F
          ON(SFC_PacketCommand)GOTO@C_PAL01',@C_PAL23,@C_PAL03,@C_PAL12
          SFC_PacketLength  =  SFC_Packet AND  7
            COLOR #C_CYAN
            ?FORMAT$("Command: %02X",SFC_PacketCommand)
            COLOR #C_YELLOW
            ?FORMAT$("Length:   %X", SFC_PacketLength)
            GOTO@SFC_PacketCommand_END
          @C_PAL01
          SFC_PacketLength  =  1'SFC_Packet AND  7
            COLOR #C_CYAN
            ?FORMAT$("Command: %02X",SFC_PacketCommand)
            COLOR #C_YELLOW
            ?FORMAT$("Length:   %X", SFC_PacketLength)
'           GOTO@SFC_PacketCommand_END
''''          @C_PAL23
''''          SFC_PacketLength  =  1'SFC_Packet AND  7
''''            COLOR #C_CYAN
''''            ?FORMAT$("Command: %02X",SFC_PacketCommand)
''''            COLOR #C_YELLOW
''''            ?FORMAT$("Length:   %X", SFC_PacketLength)
''''            GOTO@SFC_PacketCommand_END
''''          @C_PAL03
''''          SFC_PacketLength  =  1'SFC_Packet AND  7
''''            COLOR #C_CYAN
''''            ?FORMAT$("Command: %02X",SFC_PacketCommand)
''''            COLOR #C_YELLOW
''''            ?FORMAT$("Length:   %X", SFC_PacketLength)
''''            GOTO@SFC_PacketCommand_END
''''          @C_PAL12
''''          SFC_PacketLength  =  1'SFC_Packet AND  7
''''            COLOR #C_CYAN
''''            ?FORMAT$("Command: %02X",SFC_PacketCommand)
''''            COLOR #C_YELLOW
''''            ?FORMAT$("Length:   %X", SFC_PacketLength)
'''''           GOTO@SFC_PacketCommand_END
          @SFC_PacketCommand_END
        ELSEIF((SFC_PacketCount AND 256)>=128)THEN
          COLOR #C_MAGENTA
          ?FORMAT$("%02X ",SFC_Packet);
          ON(SFC_PacketCommand)GOTO@PAL01',@PAL23,@PAL03,@PAL12
            GOTO@SFC_PacketArgs_END
          @PAL01
            TMP%=RGB(0,0,SFC_Packets[&H1],SFC_Packets[&H2])
            BGPal [3] = RGB(\
              8 *  (TMP%          AND 31),\
              8 * ((TMP% DIV   32)AND 31),\
              8 * ((TMP% DIV 1024)AND 31))
            TMP%=RGB(0,0,SFC_Packets[&H3],SFC_Packets[&H4])
            BGPal [1] = RGB(\
              8 *  (TMP%          AND 31),\
              8 * ((TMP% DIV   32)AND 31),\
              8 * ((TMP% DIV 1024)AND 31))
            TMP%=RGB(0,0,SFC_Packets[&H5],SFC_Packets[&H6])
            BGPal [2] = RGB(\
              8 *  (TMP%          AND 31),\
              8 * ((TMP% DIV   32)AND 31),\
              8 * ((TMP% DIV 1024)AND 31))
            TMP%=RGB(0,0,SFC_Packets[&H7],SFC_Packets[&H8])
            BGPal [0] = RGB(\
              8 *  (TMP%          AND 31),\
              8 * ((TMP% DIV   32)AND 31),\
              8 * ((TMP% DIV 1024)AND 31))

'           OBPal0[0] = BGPal [0]
            TMP%=RGB(0,0,SFC_Packets[&H9],SFC_Packets[&HA])
            OBPal0[3] = RGB(\
              8 *  (TMP%          AND 31),\
              8 * ((TMP% DIV   32)AND 31),\
              8 * ((TMP% DIV 1024)AND 31))
            TMP%=RGB(0,0,SFC_Packets[&HB],SFC_Packets[&HC])
            OBPal0[1] = RGB(\
              8 *  (TMP%          AND 31),\
              8 * ((TMP% DIV   32)AND 31),\
              8 * ((TMP% DIV 1024)AND 31))
            TMP%=RGB(0,0,SFC_Packets[&HD],SFC_Packets[&HE])
            OBPal0[2] = RGB(\
              8 *  (TMP%          AND 31),\
              8 * ((TMP% DIV   32)AND 31),\
              8 * ((TMP% DIV 1024)AND 31))
'           GOTO@SFC_PacketArgs_END

''''          @PAL23
''''            TMP%=RGB(0,0,SFC_Packets[&H2],SFC_Packets[&H1])
''''            BGPal [0] = RGB(&H00,\
''''              8 *  (TMP%          AND 31),\
''''              8 * ((TMP% DIV   32)AND 31),\
''''              8 * ((TMP% DIV 1024)AND 31))
''''            TMP%=RGB(0,0,SFC_Packets[&H4],SFC_Packets[&H3])
''''            OBPal1[1] = RGB(\
''''              8 *  (TMP%          AND 31),\
''''              8 * ((TMP% DIV   32)AND 31),\
''''              8 * ((TMP% DIV 1024)AND 31))
''''            TMP%=RGB(0,0,SFC_Packets[&H6],SFC_Packets[&H5])
''''            OBPal1[2] = RGB(\
''''              8 *  (TMP%          AND 31),\
''''              8 * ((TMP% DIV   32)AND 31),\
''''              8 * ((TMP% DIV 1024)AND 31))
''''            TMP%=RGB(0,0,SFC_Packets[&H8],SFC_Packets[&H7])
''''            OBPal1[3] = RGB(\
''''              8 *  (TMP%          AND 31),\
''''              8 * ((TMP% DIV   32)AND 31),\
''''              8 * ((TMP% DIV 1024)AND 31))
''''
'''''           OBPal1[0] = BGPal [0]
''''            GOTO@SFC_PacketArgs_END
''''
''''          @PAL03
''''            TMP%=RGB(0,0,SFC_Packets[&H2],SFC_Packets[&H1])
''''            BGPal [0] = RGB(&H00,\
''''              8 *  (TMP%          AND 31),\
''''              8 * ((TMP% DIV   32)AND 31),\
''''              8 * ((TMP% DIV 1024)AND 31))
''''            TMP%=RGB(0,0,SFC_Packets[&H4],SFC_Packets[&H3])
''''            BGPal [1] = RGB(\
''''              8 *  (TMP%          AND 31),\
''''              8 * ((TMP% DIV   32)AND 31),\
''''              8 * ((TMP% DIV 1024)AND 31))
''''            TMP%=RGB(0,0,SFC_Packets[&H6],SFC_Packets[&H5])
''''            BGPal [2] = RGB(\
''''              8 *  (TMP%          AND 31),\
''''              8 * ((TMP% DIV   32)AND 31),\
''''              8 * ((TMP% DIV 1024)AND 31))
''''            TMP%=RGB(0,0,SFC_Packets[&H8],SFC_Packets[&H7])
''''            BGPal [3] = RGB(\
''''              8 *  (TMP%          AND 31),\
''''              8 * ((TMP% DIV   32)AND 31),\
''''              8 * ((TMP% DIV 1024)AND 31))
''''            GOTO@SFC_PacketArgs_END
''''
''''          @PAL12
''''            TMP%=RGB(0,0,SFC_Packets[&H2],SFC_Packets[&H1])
''''            BGPal [0] = RGB(&H00,\
''''              8 *  (TMP%          AND 31),\
''''              8 * ((TMP% DIV   32)AND 31),\
''''              8 * ((TMP% DIV 1024)AND 31))
''''            TMP%=RGB(0,0,SFC_Packets[&H4],SFC_Packets[&H3])
''''            OBPal0[1] = RGB(\
''''              8 *  (TMP%          AND 31),\
''''              8 * ((TMP% DIV   32)AND 31),\
''''              8 * ((TMP% DIV 1024)AND 31))
''''            TMP%=RGB(0,0,SFC_Packets[&H6],SFC_Packets[&H5])
''''            OBPal0[2] = RGB(\
''''              8 *  (TMP%          AND 31),\
''''              8 * ((TMP% DIV   32)AND 31),\
''''              8 * ((TMP% DIV 1024)AND 31))
''''            TMP%=RGB(0,0,SFC_Packets[&H8],SFC_Packets[&H7])
''''            OBPal0[3] = RGB(\
''''              8 *  (TMP%          AND 31),\
''''              8 * ((TMP% DIV   32)AND 31),\
''''              8 * ((TMP% DIV 1024)AND 31))
''''
'''''           OBPal1[0] = BGPal [0]
''''            TMP%=RGB(0,0,SFC_Packets[&HA],SFC_Packets[&H9])
''''            OBPal1[1] = RGB(\
''''              8 *  (TMP%          AND 31),\
''''              8 * ((TMP% DIV   32)AND 31),\
''''              8 * ((TMP% DIV 1024)AND 31))
''''            TMP%=RGB(0,0,SFC_Packets[&HC],SFC_Packets[&HB])
''''            OBPal1[2] = RGB(\
''''              8 *  (TMP%          AND 31),\
''''              8 * ((TMP% DIV   32)AND 31),\
''''              8 * ((TMP% DIV 1024)AND 31))
''''            TMP%=RGB(0,0,SFC_Packets[&HE],SFC_Packets[&HD])
''''            OBPal1[3] = RGB(\
''''              8 *  (TMP%          AND 31),\
''''              8 * ((TMP% DIV   32)AND 31),\
''''              8 * ((TMP% DIV 1024)AND 31))
'''''           GOTO@SFC_PacketArgs_END

          @SFC_PacketArgs_END
            RESIZE SFC_Packets,0
' GFILL   0,   0, 255, 255, BGPal[0] OR &h0ff_00_00_00
' BACKColor BGPal[0]
          IF(SFC_PacketCount)>(SFC_PacketLength*128)THEN
          ?CHR$(10)
            SFC_PacketTransfer =    0
            SFC_PacketCount    =    0
            SFC_PacketCommand  = &H20
          ENDIF
        ELSE
          COLOR #C_MAGENTA
          ?FORMAT$("%02X ",SFC_Packet);
        ENDIF
        SFC_Packet = 0
      ENDIF
      Mem[#P1]=J AND &H30
      {CallBack$}

    ELSE '(SFC_PacketTransfer)THEN
: ENDIF'(#HWVer$=="SGB")

  'Get Button inputs
' ON J AND &H10GOTO@J_AND_x10_P1
  ON(J AND &H30)DIV 16 GOTO@J_AND_x30_x00_P1,@J_AND_x30_x10_P1,@J_AND_x30_x20_P1,@J_AND_x30_x30_P1
  @J_AND_x30_x10_P1
    Mem[#P1]=JOYP0[Button(0)AND &HFF]
    {CallBack$}

  'Get directional inputs
' @J_AND_x10_P1
  @J_AND_x30_x20_P1
'   ON J AND &H20GOTO@J_AND_x20_P1

'::::::::::::::::::::::::::::::::::::::::::
    : IF DirectionMode$=="BUTTONS" THEN
'::::::::::::::::::::::::::::::::::::::::::
      Mem[#P1]=JOYP1[Button(0)AND &HFF]

'::::::::::::::::::::::::::::::::::::::::::
    : ELSEIF DirectionMode$=="STICK" THEN
'::::::::::::::::::::::::::::::::::::::::::
      VAR StickX,StickY
      Stick 0 OUT StickX,StickY
      Mem[#P1]=(StickX < 0.5) + (StickX > -0.5) * 2 + (StickY > -0.5) * 4 + (StickY < 0.5) * 8

'::::::::::::::::::::::::::::::::::::::::::
    : ENDIF' DirectionMode$
'::::::::::::::::::::::::::::::::::::::::::
      {CallBack$}

' @J_AND_x20_P1
: IF    (#HWVer$=="SGB")||(#HWVer$=="SGB2")THEN
'   ON J AND &H30GOTO@J_AND_x30_P1
      SFC_PacketTransfer=1
' @J_AND_x30_P1
      Mem[#P1]=J AND &H30
      {CallBack$}
    ENDIF'(SFC_PacketTransfer)THEN
: ELSE '(#HWVer$=="SGB")
      Mem[#P1]=J AND &H30
      {CallBack$}
: ENDIF'(#HWVer$=="SGB")
  @J_AND_x30_x00_P1
  @J_AND_x30_x30_P1
      Mem[#P1]=255'J
      {CallBack$}



'::::::::::::::::::::::::::::::::::::::::::
: ELSEIF InputDevice$=="KEYBOARD" THEN
'::::::::::::::::::::::::::::::::::::::::::


  'Get directional inputs
  ON J AND &H10GOTO@J_AND_x10_P1
'   Mem[#P1]=JOYP0[Asc(InKey$()+CHR$(0))AND &HFF]
    Mem[#P1]=JOYP0[Key%]
    {CallBack$}

  'Get Button inputs
  @J_AND_x10_P1
    ON J AND &H20GOTO@J_AND_x20_P1
'     Mem[#P1]=JOYP1[Asc(InKey$()+CHR$(0))AND &HFF]
      Mem[#P1]=JOYP1[Key%]
      {CallBack$}

  @J_AND_x20_P1
      Mem[#P1]=J AND &H30
      {CallBack$}


: ENDIF'InputDevice$



'#######################################################


'*********
'* Timer *
'*********

@DIV
  'Writing resets divider
  Mem[I]=0
  {CallBack$}

@TAC
  Mem[I]=J AND 7
  {CallBack$}

'*************
'* Timer END *
'*************

'-----------------------------------



'#######################################################


:ApuMem CallBack$
':ApuMem "PUSH AUDIO_OUT$,FORMAT$("+#DQ+"%04X:%02X"+#DQ+"+#CR,I,J):"+CallBack$
: END

'DIM AUDIO_OUT$=""



'#######################################################


DEF DMG_Reset
  DMG_A=255DMG_F=255
  DMG_B=255DMG_C=255
  DMG_D=255DMG_E=255
  DMG_H=255DMG_L=255

  DMG_PC=&h0000
  DMG_SP=&HFFff

  DMG_INTF  =0
  DMG_State0=0
  DMG_HALT  =#FALSE
END

'#######################################################

DEF DMG_ResetInit
for i=&h8000 to &HFFffMem[i]=0Next

: IF SupportBootROM% THEN
  SkipBootROM=0
: ENDIF'SupportBootROM%


: IF(#HWVer$!="CGB")&&(#HWVer$!="AGB")THEN
:   IF AttemptSpoofCGB% THEN
   DMG_A=&H11      DMG_F=&H80      DMG_B=&H00      DMG_C=&H00
   DMG_D=&HFF      DMG_E=&H56      DMG_H=&H00      DMG_L=&H0D
   Mem[&HFF00]=&HCFMem[&HFF01]=&H00Mem[&HFF02]=&H7EMem[&HFF04]=&H18
   Mem[&HFF05]=&H00Mem[&HFF06]=&H00Mem[&HFF07]=&HF8Mem[&HFF0F]=&HE1
   Mem[&HFF10]=&H80Mem[&HFF11]=&HBFMem[&HFF12]=&HF3Mem[&HFF13]=&HFF
   Mem[&HFF14]=&H07Mem[&HFF24]=&H77Mem[&HFF40]=&H91Mem[&HFF44]=&H91
:   ELSE 'AttemptSpoofCGB%
:     IF    (#HWVer$=="DMG0")THEN
   DMG_A=&H01      DMG_F=&H00      DMG_B=&HFF      DMG_C=&H13
   DMG_D=&H00      DMG_E=&HC1      DMG_H=&H84      DMG_L=&H03
   Mem[&HFF00]=&HCFMem[&HFF01]=&H00Mem[&HFF02]=&H7EMem[&HFF04]=&H18
   Mem[&HFF05]=&H00Mem[&HFF06]=&H00Mem[&HFF07]=&HF8Mem[&HFF0F]=&HE1
   Mem[&HFF10]=&H80Mem[&HFF11]=&HBFMem[&HFF12]=&HF3Mem[&HFF13]=&HFF
   Mem[&HFF14]=&H07Mem[&HFF24]=&H77Mem[&HFF40]=&H91Mem[&HFF44]=&H91
:     ELSEIF(#HWVer$=="DMG" )THEN
   DMG_A=&H01      DMG_F=&H80      DMG_B=&H00      DMG_C=&H13
   DMG_D=&H00      DMG_E=&HD8      DMG_H=&H01      DMG_L=&H4D
   Mem[&HFF00]=&HCFMem[&HFF01]=&H00Mem[&HFF02]=&H7EMem[&HFF04]=&H18
   Mem[&HFF05]=&H00Mem[&HFF06]=&H00Mem[&HFF07]=&HF8Mem[&HFF0F]=&HE1
   Mem[&HFF10]=&H80Mem[&HFF11]=&HBFMem[&HFF12]=&HF3Mem[&HFF13]=&HFF
   Mem[&HFF14]=&H07Mem[&HFF24]=&H77Mem[&HFF40]=&H91Mem[&HFF44]=&H91
:     ELSEIF(#HWVer$=="MGB" )THEN
   DMG_A=&HFF      DMG_F=&H80      DMG_B=&H00      DMG_C=&H13
   DMG_D=&H00      DMG_E=&HD8      DMG_H=&H01      DMG_L=&H4D
   Mem[&HFF00]=&HCFMem[&HFF01]=&H00Mem[&HFF02]=&H7EMem[&HFF04]=&H18
   Mem[&HFF05]=&H00Mem[&HFF06]=&H00Mem[&HFF07]=&HF8Mem[&HFF0F]=&HE1
   Mem[&HFF10]=&H80Mem[&HFF11]=&HBFMem[&HFF12]=&HF3Mem[&HFF13]=&HFF
   Mem[&HFF14]=&H07Mem[&HFF24]=&H77Mem[&HFF40]=&H91Mem[&HFF44]=&H91

:     ELSEIF(#HWVer$=="SGB" )THEN
   DMG_A=&H01      DMG_F=&H00      DMG_B=&H00      DMG_C=&H14
   DMG_D=&H00      DMG_E=&H00      DMG_H=&HC0      DMG_L=&H60
   Mem[&HFF00]=&HC7Mem[&HFF01]=&H00Mem[&HFF02]=&H7EMem[&HFF04]=&H18
   Mem[&HFF05]=&H00Mem[&HFF06]=&H00Mem[&HFF07]=&HF8Mem[&HFF0F]=&HE1
   Mem[&HFF10]=&H80Mem[&HFF11]=&HBFMem[&HFF12]=&HF3Mem[&HFF13]=&HFF
   Mem[&HFF14]=&H07Mem[&HFF24]=&H77Mem[&HFF40]=&H91Mem[&HFF44]=&H91
:     ELSEIF(#HWVer$=="SGB2")THEN
   DMG_A=&HFF      DMG_F=&H00      DMG_B=&H00      DMG_C=&H14
   DMG_D=&H00      DMG_E=&H00      DMG_H=&HC0      DMG_L=&H60
   Mem[&HFF00]=&HC7Mem[&HFF01]=&H00Mem[&HFF02]=&H7EMem[&HFF04]=&H18
   Mem[&HFF05]=&H00Mem[&HFF06]=&H00Mem[&HFF07]=&HF8Mem[&HFF0F]=&HE1
   Mem[&HFF10]=&H80Mem[&HFF11]=&HBFMem[&HFF12]=&HF3Mem[&HFF13]=&HFF
   Mem[&HFF14]=&H07Mem[&HFF24]=&H77Mem[&HFF40]=&H91Mem[&HFF44]=&H91

:     ELSE'(#HWVer$)
   DMG_A=&H01      DMG_F=&H60      DMG_B=&HFF      DMG_C=&H13
   DMG_D=&H00      DMG_E=&HC1      DMG_H=&H28      DMG_L=&H0F
   Mem[&HFF00]=&HCFMem[&HFF01]=&H00Mem[&HFF02]=&H7EMem[&HFF04]=&H18
   Mem[&HFF05]=&H00Mem[&HFF06]=&H00Mem[&HFF07]=&HF8Mem[&HFF0F]=&HE1
   Mem[&HFF10]=&H80Mem[&HFF11]=&HBFMem[&HFF12]=&HF3Mem[&HFF13]=&HFF
   Mem[&HFF14]=&H07Mem[&HFF24]=&H77Mem[&HFF40]=&H91Mem[&HFF44]=&H91
:     ENDIF'(#HWVer$)
:   ENDIF'AttemptSpoofCGB%
: ELSE '(#HWVer$!="CGB")
:     IF    (#HWVer$=="CGB")THEN
   DMG_A=&H11      DMG_F=&H80      DMG_B=&H00      DMG_C=&H00
   DMG_D=&HFF      DMG_E=&H56      DMG_H=&H00      DMG_L=&H0D
   Mem[&HFF00]=&HCFMem[&HFF01]=&H00Mem[&HFF02]=&H7EMem[&HFF04]=&H18
   Mem[&HFF05]=&H00Mem[&HFF06]=&H00Mem[&HFF07]=&HF8Mem[&HFF0F]=&HE1
   Mem[&HFF10]=&H80Mem[&HFF11]=&HBFMem[&HFF12]=&HF3Mem[&HFF13]=&HFF
   Mem[&HFF14]=&H07Mem[&HFF24]=&H77Mem[&HFF40]=&H91Mem[&HFF44]=&H91
:     ELSEIF(#HWVer$=="AGB" )THEN
   DMG_A=&H11      DMG_F=&H00      DMG_B=&H01      DMG_C=&H00
   DMG_D=&HFF      DMG_E=&H56      DMG_H=&H00      DMG_L=&H0D
   Mem[&HFF00]=&HCFMem[&HFF01]=&H00Mem[&HFF02]=&H7EMem[&HFF04]=&H18
   Mem[&HFF05]=&H00Mem[&HFF06]=&H00Mem[&HFF07]=&HF8Mem[&HFF0F]=&HE1
   Mem[&HFF10]=&H80Mem[&HFF11]=&HBFMem[&HFF12]=&HF3Mem[&HFF13]=&HFF
   Mem[&HFF14]=&H07Mem[&HFF24]=&H77Mem[&HFF40]=&H91Mem[&HFF44]=&H91
:     ENDIF'(#HWVer$)
: ENDIF'(#HWVer$!="CGB")

DMG_PC=&H0100   DMG_SP=&HFFFE   DMG_INTF=0     DMG_State0=136
PPU_Mode=1      PPU_On=1        'Mem[&H8010]=&HF0Mem[&H8014]=&HFC
'Mem[&H8018]=&HFCMem[&H801C]=&HF3Mem[&H8020]=&H3CMem[&H8024]=&H3C
'Mem[&H8028]=&H3CMem[&H802C]=&H3CMem[&H8030]=&HF0Mem[&H8034]=&HF0
'Mem[&H803C]=&HF3Mem[&H804C]=&HCFMem[&H8054]=&H0FMem[&H8058]=&H3F
'Mem[&H805C]=&H0FMem[&H8068]=&HC0Mem[&H806C]=&H0FMem[&H807C]=&HF0
'Mem[&H808C]=&HF3Mem[&H809C]=&HC0Mem[&H80A0]=&H03Mem[&H80A4]=&H03
'Mem[&H80A8]=&H03Mem[&H80AC]=&HFFMem[&H80B0]=&HC0Mem[&H80B4]=&HC0
'Mem[&H80B8]=&HC0Mem[&H80BC]=&HC3Mem[&H80CC]=&HFCMem[&H80D0]=&HF3
'Mem[&H80D4]=&HF0Mem[&H80D8]=&HF0Mem[&H80DC]=&HF0Mem[&H80E0]=&H3C
'Mem[&H80E4]=&HFCMem[&H80E8]=&HFCMem[&H80EC]=&H3CMem[&H80F0]=&HF3
'Mem[&H80F4]=&HF3Mem[&H80F8]=&HF3Mem[&H80FC]=&HF3Mem[&H8100]=&HF3
'Mem[&H8104]=&HC3Mem[&H8108]=&HC3Mem[&H810C]=&HC3Mem[&H8110]=&HCF
'Mem[&H8114]=&HCFMem[&H8118]=&HCFMem[&H811C]=&HCFMem[&H8120]=&H3C
'Mem[&H8124]=&H3FMem[&H8128]=&H3CMem[&H812C]=&H0FMem[&H8130]=&H3C
'Mem[&H8134]=&HFCMem[&H813C]=&HFCMem[&H8140]=&HFCMem[&H8144]=&HF0
'Mem[&H8148]=&HF0Mem[&H814C]=&HF0Mem[&H8150]=&HF3Mem[&H8154]=&HF3
'Mem[&H8158]=&HF3Mem[&H815C]=&HF0Mem[&H8160]=&HC3Mem[&H8164]=&HC3
'Mem[&H8168]=&HC3Mem[&H816C]=&HFFMem[&H8170]=&HCFMem[&H8174]=&HCF
'Mem[&H8178]=&HCFMem[&H817C]=&HC3Mem[&H8180]=&H0FMem[&H8184]=&H0F
'Mem[&H8188]=&H0FMem[&H818C]=&HFCMem[&H8190]=&H3CMem[&H8194]=&HB9
'Mem[&H8198]=&HB9Mem[&H819C]=&H42Mem[&H9904]=&H01Mem[&H9908]=&H05
'Mem[&H990C]=&H09Mem[&H9910]=&H19Mem[&H9924]=&H0DMem[&H9928]=&H11
'Mem[&H992C]=&H15
'Mem[&HFF00]=&HCFMem[&HFF01]=&H00Mem[&HFF02]=&H7EMem[&HFF04]=&H18
''Mem[&HFF04]=&H6C
'Mem[&HFF05]=&H00Mem[&HFF06]=&H00Mem[&HFF07]=&HF8Mem[&HFF0F]=&HE1
'Mem[&HFF10]=&H80Mem[&HFF11]=&HBFMem[&HFF12]=&HF3Mem[&HFF13]=&HFF
'Mem[&HFF14]=&H07Mem[&HFF24]=&H77Mem[&HFF40]=&H91Mem[&HFF44]=&H91


: IF SupportBootROM% THEN
  SkipBootROM = 0
  DisableBootROM
: ENDIF'SupportBootROM%


Mem[&HFFFC]=&H2E
IF(CHKFILE("GRP:INIT.grp"))THEN
  loadg "INIT.grp", 4
ENDIF
END


:DEF FPS_PerfEmuMenu
''''    if Button(0,#B_L1)then
''''
''''''''      New_ROM_Bank = &h10
'''''''':     Switch_ROM_Bank
''''''''
''''''''    ' CALL FUNC
''''''''      RGB DMG_PC OUT,Mem[DMG_SP-1],Mem[DMG_SP-2]
''''''''      DMG_SP=DMG_SP-2
''''''''      DMG_PC=&h61db  '{A16()}
''''''''      DMG_State0=DMG_State0+12
''''
''''      New_ERAM_Bank = &h1
'''':     Switch_ERAM_Bank
''''
'''''     Mem[&hd005] = 0
'''''     Mem[&hd0d1] = &HFF
''''
''''      WHILE Button(0,#B_L1) wend
''''
''''    ENDIF

'IF(Mem[&h45B9]==&h21)THEN Mem[&h45B9] = &hFA

    if Button(0,#B_R1)then GoSub@MenuGUI
:IF UseDebugger THEN
    if Button(0,#B_R2)then GoSub@DebugGUI
:ENDIF'UseDebugger

    if Button(0,#B_L1)then \
  TLAYER  #BGScreen,  0
    if Button(0,#B_L2)then \
  TLAYER  #BGScreen,  #BGLayer

: IF InputDevice$=="KEYBOARD" THEN
    if(KB_Key$=="")then
      Key% = 0
      KB_Key$ = InKey$()*8
    else
      Key% = Asc(pop(KB_Key$))AND&HFF
    ENDIF

'   KB_Key$ = InKey$()
'
'   if(KB_Key$=="")then          \
'     Key% = 0                   \
'   else                         \
'     Key% = Asc(KB_Key$)AND&HFF

: ENDIF'InputDevice$

'   PPU_Mode=#PPUMode_OAM
    PPU_Mode=2

    IF Mem[#STAT]AND 32THEN \
      Mem[#IF]=Mem[#IF]OR&b00010

    Mem[#LY] = 0
'   PerfCnt%={format$("%f",#PERF)}/PERFEND(0)
'   PerfCnt%={str$(#PERF)}/PERFEND(0)
    PerfCnt%=PerfCnt%+{str$(#PERF)}/PERFEND(0)

:IF Enbl_CPU_Limiter% THEN
:  CASE(IndicatorStyle$)
:  WHEN("Rate%"):
     IF PerfCnt%>=100*VSync_Every% THEN
       PerfCnt%=100*VSync_Every%
:  WHEN("FPS#"):
     IF PerfCnt%>=60*VSync_Every% THEN
       PerfCnt%=60*VSync_Every%
:  WHEN("Gauge"):
     IF PerfCnt%>=100*VSync_Every% THEN
       PerfCnt%=100*VSync_Every%
:  WHEN("Arrow"):
     IF PerfCnt%>=100*VSync_Every% THEN
       PerfCnt%=100*VSync_Every%
:  WHEN("FadeHue"):
:  WHEN("FadeHueSubtle"):
'    IF PerfCnt%>={str$(120*VSync_Every%)} THEN
'      PerfCnt%={str$(120*VSync_Every%)}
     IF PerfCnt%>={str$(100*VSync_Every%)} THEN
       PerfCnt%={str$(100*VSync_Every%)}
:  OTHERWISE:
     IF PerfCnt%>=60*VSync_Every% THEN
       PerfCnt%=0
'      PerfCnt%=100*VSync_Every%
:  ENDCASE

:  IF ThrottleRate%!=0 THEN
'':    IF RecordAPUWrites% THEN
''       PRGINS "VSync "+{#DQ+str$(ThrottleRate%)+#DQ}
'':    ENDIF
       VSync ThrottleRate%
:  ELSE
'':    IF RecordAPUWrites% THEN
''       PRGINS "VSync"
'':    ENDIF
       VSync
:  ENDIF

: IF FrameDrop_Flash% THEN
     ELSE
       FADE &H3F7F3F00
       FADE #C_CLEAR,2
: ENDIF
     ENDIF
:ENDIF

:IF PrintEmuRate% THEN
:  CASE(IndicatorStyle$)
:  WHEN("Rate%"):
     Color HSV(2880.0-PerfCnt%,(255-PerfCnt%)and 255,255)
     Locate 0,0:TOFS 4,PerfCnt%,0:?format$("    %6.2f    ",PerfCnt%);
:
:  WHEN("FPS#"):
     Color HSV(2880.0-PerfCnt%,(255-PerfCnt%)and 255,255)
     Locate 0,0:TOFS 4,PerfCnt%,0:?format$("    %6.2f    ",PerfCnt%);
:
:  WHEN("Gauge"):
     Color HSV(2880.0-PerfCnt%,(255-PerfCnt%)and 255,255)
     Locate 0,0:?format$("%s            ",""*PerfCnt%);
:
:  WHEN("Arrow"):
     Color HSV(2880.0-PerfCnt%,(255-PerfCnt%)and 255,255)
     Locate 0,0:TOFS 4,PerfCnt%,0:?format$("    %6.2f    ",PerfCnt%);
:
:  WHEN("FadeHue"):
'    TM2%=((PerfCnt%<=115.0)||(PerfCnt%>=125.0))
     TM2%=((PerfCnt%<=95.0)||(PerfCnt%>=105.0))
     If(TM2%==0)Then
       COLOR #C_MAGENTA
       TCOLOR 2, HSV(PerfCnt%,255, 63)
       TM2%="  "
     ElseIf(PerfCnt%<=  1.0)Then
       COLOR #C_YELLOW
       TCOLOR 2, HSV(360,255,255)
       TM2%=" !! "
     ElseIf(PerfCnt%<= 45.0)Then
       COLOR &HFF7FFF00
       TCOLOR 2, HSV(PerfCnt%,255,191)
       TM2%="   "
     ElseIf(PerfCnt%<= 95.0)Then
       COLOR #C_YELLOW
       TCOLOR 2, HSV(PerfCnt%,255,127)
       TM2%="    "
     ElseIf(PerfCnt%>=155.0)Then
       COLOR #C_CYAN
       TCOLOR 2, HSV(240,255,191)
       TM2%="   "
     ElseIf(PerfCnt%>=105.0)Then
       COLOR #C_LIME
       TCOLOR 2, HSV(PerfCnt%,255,127)
       TM2%="    "
     ENDIF
     Locate 0,0?format$("%S %6.2F %% %S ",TM2%,PerfCnt%/1.2,TM2%);
:
:  WHEN("FadeHueSubtle"):
     TM2%=((PerfCnt%<=95.0)||(PerfCnt%>=105.0))
     If(TM2%==0)Then
       TCOLOR 2, #C_BLACK
     ElseIf(PerfCnt%<=95.0)Then
       TCOLOR 2, RGBF(1.0-{STR$(1/100)}*PerfCnt%,{STR$(1/200)}*PerfCnt%,0.0)
     ElseIf(PerfCnt%>=105.0)Then
       TCOLOR 2, RGBF(0.0,{STR$(1/4)}-{STR$(1/200)}*PerfCnt%,{STR$(1/20)}*PerfCnt%)
     ENDIF
:
:  OTHERWISE:
'    ?"Jalapeños";
:
:  ENDCASE

   'Reset performance counter
   PerfCnt%=0
:ENDIF

'   Call Sprite
    PERFBEGIN 0',#C_FUCHSIA

:END'FPS_PerfEmuMenu

'#######################################################


  '********
  '* Menu *
  '********


@USER_BREAK
' on BREAK Goto@USER_BREAK
  SNDStop
  Vibrate
  SaveV"DAT:"+Loaded_ROM$+".SAV",ERAM


@break_start
  DIALOG"Save the state before exiting?",1,"Exit",30

  if(RESULT()==-1)then
    DIALOG"Not saving. Are you sure?",3,"Exit"
    if(RESULT()!=1)Goto@break_start
    END

  else
    SaveState
  ENDIF


@USER_BREAK2
' SNDStop
  BGMPause
  Vibrate


@MenuGUI
' on BREAK  Goto @ContinueEmu
  BGMPause
  MenuGUI


@ContinueEmu
  WHILE(Button(0,#B_Any))WEND
  CLS 3
  CLS:RESUME

: DEF CONTAINS(S1$,S2$)
:   IF(INSTR(S1$,S2$)!=-1)THEN
:     RETURN #TRUE
:   ELSE
:     RETURN #TRUE
:   ENDIF
: END

: DEF CHK_COND(*)
:   ON(DEFARGC())GOTO@0,@1
:   @0
:     RETURN ""
:
:   @1
:   IF    (COND$=="")                THEN  RETURN ""
:   IF    (CONTAINS(COND$,"HELD"   ))THEN
:     RETURN ",0"
:   ELSEIF(CONTAINS(COND$,"PRESS"  ))THEN
:     RETURN ",1"
:   ELSEIF(CONTAINS(COND$,"BREPEAT"))THEN
:     RETURN ",2"
:   ELSEIF(CONTAINS(COND$,"RELEASE"))THEN
:     RETURN ",3"
:   ENDIF
: END

: DEF CHK_BTN$(COND$)
:   CASE(COND$[0]+COND$[1])
:   WHEN(" "):
:     RETURN FORMAT$("(BUTTON(%d,%d%s))",0,1<<#B_A,CHK_COND(COND$))
:   WHEN(" "):
:     RETURN FORMAT$("(BUTTON(%d,%d%s))",0,1<<#B_B,CHK_COND(COND$))
:   WHEN(" "):
:     RETURN FORMAT$("(BUTTON(%d,%d%s))",0,1<<#B_X,CHK_COND(COND$))
:   WHEN(" "):
:     RETURN FORMAT$("(BUTTON(%d,%d%s))",0,1<<#B_Y,CHK_COND(COND$))
:
:   WHEN(""):
:     RETURN FORMAT$("(BUTTON(%d,%d%s))",0,1<<#B_LUP,   CHK_COND(COND$))
:   WHEN(""):
:     RETURN FORMAT$("(BUTTON(%d,%d%s))",0,1<<#B_LDOWN, CHK_COND(COND$))
:   WHEN(""):
:     RETURN FORMAT$("(BUTTON(%d,%d%s))",0,1<<#B_LLEFT, CHK_COND(COND$))
:   WHEN(""):
:     RETURN FORMAT$("(BUTTON(%d,%d%s))",0,1<<#B_LRIGHT,CHK_COND(COND$))
:
:   WHEN(" "):WHEN("1"):
:     RETURN FORMAT$("(BUTTON(%d,%d%s))",0,1<<#B_L1,CHK_COND(COND$))
:   WHEN("2"):
:     RETURN FORMAT$("(BUTTON(%d,%d%s))",0,1<<#B_L2,CHK_COND(COND$))
:   WHEN(" "):WHEN("1"):
:     RETURN FORMAT$("(BUTTON(%d,%d%s))",0,1<<#B_R1,CHK_COND(COND$))
:   WHEN("2"):
:     RETURN FORMAT$("(BUTTON(%d,%d%s))",0,1<<#B_R2,CHK_COND(COND$))
:   ENDCASE
: END

DEF MemTrainer * OUT *
CLS
?"  Start Search"
?"  Cont  Search"
?"  Results"
  WHILE NOT {CHK_BTN$(" RELEASE")} WEND
@StartSearch
@ContSearch
@Results
END


:IF GUI_Ver% == 1 THEN


'Menu v1
DEF MenuGUI
  var Entry
  var LogoLinesCount, I,J,read_
  var MenuEntriesCount,\
      cursor,   \
      KB_Key$,     \
      btn
  var PastCursor%
: IF(SysLanguage$=="JA")||(SysLanguage$=="ja")THEN
  var  FuriganaLen%,FuriganaOffs%
: ENDIF

  'Make sure the keyboard buffer is empty
  WHILE InKey$()!= "":WEND

  restore format$("@LOGO_%s",SysLanguage$)
  read    LogoLinesCount

  DIM lineX    [LogoLinesCount],\
      lineY    [LogoLinesCount],\
      lineCol  [LogoLinesCount],\
      lineText$[LogoLinesCount]

  for I=0to LogoLinesCount-1
    read lineX  [I],lineY    [I],\
         lineCol[I],lineText$[I]
  Next I

  restore format$("@MENU_ITEMS_%s",SysLanguage$)
  read    MenuEntriesCount

  DIM EntryPosX      [MenuEntriesCount],\
      EntryPosY      [MenuEntriesCount],\
      EntryColor     [MenuEntriesCount],\
: IF(SysLanguage$=="JA")||(SysLanguage$=="ja")THEN
'     FuriganaCnt%[MenuEntriesCount],\
'     FuriganaCol#[MenuEntriesCount],\
'     FuriganaSsz%[MenuEntriesCount],\
'     FuriganaDsz%[MenuEntriesCount],\
'     FuriganaTxt$[MenuEntriesCount],\
      FuriganaCnt%[0],\
      FuriganaCol#[0],\
      FuriganaTxt$[0],\
: ENDIF
      EntryText$     [MenuEntriesCount],\
      EntryDestLabel$[MenuEntriesCount]

''  for var Entry=0 to MenuEntriesCount-1
  for Entry=0 to MenuEntriesCount-1
    read EntryPosX      [Entry],EntryPosY [Entry],\
         EntryColor     [Entry],EntryText$[Entry],\
         EntryDestLabel$[Entry]
  Next Entry

: IF(SysLanguage$=="JA")||(SysLanguage$=="ja")THEN
  Restore@MENU_FURIG_JA
  for Entry=0 to MenuEntriesCount-1
'   read FuriganaTxt$ [Entry]
    read FuriganaLen%
'   FuriganaCnt%[Entry]=FuriganaLen%
    push FuriganaCnt%,FuriganaLen%
    for I=0 to FuriganaLen%-1
'     read FuriganaCol#[Entry*FuriganaLen%+I]
'     read FuriganaSsz%[Entry*FuriganaLen%+I]
'     read FuriganaDsz%[Entry*FuriganaLen%+I]
'     read FuriganaTxt$ [Entry*FuriganaLen%+I]
      read read_:push FuriganaCol#,read_
      read read_:push FuriganaTxt$,read_
    Next I
  Next Entry
: ENDIF

  SPSHOW  102
' LFilter 1,2,256
  TOFS 4,0,0

  Var TintR,TintG,TintB
  RGB #Tint Out TintR,TintG,TintB
  Var FacTint#,FacFade#

: IF(SysLanguage$=="JA")||(SysLanguage$=="ja")THEN
  TSCREEN 3, 8, 8
' TSCREEN 3,16,12
: ENDIF

@MenuLoop
loop
  for I=0to LogoLinesCount-1
: IF(SysLanguage$=="JA")||(SysLanguage$=="ja")THEN
: ELSE 
    Locate 3,lineX    [I]+1,\
             lineY    [I]+1
    Color  3,#C_NAVY
    TPrint 3,lineText$[I];

    Locate 3,lineX    [I],  \
             lineY    [I]
    Color  3,#C_NAVY
    TPrint 3,lineText$[I];
: ENDIF
    Locate   lineX    [I]+1,\
             lineY    [I]+1
    Color    #C_NAVY  AND &h7FFFFFFF
    Print    lineText$[I];

    Locate   lineX    [I],  \
             lineY    [I]
    Color    lineCol  [I]
    Print    lineText$[I];
  Next I


  PastCursor% = 0
  for I=0to MenuEntriesCount-1
    If(Cursor==I)Then
      Color  &HFFFFFF3F
      Locate EntryPosX [cursor]-4,\
             EntryPosY [cursor]

      Print  "";

      PastCursor% = 1
: IF(SysLanguage$=="JA")||(SysLanguage$=="ja")THEN
: ELSE 
      Locate 3,EntryPosX [I],\
               EntryPosY [I]+1
      Color  3,#C_BLUE
      TPrint 3,EntryText$[I];

      Locate 3,EntryPosX [I]-1,  \
               EntryPosY [I]
      Color  3,#C_BLUE
      TPrint 3,EntryText$[I];
: ENDIF

      Locate   EntryPosX [I],\
               EntryPosY [I]+1
      Color    #C_BLUE and &h7FFFFFFF
      Print    EntryText$[I];

      Locate   EntryPosX [I]-1,  \
               EntryPosY [I]
      Color    #C_Magenta or &HFF7F7F7F
      Print    EntryText$[I];

: IF(SysLanguage$=="JA")||(SysLanguage$=="ja")THEN
'     Locate 3,2*EntryPosX [I]-1,  \
'              2*EntryPosY [I]-1
'     TPrint 3,  FuriganaTxt$[I]
''      Locate 3,4/3*EntryPosX [I]+4/3*FuriganaCol#[I]-4/3*(FuriganaDsz%[I]-FuriganaSsz%[I])-1,  \
''               4/3*EntryPosY [I]-1
''      TPrint 3,  FuriganaTxt$[I]
      FuriganaOffs% = 0
      for J=0 to I-1
        FuriganaOffs%=FuriganaOffs%+FuriganaCnt%[J]
      Next J
      for J=0 to FuriganaCnt%[I]-1
'       Locate 3, (4/3*EntryPosX [I])\
'                +(4/3*FuriganaCol#[FuriganaOffs%+J])\
'                -(4/3*FuriganaDsz%[FuriganaOffs%+J]/FuriganaSsz%[FuriganaOffs%+J])\
'                - 1,  \
'                 (4/3*EntryPosY [I])-1
        Locate 3,  2*EntryPosX [I]\
                 + 2*FuriganaCol#[FuriganaOffs%+J]\
                 - 1,  \
                  (2*EntryPosY [I])-1
        TPrint 3,  FuriganaTxt$[FuriganaOffs%+J]
      Next J
      LOCATE 0,0?FuriganaOffs%
: ENDIF

      Continue
    ENDIF

: IF(SysLanguage$=="JA")||(SysLanguage$=="ja")THEN
: ELSE 
    Locate 3,EntryPosX [I]+1,\
             EntryPosY [I]+1 + PastCursor%
    Color  3,#C_NAVY
    TPrint 3,EntryText$[I];

    Locate 3,EntryPosX [I],  \
             EntryPosY [I] + PastCursor%
    Color  3,#C_NAVY
    TPrint 3,EntryText$[I];
: ENDIF

    Locate   EntryPosX [I]+1,\
             EntryPosY [I]+1 + PastCursor%
    Color    #C_NAVY  AND &h7FFFFFFF
    Print    EntryText$ [I];

    Locate   EntryPosX [I]-2,\
             EntryPosY [I] + PastCursor%
    Print    " ";

    Locate   EntryPosX [I],  \
             EntryPosY [I] + PastCursor%
    Color    EntryColor[I]
    Print    EntryText$[I];
  Next I

  btn=Button(0)

  if btn AND(1<<#b_B)Goto@ContinueEmu
  if btn AND(1<<#b_X)Goto@QuitEmu
' if btn AND(1<<#b_Y)then HEX_Viewer
  if btn AND(1<<#b_Y)Then SPFunc 0,@HEX_Viewer_Init
': IF IS_PKMN%() THEN
' if btn AND(1<<#b_L2)then PkMn_Tool
': ENDIF'IS_PKMN%()


  KB_Key$=InKey$()

  ' A
  if     KB_Key$==CHR$(&h0D)Goto EntryDestLabel$[cursor]

  ' UP
  if     KB_Key$==CHR$(&h1E)then
    cursor=cursor-1
  ' DOWN
  elseif KB_Key$==CHR$(&h1F)then
    cursor=cursor+1
  ENDIF

  if(cursor<0)then cursor=MenuEntriesCount-1

  cursor=cursor MOD MenuEntriesCount

''Color  &HFFFFFF3F
''Locate EntryPosX[cursor]-2,\
''       EntryPosY[cursor]
''
''Print  "";

  FacTint# = Abs(Sin(MainCnt()/32))
  FacFade# = 255 * (1.0-FacTint#)

  TColor 4, RGB \
  (             \
    TintR*FacTint#+FacFade#,\
    TintG*FacTint#+FacFade#,\
    TintB*FacTint#+FacFade# \
  )

  VSync
  Cls:Cls 3

ENDloop


@LoadROM
  if WarnBtn()==0Goto@ContinueEmu
  exec #_SLOT
' exec 2


@LoadERAM
  if WarnBtn()==0Goto@ContinueEmu
  LoadERAM
' Goto@HardReset
  Goto@MenuLoop


@SaveERAM
  SaveERAM
  Goto@MenuLoop


@SaveState
  SaveState
  Goto@MenuLoop


@LoadState
  ON Button(0,#B_R1) \
  Goto@V2,@V1
  @V2
    LoadState
    Goto@MenuLoop
  @V1
    OldLoadState
    Goto@MenuLoop


@SoftReset
  DMG_PC=256
  Goto@MenuLoop


@HardReset
  DMG_ResetInit
  Goto@MenuLoop


@ContinueEmu
  WHILE(Button(0,#B_Any))WEND
  CLS 3
'     TMP%=GTARGET()
'     GTARGET 2
'     GCLS 0
'     GTARGET TMP%
  CLS
' RESUME
  RETURN

@QuitEmu
  if WarnBtn()==0Goto@ContinueEmu
  SNDStop
  Vibrate
' LFilter 1,0
  CLS 3
  CLS
  TColor 4, #C_WHITE
  Color     #C_WHITE
'FOR I=0TO LAST(PRGSTR$)'  IF PRGSTR$[I]!=""THEN'    PRGINS PRGSTR$[I]''  ELSEIF(XREF%[I]==0)&&(VSPACE%[I]<&H8000)&&(VPAGE%[I]<ROM_Banks)THEN'''    PRGINS format$("%02x:%04x '  db 0x%02x",VPAGE%[I],VSPACE%[I],CartROM[VPAGE%[I]*&H4000+VSPACE%[I]])'''    PRGINS format$("'  db 0x%02x",CartROM[VPAGE%[I]*&H4000+VSPACE%[I]])''    PRGINS format$("'%02x",CartROM[VPAGE%[I]*&H4000+VSPACE%[I]])'  ENDIF'Next'            '{ PC : OPC|OP0|OP1|OP2 : CYTIME }[]'            SaveV format$("DAT:REPORT%06X",RND(&H1000000)),REPORT

'''': SaveAutoSave

  STOP  "Good bye :D"
  GOTO@MenuLoop


@PetitBreak
' ON BREAK GOTO@PETITBR
  WHILE(0==BUTTON(0,#B_RRIGHT,3))
    WEND
  CLS:CLS 3:COLOR #C_WHITE:TColor 4,#C_WHITE
  STOP"Enter ＂CONT＂ when done."
@PetitBreakL
  WHILE(0==BUTTON(0,#B_RRIGHT,2))
    IF(BUTTON(0,#B_RDOWN,2))THEN
      WHILE(0==BUTTON(0,#B_RDOWN,3))
        WEND
'     GOTO@MenuLoop
      RETURN
    ENDIF
  WEND
  GOTO@PetitBreakL



@MemTrainer
  MemTrainer

END


def WarnBtn()
  TMP% = DIALOG(\
    "WARNING!"+#LF+"There might be unsaved data. "+#LF+\
    "Do you wish to save before continueing?"+#LF+#LF+\
    "    Save SAV"+#LF+\
    "    Cancel"+#LF+\
    "    Continue without saving",&b1011,"Unsaved data")
  IF     TMP% AND  (1 << #B_A)  then
    SaveERAM
    return 1
  elseIF TMP% AND  (1 << #B_B)  then
    return 0
  elseIF TMP% AND  (1 << #B_X)  then
    return 1
  else
    return 0
  ENDIF
END

def WarnKB()
  DIALOG "WARNING!"                      + CHR$(13) + \
         "There might be unsaved data. " + CHR$(13) + \
         "Do you wish to save before continueing?",   \
         1,                                           \
         "Unsaved data"
  IF RESULT() == 1 then
    SaveERAM
    return 1
  else
    DIALOG "Really discard?", 1, "Unsaved data"
    IF RESULT() == 1 then
      return 1
    else
      return 0
    ENDIF
  ENDIF
END


''''''''''''''''
'    @brief    '
'              '
''''''''''''''''
COMMON \
def RESUME
  on BREAK Goto @MenuGUI
  Color   #C_YELLOW

  var ret
  SPHIDE  102
' LFilter 1, 0
  BGMCont

  DMG_emu -1
END


\\HEX_PKMN_TOOLS


:ELSE'GUI_Ver%


ENUM\
 #NULL   = -1,\
 #_EMPTY_LINE,\
 #WGT_TYPE_DECOR,\
 #WGT_TYPE_OPTIONS_COLUMN

'Menu v2
DEF MenuGUI * OUT *

  DIM MenuWidgets     = ARRAY$(0)
  DIM WidgetOffsets   = ARRAY%(0)
  DIM WidgetTypes     = ARRAY%(0)
  DIM ItemPositions   = ARRAY%(0)
  DIM ItemColors      = ARRAY%(0)
  DIM ItemLabels      = ARRAY$(0)
  DIM ItemBindings    = ARRAY$(0)

  VAR _wgt     = "",   \
      _type    = #NULL,\
      _x_pos   = #NULL,\
      _y_pos   = #NULL,\
      _color   = #NULL,\
      _label   = "",   \
      _binding = ""

  VAR N,I,J
  VAR CurOffs = 0

  Restore@MAIN_MENU_WIDGETS
  Loop
    Read _wgt
    IF(TYPEOF(_wgt)!=#T_STR)Then\
      Break

    PUSH MenuWidgets, _wgt
  EndLoop

  For N=0 TO LAST(MenuWidgets)
    PUSH WidgetOffsets, CurOffs

    Restore FORMAT$("@%S_%S",MenuWidgets[N], SysLanguage$)

    Read _type
    PUSH WidgetTypes, _type

    Read _x_pos, _y_pos
    Loop
      PUSH ItemPositions, _x_pos
      PUSH ItemPositions, _y_pos
      CurOffs=CurOffs+1

    @FromEmptyLine
      Read _color

      IF(_color==#NULL)Then
        PUSH ItemColors,   #NULL
        PUSH ItemLabels,   "-"
        PUSH ItemBindings, "-"
        BREAK

      ElseIF(_color==#_EMPTY_LINE)Then
        _y_pos=_y_pos+1
        Goto@FromEmptyLine
'       ItemPositions[LAST(ItemPositions)]=_y_pos
'       CONTINUE

      Else
        PUSH ItemColors,_color

        Read _label
        PUSH ItemLabels,_label

        IF(_type==#WGT_TYPE_DECOR)Then
          PUSH ItemBindings,"-"

        Else
          Read _binding
          PUSH ItemBindings,_binding
        ENDIF
      ENDIF

      _y_pos =_y_pos+1

    EndLoop
  Next N


  Var CursorX=ItemPositions[0]-2,\
      CursorY=ItemPositions[1]

  J=0
  Loop@MenuLoop
    CLS 4

    For N=0 TO LAST(MenuWidgets)
      CurOffs = WidgetOffsets[N]

      I = 0
      Loop
        IF(ItemLabels[CurOffs+I]=="-")Then\
          BREAK

        LOCATE   ItemPositions[(CurOffs+I)*2],\
                 ItemPositions[(CurOffs+I)*2+1]
        COLOR    ItemColors[CurOffs+I]
        TPRINT 4,ItemLabels[CurOffs+I];

        I = I + 1
      EndLoop
    Next N


    CursorX=ItemPositions[J*2]-2
    CursorY=ItemPositions[J*2+1]
    WHILE(ItemBindings[J]=="-")
      J=(J+1)Mod(LEN(ItemPositions)Div 2)
      CursorY=ItemPositions[J*2+1]
    Wend

    LOCATE CursorX,CursorY
    COLOR  #C_WHITE
    TPRINT 4,"";

    'Making sure the keyboard FIFO is cleared
    WHILE(INKEY$()!="")Wend
    VSYNC

    VAR _btn = Button(0)

    IF(_btn AND(1<<#B_B))GOTO@ContinueEmu_BIND
    IF(_btn AND(1<<#B_X))GOTO@QuitEmu_BIND
'   IF btn AND(1<<#b_Y)then HEX_Viewer
'   IF btn AND(1<<#b_Y)Then SPFunc 0,@HEX_Viewer_Init
': IF IS_PKMN%() THEN
'   IF btn AND(1<<#b_L2)then PkMn_Tool
': ENDIF'IS_PKMN%()

    Case(ASC(INKEY$()+CHR$(0)))
      When(&H1E):'Up
        Repeat
          J=J-1 IF(J<0)Then J=LAST(ItemPositions)Div 2
        Until(ItemBindings[J]!="-")

      When(&H1F):'Down
        Repeat
          J=(J+1)Mod(LEN(ItemPositions)Div 2)
        Until(ItemBindings[J]!="-")

      When(&H1D):'Left
        J=J-4 IF(J<0)Then J=LAST(ItemPositions)Div 2
        WHILE(ItemBindings[J]=="-")
          J=J-1 IF(J<0)Then J=LAST(ItemPositions)Div 2
        Wend

      When(&H1C):'Right
        J=(J+4)Mod(LEN(ItemPositions)Div 2)
        WHILE(ItemBindings[J]=="-")
          J=(J+1)Mod(LEN(ItemPositions)Div 2)
        Wend

      When(&H0D):'|RETURN
'       ?format$("%D:@%S_BIND",#_SLOT,ItemBindings[J])
        'Making sure the keyboard FIFO is cleared
        WHILE(INKEY$()!="")Wend
        GOTO format$("@%S_BIND",ItemBindings[J])

      When(&H08):'|BACKSPACE
        Return

    EndCase
  EndLoop


@LoadROM_BIND
  IF(WarnUnsaved()==0)\
    Goto@ContinueEmu_BIND
  exec #_SLOT
' exec 2


@LoadERAM_BIND
  IF(WarnUnsaved()==0)\
    Goto@ContinueEmu_BIND
  LoadERAM
' Goto@HardReset_BIND
  Goto@MenuLoop


@SaveERAM_BIND
  SaveERAM
  Goto@MenuLoop


@SaveState_BIND
  SaveState
  Goto@MenuLoop


@LoadState_BIND
  IF(Button(0,#B_R1))\
    Goto@DEPRECATED

  LoadState
  Goto@MenuLoop

@DEPRECATED
  OldLoadState
  Goto@MenuLoop


@SoftReset_BIND
  DMG_PC=256
  Goto@MenuLoop


@HardReset_BIND
  DMG_ResetInit
  Goto@MenuLoop


@ContinueEmu_BIND
  WHILE(Button(0,#B_Any))WEND
  CLS 3
'     TMP%=GTARGET()
'     GTARGET 2
'     GCLS 0
'     GTARGET TMP%
  CLS
' RESUME
  RETURN

@QuitEmu_BIND
  IF(WarnUnsaved()==0)\
    Goto@ContinueEmu_BIND
  SNDStop
  Vibrate
' LFilter 1,0
' CLS 3
' CLS
  TColor 4, #C_WHITE
  Color     #C_WHITE

  STOP

END'DEF MenuGUI


DEF WarnUnsaved()

      return 1


' ACLS 0,1,1
  CLS
' LFILTER 1,5,0.15,1.0,1.0
' XSCREEN 1280,720
  TSCREEN #FontType,#CharacterSize

  VAR Choice$ = ""
  T? 4, #LF;#LF;
  T? 4,"  [UNSAVED DATA*]!";#LF;
  T? 4,#LF;
  T? 4,"  Careful!";#LF;
  T? 4,"    There could be unsaved data.";#LF;
  T? 4,"    Do you wish to save before";#LF;
  T? 4,"    continuing?";#LF;
  T? 4,#LF;
  T? 4,"    ( In before you ask, no,";#LF;
  T? 4,"      you can't auto-enable this.";#LF;
  T? 4,"      Sorry... )";#LF;
  T? 4,#LF;
  T? 4,#LF;
  T? 4,"  [Y|y] Yes:  Save SAV    [Q|q] Quit: Continue W/O saving";#LF;
  T? 4,"  [N|n]  No:  Cancel";#LF

BEEP 0 'Beep
BEEP 2 'Square
VSYNC 12
BEEP 0 'Beep
BEEP 2 'Square
VSYNC 12
BEEP 0 'Beep
BEEP 2 'Square
VSYNC 20

  WHILE(INKEY$()!="")WEND
  VSYNC
  ?"  > ";
  WHILE(Choice$=="")Choice$=INKEY$()WEND
  ?Choice$;

  Case(Choice$)
    When"Y":When"y":'When"YES":When"Yes":When"yes":
      CALL"SaveERAM"
      return 1

    When"N":When"n":'When"NO":When"No":When"no":
      return 0

    When"Q":When"q":'When"QUIT":When"Quit":When"quit":
      return 1

    Otherwise:
      return 0
  EndCase
END


''''''''''''''''
'    @brief    '
'              '
''''''''''''''''
COMMON \
def RESUME
  on BREAK Goto @MenuGUI
  Color   #C_YELLOW

  var ret
  SPHIDE  102
' LFilter 1, 0
  BGMCont

  DMG_emu -1
END


:ENDIF'GUI_Ver%


'===============================================


:IF GUI_Ver% == 1 THEN


'Literal Labels for debugging
'===============================================
@LOGO_DB
'===============================================
'    # Total lines
DATA 7
'     X, Y,RGB Color,  TEXT
DATA 50, 5,&HFF3F3FFF,""
DATA 50, 6,&HFFFF3F3F,""
DATA 50, 7,&HFFFFFF3F,""
DATA 50, 8,&HFF3FFF3F,""
DATA 50, 9,&HFF3FFFFF,""
DATA 50,10,&HFF3F3FFF,""
DATA 50,11,&HFFFF1FFF,""

'-----------------------------------------------
@MENU_ITEMS_DB
'-----------------------------------------------
'    # Total menu items
DATA 10
'     X, Y,RGB Color,  NAME,           @LABEL FUNC
DATA 64,17,&HFF3FFFFF,"Resume",         @ContinueEmu
'DATA 64,45,&HFF3FFFFF,"Memory Trainer", @MemTrainer

DATA 64,20,&HFF3FFFFF,"Load State",     @LoadState
DATA 64,22,&HFF3FFFFF,"Save State",     @SaveState

DATA 64,25,&HFF3FFF3F,"Load ROM",       @LoadROM

DATA 64,29,&HFF3FFF3F,"Load ERAM",      @LoadERAM
DATA 64,31,&HFF3FFF3F,"Save ERAM",      @SaveERAM

DATA 64,34,&HFFFFFF3F,"Soft Reset",     @SoftReset
DATA 64,36,&HFFFF7F1F,"Hard Reset",     @HardReset

DATA 64,39,&HFFFF1F3F,"Exit",           @QuitEmu

DATA 56,14,&HFF3FFFFF,"PetitBreak",     @PetitBreak


:ELSE'GUI_Ver%


'===============================================
@UI_BINDINGS_DATA
'===============================================

'===============================================
@MAIN_MENU_WIDGETS
'===============================================
DATA "BG"
DATA "TABS"
DATA "LOGO"
DATA "MENU_ITEMS"

DATA #NULL

'-----------------------------------------------
@BG_DB
'-----------------------------------------------
DATA #WGT_TYPE_DECOR

'     X, Y
DATA  8, 1
'    RGB Color,  TEXT
DATA &HFFFF5F3F,""

DATA #NULL

'-----------------------------------------------
@TABS_DB
'-----------------------------------------------
DATA #WGT_TYPE_OPTIONS_COLUMN

'     X, Y
DATA  8, 1
'    RGB Color,  NAME,       @LABEL FUNC
DATA &HFFFF5F3F,"  Main",   "ContinueEmu"

DATA #NULL

'Literal Labels for debugging
'===============================================
@LOGO_DB
'===============================================
DATA #WGT_TYPE_DECOR

'     X, Y
DATA 50, 5

'    RGB Color,  TEXT
DATA &HFF3F3FFF,"#### [LOGO_LINE_0] ####"
DATA &HFFFF3F3F,"#### [LOGO_LINE_1] ####"
DATA &HFFFFFF3F,"#### [LOGO_LINE_2] ####"
DATA &HFF3FFF3F,"#### [LOGO_LINE_3] ####"
DATA &HFF3FFFFF,"#### [LOGO_LINE_4] ####"
DATA &HFF3F3FFF,"#### [LOGO_LINE_5] ####"
DATA &HFFFF1FFF,"######## [MOTD] #######"

DATA #NULL

'-----------------------------------------------
@MENU_ITEMS_DB
'-----------------------------------------------
DATA #WGT_TYPE_OPTIONS_COLUMN

'     X, Y
DATA 64,16
'    RGB Color,  NAME,             @LABEL FUNC
DATA &HFF3FFFFF,"ContinueEmu",   "ContinueEmu"
DATA #_EMPTY_LINE
DATA #_EMPTY_LINE
DATA #_EMPTY_LINE
DATA &HFF3FFFFF,"LoadState",     "LoadState"
DATA #_EMPTY_LINE
DATA &HFF3FFFFF,"SaveState",     "SaveState"
DATA #_EMPTY_LINE
DATA #_EMPTY_LINE
DATA #_EMPTY_LINE
DATA &HFF3FFF3F,"LoadROM",       "LoadROM"
DATA #_EMPTY_LINE
DATA #_EMPTY_LINE
DATA #_EMPTY_LINE
DATA &HFF3FFF3F,"LoadERAM",      "LoadERAM"
DATA #_EMPTY_LINE
DATA &HFF3FFF3F,"SaveERAM",      "SaveERAM"
DATA #_EMPTY_LINE
DATA #_EMPTY_LINE
DATA #_EMPTY_LINE
DATA &HFFFFFF3F,"SoftReset",     "SoftReset"
DATA #_EMPTY_LINE
DATA &HFFFF7F1F,"HardReset",     "HardReset"
DATA #_EMPTY_LINE
DATA #_EMPTY_LINE
DATA #_EMPTY_LINE
DATA &HFFFF1F3F,"QuitEmu",       "QuitEmu"

DATA #NULL


:ENDIF'GUI_Ver%


'Japanese - thanks to ku6dra
'===============================================
@LOGO_JA
'===============================================
DATA 8

DATA 50, 5,&HFF3F3FFF,""
DATA 50, 6,&HFFFF3F3F,"  "
DATA 50, 7,&HFFFFFF3F,"       "
DATA 50, 8,&HFF3FFF3F,"       "
DATA 50, 9,&HFF3FFFFF,"  "
DATA 50,10,&HFF3F9FFF,"「スマイルボーイ」                  "
DATA 50,11,&HFF3F3FFF,""
'DATA 50,12,&HFFFF1FFF,"プチコン4用GBエミュレータ"
DATA 50,12,&HFFFF1FFF,"GBエミュレータ for プチコン4"

:NullData="DATA 0"
'-----------------------------------------------
@MENU_FURIG_JA
'-----------------------------------------------
DATA 1
  DATA 12.5,"もど"

{NullData}
{NullData}

DATA 3
  DATA  2.0,"ロム"
  DATA 10.0,"よ"
  DATA 12.0,"こ"

DATA 3
  DATA  2.0,"セーブ"
  DATA 10.0,"よ"
  DATA 12.0,"こ"

DATA 3
  DATA  2.0,"セーブ"
  DATA  9.5,"ほ"
  DATA 11.5,"ぞん"

{NullData}
{NullData}

DATA 3
  DATA  2.0,"スマイルボーイ"
  DATA  9.5,"しゅう"
  DATA 11.5,"りょう"


'-----------------------------------------------
@MENU_ITEMS_JA
'-----------------------------------------------
DATA 9

'DATA "戻:もど;"
'                      
DATA 64,17,&HFF3FFFFF,"        ゲームに戻る",@ContinueEmu

'DATA ""
'                      
DATA 64,20,&HFF3FFFFF,"       ステートロード", @LoadState
'DATA ""
'                      
DATA 64,22,&HFF3FFFFF,"       ステートセーブ", @SaveState

'DATA "ROM:ロム;読:よ;込:こ;"
'                      
DATA 64,25,&HFF3FFF3F,"  ROMファイルの読み込み", @LoadROM

'DATA "SAV:セーブ;読:よ;込:こ;"
'                      
DATA 64,29,&HFF3FFF3F,"  SAVファイルの読み込み", @LoadERAM
'DATA "SAV:セーブ;退:ほ;避:ぞん;"
'                      
DATA 64,31,&HFF3FFF3F,"  SAVファイルの退避",   @SaveERAM

'DATA ""
'                      
DATA 64,34,&HFFFFFF3F,"       ソフトリセット", @SoftReset
'DATA ""
'                      
DATA 64,36,&HFFFF7F1F,"       ハードリセット", @HardReset

'DATA "SmileBOY:スマイルボーイ;終:しゅう;了:りょう;"
'                      
DATA 64,39,&HFFFF1F3F," SmileBOYを終了する",@QuitEmu




'===============================================
@LOGO_EN
'===============================================
'    # Total lines
DATA 7
'     X, Y,RGB Color,  TEXT
DATA 50, 5,&HFF3F3FFF,""
DATA 50, 6,&HFFFF3F3F,"  "
DATA 50, 7,&HFFFFFF3F,"       "
DATA 50, 8,&HFF3FFF3F,"       "
DATA 50, 9,&HFF3FFFFF,"  "
DATA 50,10,&HFF3F3FFF,""
DATA 50,11,&HFFFF1FFF,"GB Emulator for SmileBASIC 4"

'-----------------------------------------------
@MENU_ITEMS_EN
'-----------------------------------------------
'    # Total menu items
DATA 9
'     X, Y,RGB Color,  NAME,            @LABEL FUNC
DATA 64,16,&HFF3FFFFF," Resume game",  @ContinueEmu

DATA 64,19,&HFF3FFFFF,"  Load state",   @LoadState
DATA 64,21,&HFF3FFFFF,"  Save state",   @SaveState

DATA 64,24,&HFF3FFF3F,"    Load ROM",   @LoadROM

DATA 64,28,&HFF3FFF3F,"   Load ERAM",   @LoadERAM
DATA 64,30,&HFF3FFF3F,"   Save ERAM",   @SaveERAM

DATA 64,33,&HFFFFFF3F,"  Soft reset",   @SoftReset
DATA 64,35,&HFFFF7F1F,"  Hard reset",   @HardReset

DATA 64,38,&HFFFF1F3F," Exit SmileBOY",@QuitEmu




'German - thanks to CyberYoshi
'===============================================
@LOGO_DE
'===============================================
'    # Total lines
DATA 7
'     X,  Y, RGB Color,   TEXT
DATA 50,  5, &HFF3F3FFF, ""
DATA 50,  6, &HFFFF3F3F, "  "
DATA 50,  7, &HFFFFFF3F, "       "
DATA 50,  8, &HFF3FFF3F, "       "
DATA 50,  9, &HFF3FFFFF, "  "
DATA 50, 10, &HFF3F3FFF, ""
DATA 50, 11, &HFFFF1FFF, "GB-Emulator für SmileBASIC 4"

'-----------------------------------------------
@MENU_ITEMS_DE
'-----------------------------------------------
'    # Total menu items
DATA 9
'     X,  Y, RGB Color,   NAME,                     @LABEL FUNC
DATA 56, 16, &HFF3FFFFF, "      Spiel fortfahren", @ContinueEmu

DATA 56, 19, &HFF3FFFFF, "      Spielstand laden",  @LoadState
DATA 56, 21, &HFF3FFFFF, "  Spielstand speichern",  @SaveState

DATA 56, 24, &HFF3FFF3F, "             ROM laden",  @LoadROM

DATA 56, 28, &HFF3FFF3F, "            ERAM laden",  @LoadERAM
DATA 56, 30, &HFF3FFF3F, "        ERAM speichern",  @SaveERAM

DATA 56, 33, &HFFFFFF3F, "            Soft-Reset",  @SoftReset
DATA 56, 35, &HFFFF7F1F, "            Hard-Reset",  @HardReset

DATA 56, 38, &HFFFF1F3F, "      SmileBOY beenden", @QuitEmu




'===============================================
@LOGO_NL
'===============================================
DATA 7

DATA 50, 5,&HFF3F3FFF,""
DATA 50, 6,&HFFFF3F3F,"  "
DATA 50, 7,&HFFFFFF3F,"       "
DATA 50, 8,&HFF3FFF3F,"       "
DATA 50, 9,&HFF3FFFFF,"  "
DATA 50,10,&HFF3F3FFF,""
DATA 50,11,&HFFFF1FFF,"GB-Emulator voor SmileBASIC 4"

'-----------------------------------------------
@MENU_ITEMS_NL
'-----------------------------------------------
DATA 9

DATA 57,16,&HFF3FFFFF,"          Doorgaan",  @ContinueEmu

DATA 57,19,&HFF3FFFFF,"    Spelstand laden",  @LoadState
DATA 57,21,&HFF3FFFFF,"  Spelstand opslaan",  @SaveState

DATA 57,24,&HFF3FFF3F,"          ROM laden",  @LoadROM

DATA 57,28,&HFF3FFF3F,"         ERAM laden",  @LoadERAM
DATA 57,30,&HFF3FFF3F,"       ERAM opslaan",  @SaveERAM

DATA 57,33,&HFFFFFF3F,"         Soft-reset",  @SoftReset
DATA 57,35,&HFFFF7F1F,"         Hard-reset",  @HardReset

DATA 57,38,&HFFFF1F3F," SmileBOY beëindigen",@QuitEmu



'Finnish - thanks to Perska
'===============================================
@LOGO_SU
'===============================================
'    # Total lines
DATA 7
'     X, Y,RGB Color,  TEXT
DATA 50, 5,&HFF3F3FFF,""
DATA 50, 6,&HFFFF3F3F,"  "
DATA 50, 7,&HFFFFFF3F,"       "
DATA 50, 8,&HFF3FFF3F,"       "
DATA 50, 9,&HFF3FFFFF,"  "
DATA 50,10,&HFF3F3FFF,""
DATA 50,11,&HFFFF1FFF,"GB Emulaattori SmileBASIC 4:lle"

'-----------------------------------------------
@MENU_ITEMS_SU
'-----------------------------------------------
'    # Total menu items
DATA 9
'     X, Y,RGB Color,  NAME,                 @LABEL FUNC
DATA 24,16,&HFF3FFFFF," Jatka peliä",       @ContinueEmu

DATA 24,19,&HFF3FFFFF,"  Avaa tila",         @LoadState
DATA 24,21,&HFF3FFFFF,"  Tallenna tila",     @SaveState

DATA 24,24,&HFF3FFF3F,"  Avaa ROM",          @LoadROM

DATA 24,28,&HFF3FFF3F,"  Avaa ERAM",         @LoadERAM
DATA 24,30,&HFF3FFF3F,"  Tallenna ERAM",     @SaveERAM

DATA 24,33,&HFFFFFF3F,"  Ohjelman nollaus",  @SoftReset
DATA 24,35,&HFFFF7F1F,"  Laitteen nollaus",  @HardReset

DATA 24,38,&HFFFF1F3F," Lopeta SmileBOY",   @QuitEmu




'Esperanto - thanks to Fußmatte
'===============================================
@LOGO_ESP
'===============================================
'    # Total lines
DATA 7
'     X,  Y, RGB Color,   TEXT
DATA 50,  5, &HFF3F3FFF, ""
DATA 50,  6, &HFFFF3F3F, "  "
DATA 50,  7, &HFFFFFF3F, "       "
DATA 50,  8, &HFF3FFF3F, "       "
DATA 50,  9, &HFF3FFFFF, "  "
DATA 50, 10, &HFF3F3FFF, ""
DATA 50, 11, &HFFFF1FFF, "Imitilo de GB por SmileBASIC 4"

'-----------------------------------------------
@MENU_ITEMS_ESP
'-----------------------------------------------
'    # Total menu items
DATA 9
'     X,  Y, RGB Color,   NAME,                  @LABEL FUNC
DATA 24, 16, &HFF3FFFFF, " Daŭri ludon",        @ContinueEmu

DATA 24, 19, &HFF3FFFFF, "  Ŝargi staton",       @LoadState
DATA 24, 21, &HFF3FFFFF, "  Konservi staton",    @SaveState

DATA 24, 24, &HFF3FFF3F, "  Ŝargi ROM-on",       @LoadROM

DATA 24, 28, &HFF3FFF3F, "  Ŝargi ERAM-on",      @LoadERAM
DATA 24, 30, &HFF3FFF3F, "  Konservi ERAM-on",   @SaveERAM

DATA 24, 33, &HFFFFFF3F, "  Parta relanĉo",      @SoftReset
DATA 24, 35, &HFFFF7F1F, "  Malvarma relanĉo",   @HardReset

DATA 24, 38, &HFFFF1F3F, " Eliri de SmileBOY",  @QuitEmu




:    GOTO @__EOF__

:@__DEFINITIONS__

'##################################
'#                                #
'# D E F I N I T I O N S          #
'#                                #
'##################################

\\HEX_PKMN_DEFINES

'ACLS
IF(ENVTYPE()!=2)THEN
    ACLS
'   loadg #DisplayFont,5
    Exec  "FCP",4
ELSE
'   UIMASK  0,0,1280,720
    UIMASK
    UISTATE 0,0
    UISTATE 1,0
    UISTATE 2,0
    UISTATE 3,0
    UISTATE 4,0
    UISTATE 5,0
    UIFOCUS 0,0,1280,720
    SPCLR:CLS 'ACLS禁止（対応していない機能で誤動作）
    SPSET  383,0,0,1280,720
    SPPAGE 383,0
ENDIF

'Temporary variables:
VAR TMP%,TM2%
VAR TM3%,TM4%
VAR I,J,K

' Global Input Key Register
VAR KB_Key$, Key%

'Screen and layer Constants:
Const #BGScreen  = 1
Const #WinScreen = 0

Const #BGLayer   = 6
Const #WinLayer  = 5
Const #SPLayer   = 4

VAR Loaded_ROM$,CurrentProject$

': CASE(GameEnhanceConfig)
': WHEN(#PKRed____JPN):WHEN(#PKRed____ENG):WHEN(#PKRote___DEU):WHEN(#PKRoja___ESP):WHEN(#PKRouge__FRA):WHEN(#PKRossa__ITA):
'    CONST #Tint=#C_Red
': WHEN(#PKGreen__JPN):
'    CONST #Tint=#C_Green
': WHEN(#PKBlue___JPN):WHEN(#PKBlue___ENG):WHEN(#PKBlaue__DEU):WHEN(#PKAzul___ESP):WHEN(#PKBleue__FRA):WHEN(#PKBlu____ITA):
'    CONST #Tint=#C_Blue
': WHEN(#PKPikachuJPN):WHEN(#PKYellow_ENG):WHEN(#PKGelbe__DEU):WHEN(#PKAmarillESP):WHEN(#PKJaune__FRA):WHEN(#PKGialla_ITA):
'    CONST #Tint=#C_Yellow
': WHEN(#PKGold___JPN):WHEN(#PKGold___ENG):WHEN(#PKGold___DEU):WHEN(#PKGold___ESP):WHEN(#PKGold___FRA):WHEN(#PKGold___ITA):WHEN(#PKGold___KOR):
     CONST #Tint=#P8_Coral
': WHEN(#PKSilver_JPN):WHEN(#PKSilver_ENG):WHEN(#PKSilver_DEU):WHEN(#PKSilver_ESP):WHEN(#PKSilver_FRA):WHEN(#PKSilver_ITA):WHEN(#PKSilver_KOR):
'    CONST #Tint=#P8_Silver
': WHEN(#PKCrystalJPN):WHEN(#PKCrystalENG):WHEN(#PKCrystalDEU):WHEN(#PKCrystalESP):WHEN(#PKCrystalFRA):WHEN(#PKCrystalITA):
'    CONST #Tint=#P8_Aubergine
': OTHERWISE:
'    CONST #Tint=&h7F00003F
': ENDCASE'(GameEnhanceConfig)

    Flash #Tint

:IF UseDebugger THEN

DIM DbgCallTrace   = Array%(64)

DIM DbgReadLogPtr  = Array%(0)
DIM DbgReadLogSrc  = Array%(0)
DIM DbgReadLogVal  = Array%(0)

DIM DbgWriteLogPtr = Array%(0)
DIM DbgWriteLogSrc = Array%(0)
DIM DbgWriteLogVal = Array%(0)

:ENDIF'UseDebugger

VAR I%,J%,K%,L%,M%,N%

'**************************
'* Memory
'**************************
' *** Internal ***
DIM Mem[&H10000]

'*** Cartridge ***
' -- ROM --
VAR ROM_size
VAR ROM_Banks
VAR ROM_last_bank
DIM CartROM[0]        'Dirty copy; 8 bits per elements instead of 32

: IF SupportBootROM% THEN

    VAR UseBootROM = #TRUE
    DIM BootROM[&H100]

: ENDIF'SupportBootROM%

VAR New_ROM_Bank = 1
VAR Loaded_ROM_Bank = 1

VAR ROM_loaded
VAR CartType
VAR CartridgeType
VAR CartridgeHas_ERAM
VAR CartridgeHasBattery
VAR CartridgeHasRTC
VAR RTC_sel

' -- External RAM --
VAR New_ERAM_Bank = 0
VAR Loaded_ERAM_Bank = 0

VAR ERAM_SizeTotal
VAR ERAM_Banks
VAR Last_ERAM_Bank
DIM ERAM[&H2000]

VAR ERAM_Access = 0
VAR ERAM_mode = 0

' -- IO Registers --
ENUM\
 #P1  =&HFF00,#SB  =&HFF01,\
 #SC  =&HFF02,#DIV =&HFF04,\
 #TIMA=&HFF05,#TMA =&HFF06,\
 #TAC =&HFF07,#IF  =&HFF0F,\
 #NR10=&HFF10,#NR11=&HFF11,\
 #NR12=&HFF12,#NR13=&HFF13,\
 #NR14=&HFF14,#NR21=&HFF16,\
 #NR22=&HFF17,#NR23=&HFF18,\
 #NR24=&HFF19,#NR30=&HFF1A,\
 #NR31=&HFF1B,#NR32=&HFF1C,\
 #NR33=&HFF1D,#NR34=&HFF1E,\
 #NR41=&HFF20,#NR42=&HFF21,\
 #NR43=&HFF22,#NR44=&HFF23,\
 #NR50=&HFF24,#NR51=&HFF25,\
 #NR52=&HFF26,\'Wave Pattern RAM (0xFF30 - 0xFF3F)
 #LCDC=&HFF40,#STAT=&HFF41,\
 #SCY =&HFF42,#SCX =&HFF43,\
 #LY  =&HFF44,#LYC =&HFF45,\
 #DMA =&HFF46,#BGP =&HFF47,\
 #OBP0=&HFF48,#OBP1=&HFF49,\
 #WY  =&HFF4A,#WX  =&HFF4B,\
 #KEY1=&HFF4D,#VBK =&HFF4F,\
 #HDMA1=&HFF51,#HADM2=&HFF52,\
 #HDMA3=&HFF53,#HDMA4=&HFF54,\
 #HDMA5=&HFF55,#RP   =&HFF56,\
 #OPRI =&HFF6C,#SVBK =&HFF70,\
 #UNDOC72=&HFF72,#UNDOC74=&HFF74,\
 #INDOC75=&HFF75,#UNDOC76=&HFF76,\
 #UNDOC77=&HFF77,\
 #IE  =&HFFFF

' ---

DIM WavPtrnRAM_Table[]= \
[ \
  &HFF30,&HFF31,\
  &HFF32,&HFF33,\
  &HFF34,&HFF35,\
  &HFF36,&HFF37,\
  &HFF38,&HFF39,\
  &HFF3A,&HFF3B,\
  &HFF3C,&HFF3D,\
  &HFF3E,&HFF3F \
]


ENUM\
 #intr_PPU_VBlank=&b____1,\
 #intr_LCD_STAT  =&b___10,\
 #intr_timer     =&b__100,\
 #intr_serial    =&b_1000,\
 #intr_joypad    =&b10000

ENUM\
 #intr_PPU_VBlank_offs=&H40,\
 #intr_LCD_STAT_offs  =&H48,\
 #intr_timer_offs     =&H50,\
 #intr_serial_offs    =&H58,\
 #intr_joypad_offs    =&H60


'**********************************
'* --- Audio Proc. Unit (APU) --- *
'**********************************
DIM WavMemory[256]
DIM WavRAM   [16]
VAR PCMSample$=\
  "ff00ff00ff00ff00"+\
  "ff00ff00ff00ff00"+\
  "ff00ff00ff00ff00"+\
  "ff00ff00ff00ff00"
DIM PulseDuty$[]=[   \
  "00000000000000000000000000000000000000000000000000000000FFFFFFFF",\
  "FFFFFFFF000000000000000000000000000000000000000000000000FFFFFFFF",\
  "FFFFFFFF00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF",\
  "00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000" \
]


VAR APU_Pwr=1              'Global Audio Enable/Disable
VAR APU_VolLft#,APU_VolRgt#'Global Stereo Volume

VAR Ch1_Pwr,    Ch2_Pwr,              Ch4_Pwr

VAR Ch3_Pwr=1              'PCM    Audio Enable/Disable
VAR Ch3_Vol                'PCM    Control Volume

VAR Ch1_PanL,   Ch1_PanR   'Pulse1 Stereo L|R Toggles
VAR Ch2_PanL,   Ch2_PanR   'Pulse2 Stereo L|R Toggles
VAR Ch3_PanL,   Ch3_PanR   'PCM    Stereo L|R Toggles
VAR Ch4_PanL,   Ch4_PanR   'Noise  Stereo L|R Toggles

VAR Ch1_Trg,    Ch2_Trg,    Ch3_Trg,  Ch4_Trg     'Note trigger
VAR Ch1_Frq,    Ch2_Frq,    Ch3_Frq               'BGMPitch Frequency
VAR Ch1_Duty$,  Ch2_Duty$,            Ch4_Duty$   'Duty Cycle
VAR Ch1_PitchMod

VAR Ch1_Attk#,  Ch2_Attk#,            Ch4_Attk#   'Attack
VAR Ch1_InitV#, Ch2_InitV#,           Ch4_InitV#  'Env Slope Initial Volume
VAR Ch1_EnvDir#,Ch2_EnvDir#,          Ch4_EnvDir# 'Env Slope Direction

VAR Ch1_LEnbl,  Ch2_LEnbl,  Ch3_LEnbl,Ch4_LEnbl   'Length Enable
VAR Ch1_Len#,   Ch2_Len#,   Ch3_Len#, Ch4_Len#    'Length
VAR Ch1_LenP#,  Ch2_LenP#,  Ch3_LenP#,Ch4_LenP#   'Length Proxy

VAR Ch1_Pos,    Ch2_Pos,    Ch3_Pos,  Ch4_Pos     'Playback Position

VAR Ch4_SCF      'Noise Shift Clock Frequency
VAR Ch4_CntSW    'Noise Counter Step Width
VAR Ch4_DivRate  'Noise Dividing Ratio of Frequencies


DIM EnvUp#[256]              'Env Slopes Directions Up
DIM EnvDn#[256]              'Env slopes Directions Down
DIM VolInit#[256]            'Env Slope Initial Volumes

'DM WAV_Vol[]=[0,4,2,1]      'PCM Volumes
:WV$=""
:FOR J=0 TO 255
:ON(J DIV 32)AND 3 GOTO@WV0,@WV4,@WV2,@WV1
:@WV0:PUSH WV$,"0,"GOTO@WVE
:@WV4:PUSH WV$,"4,"GOTO@WVE
:@WV2:PUSH WV$,"2,"GOTO@WVE
:@WV1:PUSH WV$,"1,"    @WVE
:NEXT:POP  WV$OUT _
DIM WAV_Vol[]=[{WV$}]   'PCM Volumes
DIM VolLft#[256],VolRgt#[256]'Stereo Volumes


DIM PitchLo#[2048]
DIM PitchHi#[2048]
DIM BGMPitch#[2048]
DIM NoisePitch#[16392]


'**********************************
'*    --- DMG CPU Emulator ---    *
'**********************************
VAR DMG_F,   DMG_A
VAR DMG_B,   DMG_C
VAR DMG_D,   DMG_E
VAR DMG_H,   DMG_L
VAR DMG_PC,  DMG_SP

:IF Use_VPC% THEN
  VAR DMG_VPC
:ENDIF'Use_VPC%

VAR DMG_INTF,PendingIRQ
VAR DMG_HALT
VAR DMG_State0
VAR DMG_state1 'For experimentation

DIM StateTable  [512]
DIM StateTableCB[256]

DIM DAA_table[2048]

'Bitshift tables
DIM  SWAP_table[256]
DIM   RLC_table[256], RRC_table[256]
DIM RL_NC_table[256],RL_C_table[256]
DIM RR_NC_table[256],RR_C_table[256]
DIM   SLA_table[256], SRA_table[256]
DIM   SLL_table[256], SRL_table[256]
DIM  BIT7_table[256],BIT6_table[256]
DIM  BIT5_table[256],BIT4_table[256]
DIM  BIT3_table[256],BIT2_table[256]
DIM  BIT1_table[256],BIT0_table[256]
DIM  SET7_table[256],SET6_table[256]
DIM  SET5_table[256],SET4_table[256]
DIM  SET3_table[256],SET2_table[256]
DIM  SET1_table[256],SET0_table[256]
DIM  RES7_table[256],RES6_table[256]
DIM  RES5_table[256],RES4_table[256]
DIM  RES3_table[256],RES2_table[256]
DIM  RES1_table[256],RES0_table[256]

DIM JOYP0[256]
DIM JOYP1[256]

VAR SFC_PacketTransfer =    0
VAR SFC_PacketCount    =    0
DIM SFC_Packet
DIM SFC_Packets[]
VAR SFC_PacketCommand  = &H20
'DIM SFC_PacketArgs       [128]
VAR SFC_PacketLength   =    1

ENUM\
  #CGB_VRAM_DMA_GeneralPurpose = 0,\
  #CGB_VRAM_DMA_HBLANK

VAR CGB_VRAM_DMA_SRC%
VAR CGB_VRAM_DMA_DST%

VAR CGB_VRAM_DMA_MODE%
VAR CGB_VRAM_DMA_LENGTH%


' Flag tables
DIM ZeroTable[2*256],
DIM SUB_table[65536]
DIM ADD_table[65536]
DIM ADC_table[65536]
DIM SBC_table[65536]
DIM INC_table[256]
DIM DEC_table[256]

DIM SGN8_ADD1_table[256]
DIM SGN8_table[256]
DIM SGN16_table[65536]

DIM Instruction$[256]
DIM Instruction_type[256]

DIM Instruction_CB$[256]
DIM Instruction_CB_type[256]

VAR PerfCnt%

:CONST #POW4="64, 1, 4,16"
DIM pow4[]=[{#POW4+((","+#POW4)*31)}]

VAR CommonTileData = 1
VAR BG_TileMap     = 0
VAR WinTileMap     = 0
VAR SpriteSz_16    = 0

VAR BG_on,WinOn

: ON #Scale GOTO@InitScale0,@InitScale1,@InitScale2,@InitScale3,@InitScale4,@InitScale5
: @InitScale0
: GOTO@InitScaleEND
: @InitScale1
: GOTO@InitScaleEND
: @InitScale2
: GOTO@InitScaleEND
: @InitScale3
: GOTO@InitScaleEND
: @InitScale4
DIM LineOfs_BG#[180,4]
DIM LineOfsWin#[180,4]
: GOTO@InitScaleEND
: @InitScale5
DIM LineOfs_BG#[144,4]
DIM LineOfsWin#[144,4]
: @InitScaleEND

DIM LineOfs_X_Table#[256]
DIM LineOfs_Y_Table#[256]


'GameBoy Camera
VAR CamRegsOn
DIM CamReg[6]


'DMA_OAM_update
VAR SpriteNo
DIM DivideBy4[0]
VAR addr3
VAR No
DIM U_Values[0]
DIM V_Values[0]
DIM AtrFlipY[0]
DIM AtrFlipX[0]
VAR u
VAR v
VAR Atr
VAR y_flp
VAR x_flp

'VRAM_render_tilemap0
DIM TileCache0[&H820]
DIM TileCache1[&H820]
VAR ofs

'VRAM_update_tile
DIM VRAM_cache[&H8000]
DIM VRAM_Bitmap[0]
VAR VRAM_DoUpdateBitmap
VAR VRAM_DoUpdate_BG
VAR VRAM_DoUpdateWin
:IF(ENVTYPE()!=2)THEN
DIM VRAM_BG_Map[0]
DIM VRAM_WinMap[0]
:ELSE
DIM VRAM_BG_Map[128,128]'&H4000]
DIM VRAM_WinMap[128,128]'&H4000]
:ENDIF
DIM _sx[]=[&H80,&H40,&H20,&H10,8,4,2,1]
VAR TileIdx,TileId2,d0,d1
VAR y
VAR x,sx
VAR TileX,TileY
DIM _addr[&HA000]
DIM _TileIdx[&HA000]
DIM _TileY[&HA000]
DIM _d0[&HA000]
DIM _d1[&HA000]


'PPU
VAR PPU_On

'VAR tilemap0$,tilemap1$
'DIM PPU_tileset[512,8,8]
'FILL PPU_tileset,3

DIM LineTime[]=\
[\
  #LineTimeHBlank,\
  #LineTimeVBlank,\
  #LineTimeOAM,   \
  #LineTimeVRAM   \
]

ENUM\
 #PPUMode_OAM    = 2,\
 #PPUMode_VRAM   = 3,\
 #PPUMode_HBlank = 0,\
 #PPUMode_VBlank = 1


VAR last_cycles = 0
VAR PPU_cycles
VAR PPU_Mode'=#PPUMode_OAM
VAR LY%

DIM OAM_Value[40,3]

'Timing
VAR ClockDiv
VAR ClockMain
VAR ClockSub
VAR trs


:SIO_Defines


' Real-time clock: HH:MM:SS + Day of year
VAR rtc_h, rtc_m, rtc_s
VAR rtc_date_lo, rtc_date_hi

' Latched RTC
VAR rtc_lh, rtc_lm, rtc_ls
VAR rtc_ldate_lo, rtc_ldate_hi


VAR reg1h
VAR reg2h
VAR reg1l
VAR reg2l
VAR J0,J1


DIM  BGPal[]={P$[#BGP%]}
DIM OBPal0[]={P$[#OB0%]}
DIM OBPal1[]={P$[#OB1%]}

VAR A%,R%,G%,B%

IF(#invert_Colors==0)THEN
  DIM pal_inv[4]
  pal_inv[0]=BGPal [3]pal_inv[1]=BGPal [2]pal_inv[2]=BGPal [1]pal_inv[3]=BGPal [0]BGPal =COPY(pal_inv)
  pal_inv[0]=OBPal0[3]pal_inv[1]=OBPal0[2]pal_inv[2]=OBPal0[1]pal_inv[3]=OBPal0[0]OBPal0=COPY(pal_inv)
  pal_inv[0]=OBPal1[3]pal_inv[1]=OBPal1[2]pal_inv[2]=OBPal1[1]pal_inv[3]=OBPal1[0]OBPal1=COPY(pal_inv)
ENDIF

DIM BGP =COPY(BGPal)
DIM OBP0=COPY(OBPal0)
DIM OBP1=COPY(OBPal1)

DIM Pals[]=[\
  &H00000000,&H00000001,&H00000002,&H00000003,\
  &H00000100,&H00000101,&H00000102,&H00000103,\
  &H00000200,&H00000201,&H00000202,&H00000203,\
  &H00000300,&H00000301,&H00000302,&H00000303,\
  &H00010000,&H00010001,&H00010002,&H00010003,\
  &H00010100,&H00010101,&H00010102,&H00010103,\
  &H00010200,&H00010201,&H00010202,&H00010203,\
  &H00010300,&H00010301,&H00010302,&H00010303,\
  &H00020000,&H00020001,&H00020002,&H00020003,\
  &H00020100,&H00020101,&H00020102,&H00020103,\
  &H00020200,&H00020201,&H00020202,&H00020203,\
  &H00020300,&H00020301,&H00020302,&H00020303,\
  &H00030000,&H00030001,&H00030002,&H00030003,\
  &H00030100,&H00030101,&H00030102,&H00030103,\
  &H00030200,&H00030201,&H00030202,&H00030203,\
  &H00030300,&H00030301,&H00030302,&H00030303,\
  &H01000000,&H01000001,&H01000002,&H01000003,\
  &H01000100,&H01000101,&H01000102,&H01000103,\
  &H01000200,&H01000201,&H01000202,&H01000203,\
  &H01000300,&H01000301,&H01000302,&H01000303,\
  &H01010000,&H01010001,&H01010002,&H01010003,\
  &H01010100,&H01010101,&H01010102,&H01010103,\
  &H01010200,&H01010201,&H01010202,&H01010203,\
  &H01010300,&H01010301,&H01010302,&H01010303,\
  &H01020000,&H01020001,&H01020002,&H01020003,\
  &H01020100,&H01020101,&H01020102,&H01020103,\
  &H01020200,&H01020201,&H01020202,&H01020203,\
  &H01020300,&H01020301,&H01020302,&H01020303,\
  &H01030000,&H01030001,&H01030002,&H01030003,\
  &H01030100,&H01030101,&H01030102,&H01030103,\
  &H01030200,&H01030201,&H01030202,&H01030203,\
  &H01030300,&H01030301,&H01030302,&H01030303,\
  &H02000000,&H02000001,&H02000002,&H02000003,\
  &H02000100,&H02000101,&H02000102,&H02000103,\
  &H02000200,&H02000201,&H02000202,&H02000203,\
  &H02000300,&H02000301,&H02000302,&H02000303,\
  &H02010000,&H02010001,&H02010002,&H02010003,\
  &H02010100,&H02010101,&H02010102,&H02010103,\
  &H02010200,&H02010201,&H02010202,&H02010203,\
  &H02010300,&H02010301,&H02010302,&H02010303,\
  &H02020000,&H02020001,&H02020002,&H02020003,\
  &H02020100,&H02020101,&H02020102,&H02020103,\
  &H02020200,&H02020201,&H02020202,&H02020203,\
  &H02020300,&H02020301,&H02020302,&H02020303,\
  &H02030000,&H02030001,&H02030002,&H02030003,\
  &H02030100,&H02030101,&H02030102,&H02030103,\
  &H02030200,&H02030201,&H02030202,&H02030203,\
  &H02030300,&H02030301,&H02030302,&H02030303,\
  &H03000000,&H03000001,&H03000002,&H03000003,\
  &H03000100,&H03000101,&H03000102,&H03000103,\
  &H03000200,&H03000201,&H03000202,&H03000203,\
  &H03000300,&H03000301,&H03000302,&H03000303,\
  &H03010000,&H03010001,&H03010002,&H03010003,\
  &H03010100,&H03010101,&H03010102,&H03010103,\
  &H03010200,&H03010201,&H03010202,&H03010203,\
  &H03010300,&H03010301,&H03010302,&H03010303,\
  &H03020000,&H03020001,&H03020002,&H03020003,\
  &H03020100,&H03020101,&H03020102,&H03020103,\
  &H03020200,&H03020201,&H03020202,&H03020203,\
  &H03020300,&H03020301,&H03020302,&H03020303,\
  &H03030000,&H03030001,&H03030002,&H03030003,\
  &H03030100,&H03030101,&H03030102,&H03030103,\
  &H03030200,&H03030201,&H03030202,&H03030203,\
  &H03030300,&H03030301,&H03030302,&H03030303 \
]

Const #C_=&h_ff_ff_ff_ff

@Instruction_DATA
DATA 0,"NOP",#C_GRAY
DATA 2,"LD BC, &h%04x",#C_BLUE
DATA 0,"LD (BC), A",#C_BLUE
DATA 0,"INC BC",#C_RED
DATA 0,"INC B",#C_RED
DATA 0,"DEC B",#C_RED
DATA 1,"LD B, &h%02x",#C_BLUE
DATA 0,"RLCA",#C_PURPLE
DATA 2,"LD @lbl_%04xh, SP",#C_BLUE
DATA 0,"ADD HL, BC",#C_RED
DATA 0,"LD A, (BC)",#C_BLUE
DATA 0,"DEC BC",#C_RED
DATA 0,"INC C",#C_RED
DATA 0,"DEC C",#C_RED
DATA 1,"LD C, &h%02x",#C_BLUE
DATA 0,"RRCA",#C_PURPLE

DATA 1,"STOP &h%02x",#C_YELLOW
DATA 2,"LD DE, &h%04x",#C_BLUE
DATA 0,"LD (DE), A",#C_BLUE
DATA 0,"INC DE",#C_RED
DATA 0,"INC D",#C_RED
DATA 0,"DEC D",#C_RED
DATA 1,"LD D, &h%02x",#C_BLUE
DATA 0,"RLA",#C_PURPLE
DATA 3,"JR @lbl_%04x",#C_CYAN
DATA 0,"ADD HL, DE",#C_RED
DATA 0,"LD A, (DE)",#C_BLUE
DATA 0,"DEC DE",#C_RED
DATA 0,"INC E",#C_RED
DATA 0,"DEC E",#C_RED
DATA 1,"LD E, &h%02x",#C_BLUE
DATA 0,"RRA",#C_PURPLE

DATA 3,"JR NZ, @lbl_%04x",#C_CYAN
DATA 2,"LD HL, &h%04x",#C_BLUE
DATA 0,"LD (HL+), A",#C_BLUE
DATA 0,"INC HL",#C_RED
DATA 0,"INC H",#C_RED
DATA 0,"DEC H",#C_RED
DATA 1,"LD H, &h%02x",#C_BLUE
DATA 0,"DAA",#C_PURPLE
DATA 3,"JR Z, @lbl_%04x",#C_CYAN
DATA 0,"ADD HL, HL",#C_RED
DATA 0,"LD A, (HL+)",#C_BLUE
DATA 0,"DEC HL",#C_RED
DATA 0,"INC L",#C_RED
DATA 0,"DEC L",#C_RED
DATA 1,"LD L, &h%02x",#C_BLUE
DATA 0,"CPL",#C_PURPLE

DATA 3,"JR NC, @lbl_%04x",#C_CYAN
DATA 2,"LD SP, @lbl_%04x",#C_BLUE
DATA 0,"LD (HL-), A",#C_BLUE
DATA 0,"INC SP",#C_RED
DATA 0,"INC (HL)",#C_RED
DATA 0,"DEC (HL)",#C_RED
DATA 1,"LD (HL), &h%02x",#C_BLUE
DATA 0,"SCF",#C_PURPLE
DATA 3,"JR C, @lbl_%04x",#C_CYAN
DATA 0,"ADD HL, SP",#C_RED
DATA 0,"LD A, (HL-)",#C_BLUE
DATA 0,"DEC SP",#C_RED
DATA 0,"INC A",#C_RED
DATA 0,"DEC A",#C_RED
DATA 1,"LD A, &h%02x",#C_BLUE
DATA 0,"CCF",#C_PURPLE

DATA 0,"LD B, B",#C_BLUE
DATA 0,"LD B, C",#C_BLUE
DATA 0,"LD B, D",#C_BLUE
DATA 0,"LD B, E",#C_BLUE
DATA 0,"LD B, H",#C_BLUE
DATA 0,"LD B, L",#C_BLUE
DATA 0,"LD B, (HL)",#C_BLUE
DATA 0,"LD B, A",#C_BLUE
DATA 0,"LD C, B",#C_BLUE
DATA 0,"LD C, C",#C_BLUE
DATA 0,"LD C, D",#C_BLUE
DATA 0,"LD C, E",#C_BLUE
DATA 0,"LD C, H",#C_BLUE
DATA 0,"LD C, L",#C_BLUE
DATA 0,"LD C, (HL)",#C_BLUE
DATA 0,"LD C, A",#C_BLUE

DATA 0,"LD D, B",#C_BLUE
DATA 0,"LD D, C",#C_BLUE
DATA 0,"LD D, D",#C_BLUE
DATA 0,"LD D, E",#C_BLUE
DATA 0,"LD D, H",#C_BLUE
DATA 0,"LD D, L",#C_BLUE
DATA 0,"LD D, (HL)",#C_BLUE
DATA 0,"LD D, A",#C_BLUE
DATA 0,"LD E, B",#C_BLUE
DATA 0,"LD E, C",#C_BLUE
DATA 0,"LD E, D",#C_BLUE
DATA 0,"LD E, E",#C_BLUE
DATA 0,"LD E, H",#C_BLUE
DATA 0,"LD E, L",#C_BLUE
DATA 0,"LD E, (HL)",#C_BLUE
DATA 0,"LD E, A",#C_BLUE

DATA 0,"LD H, B",#C_BLUE
DATA 0,"LD H, C",#C_BLUE
DATA 0,"LD H, D",#C_BLUE
DATA 0,"LD H, E",#C_BLUE
DATA 0,"LD H, H",#C_BLUE
DATA 0,"LD H, L",#C_BLUE
DATA 0,"LD H, (HL)",#C_BLUE
DATA 0,"LD H, A",#C_BLUE
DATA 0,"LD L, B",#C_BLUE
DATA 0,"LD L, C",#C_BLUE
DATA 0,"LD L, D",#C_BLUE
DATA 0,"LD L, E",#C_BLUE
DATA 0,"LD L, H",#C_BLUE
DATA 0,"LD L, L",#C_BLUE
DATA 0,"LD L, (HL)",#C_BLUE
DATA 0,"LD L, A",#C_BLUE

DATA 0,"LD (HL), B",#C_BLUE
DATA 0,"LD (HL), C",#C_BLUE
DATA 0,"LD (HL), D",#C_BLUE
DATA 0,"LD (HL), E",#C_BLUE
DATA 0,"LD (HL), H",#C_BLUE
DATA 0,"LD (HL), L",#C_BLUE
DATA 0,"HALT",#C_YELLOW
DATA 0,"LD (HL), A",#C_BLUE
DATA 0,"LD A, B",#C_BLUE
DATA 0,"LD A, C",#C_BLUE
DATA 0,"LD A, D",#C_BLUE
DATA 0,"LD A, E",#C_BLUE
DATA 0,"LD A, H",#C_BLUE
DATA 0,"LD A, L",#C_BLUE
DATA 0,"LD A, (HL)",#C_BLUE
DATA 0,"LD A, A",#C_BLUE

DATA 0,"ADD A, B",#C_RED
DATA 0,"ADD A, C",#C_RED
DATA 0,"ADD A, D",#C_RED
DATA 0,"ADD A, E",#C_RED
DATA 0,"ADD A, H",#C_RED
DATA 0,"ADD A, L",#C_RED
DATA 0,"ADD A, (HL)",#C_RED
DATA 0,"ADD A, A",#C_RED
DATA 0,"ADC A, B",#C_RED
DATA 0,"ADC A, C",#C_RED
DATA 0,"ADC A, D",#C_RED
DATA 0,"ADC A, E",#C_RED
DATA 0,"ADC A, H",#C_RED
DATA 0,"ADC A, L",#C_RED
DATA 0,"ADC A, (HL)",#C_RED
DATA 0,"ADC A, A",#C_RED

DATA 0,"SUB B",#C_RED
DATA 0,"SUB C",#C_RED
DATA 0,"SUB D",#C_RED
DATA 0,"SUB E",#C_RED
DATA 0,"SUB H",#C_RED
DATA 0,"SUB L",#C_RED
DATA 0,"SUB (HL)",#C_RED
DATA 0,"SUB A",#C_RED
DATA 0,"SBC A, B",#C_RED
DATA 0,"SBC A, C",#C_RED
DATA 0,"SBC A, D",#C_RED
DATA 0,"SBC A, E",#C_RED
DATA 0,"SBC A, H",#C_RED
DATA 0,"SBC A, L",#C_RED
DATA 0,"SBC A, (HL)",#C_RED
DATA 0,"SBC A, A",#C_RED

DATA 0,"AND B",#C_GREEN
DATA 0,"AND C",#C_GREEN
DATA 0,"AND D",#C_GREEN
DATA 0,"AND E",#C_GREEN
DATA 0,"AND H",#C_GREEN
DATA 0,"AND L",#C_GREEN
DATA 0,"AND (HL)",#C_GREEN
DATA 0,"AND A",#C_GREEN
DATA 0,"XOR B",#C_GREEN
DATA 0,"XOR C",#C_GREEN
DATA 0,"XOR D",#C_GREEN
DATA 0,"XOR E",#C_GREEN
DATA 0,"XOR H",#C_GREEN
DATA 0,"XOR L",#C_GREEN
DATA 0,"XOR (HL)",#C_GREEN
DATA 0,"XOR A",#C_GREEN

DATA 0,"OR B",#C_GREEN
DATA 0,"OR C",#C_GREEN
DATA 0,"OR D",#C_GREEN
DATA 0,"OR E",#C_GREEN
DATA 0,"OR H",#C_GREEN
DATA 0,"OR L",#C_GREEN
DATA 0,"OR (HL)",#C_GREEN
DATA 0,"OR A",#C_GREEN
DATA 0,"CP B",#C_RED
DATA 0,"CP C",#C_RED
DATA 0,"CP D",#C_RED
DATA 0,"CP E",#C_RED
DATA 0,"CP H",#C_RED
DATA 0,"CP L",#C_RED
DATA 0,"CP (HL)",#C_RED
DATA 0,"CP A",#C_RED

DATA 0,"RET NZ",#C_MAGENTA
DATA 0,"POP BC",#C_BLUE
DATA 2,"JP NZ, @lbl_%04x",#C_CYAN
DATA 2,"JP @lbl_%04x",#C_CYAN
DATA 2,"CALL NZ, @lbl_%04x",#C_CYAN
DATA 0,"PUSH BC",#C_BLUE
DATA 1,"ADD A, &h%02x",#C_RED
DATA 0,"RST @lbl_0000",#C_CYAN
DATA 0,"RET Z",#C_MAGENTA
DATA 0,"RET",#C_MAGENTA
DATA 2,"JP Z, @lbl_%04x",#C_CYAN
DATA 4, "",#C_
DATA 2,"CALL Z, @lbl_%04x",#C_CYAN
DATA 2,"CALL @lbl_%04x",#C_CYAN
DATA 1,"ADC A, &h%02x",#C_RED
DATA 0,"RST @lbl_0008",#C_CYAN

DATA 0,"RET NC",#C_MAGENTA
DATA 0,"POP DE",#C_BLUE
DATA 2,"JP NC, @lbl_%04x",#C_CYAN
DATA 1,"OUT ($%02x), A",#C_
DATA 2,"CALL NC, @lbl_%04x",#C_CYAN
DATA 0,"PUSH DE",#C_BLUE
DATA 1,"SUB &h%02x",#C_RED
DATA 0,"RST @lbl_0010",#C_CYAN
DATA 0,"RET C",#C_MAGENTA
DATA 0,"RETI",#C_MAGENTA
DATA 2,"JP C, @lbl_%04x",#C_CYAN
DATA 1,"IN A, ($%02x)",#C_
DATA 2,"CALL C, @lbl_%04x",#C_CYAN
DATA 4, "",#C_
DATA 1,"SBC A, &h%02x",#C_RED
DATA 0,"RST @lbl_0018",#C_CYAN

DATA 1,"LD @lbl_ff%02x, A",#C_BLUE
DATA 0,"POP HL",#C_BLUE
DATA 0,"LD @lbl_ff00[C], A",#C_BLUE
DATA 0," EX HL, (SP)",#C_
DATA 2,"CALL PO, @lbl_%04x",#C_CYAN
DATA 0,"PUSH HL",#C_BLUE
DATA 1,"AND &h%02x",#C_GREEN
DATA 0,"RST @lbl_0020",#C_CYAN
DATA 5,"ADD SP, &h%04x",#C_RED
DATA 0,"JP (HL)",#C_CYAN
DATA 2,"LD @lbl_%04x, A",#C_BLUE
DATA 0," EX DE, HL",#C_
DATA 2,"CALL PE, @lbl_%04x",#C_CYAN
DATA 4, "",#C_
DATA 1,"XOR &h%02x",#C_GREEN
DATA 0,"RST @lbl_0028",#C_CYAN

DATA 1,"LD A, @lbl_ff%02x",#C_BLUE
DATA 0," POP AF",#C_BLUE
DATA 0,"LD A, @lbl_ff00[C]",#C_BLUE
DATA 0," DI",#C_YELLOW
DATA 2,"CALL P, @lbl_%04x",#C_CYAN
DATA 0,"PUSH AF",#C_BLUE
DATA 1,"OR &h%02x",#C_GREEN
DATA 0,"RST @lbl_0030",#C_CYAN
DATA 0,"RET M",#C_MAGENTA
DATA 0,"LD SP, HL",#C_BLUE
DATA 2,"LD A, &h%04x",#C_BLUE
DATA 0,"EI",#C_YELLOW
DATA 2,"CALL M, @lbl_%04x",#C_CYAN
DATA 4, "",#C_
DATA 1,"CP &h%02x",#C_RED
DATA 0,"RST @lbl_0038",#C_CYAN

DATA -1


@Instruction_CB_DATA
DATA 0,"RLC B",#C_PURPLE
DATA 0,"RLC C",#C_PURPLE
DATA 0,"RLC D",#C_PURPLE
DATA 0,"RLC E",#C_PURPLE
DATA 0,"RLC H",#C_PURPLE
DATA 0,"RLC L",#C_PURPLE
DATA 0,"RLC (HL)",#C_PURPLE
DATA 0,"RLC A",#C_PURPLE
DATA 0,"RRC B",#C_PURPLE
DATA 0,"RRC C",#C_PURPLE
DATA 0,"RRC D",#C_PURPLE
DATA 0,"RRC E",#C_PURPLE
DATA 0,"RRC H",#C_PURPLE
DATA 0,"RRC L",#C_PURPLE
DATA 0,"RRC (HL)",#C_PURPLE
DATA 0,"RRC A",#C_PURPLE

DATA 0,"RL B",#C_PURPLE
DATA 0,"RL C",#C_PURPLE
DATA 0,"RL D",#C_PURPLE
DATA 0,"RL E",#C_PURPLE
DATA 0,"RL H",#C_PURPLE
DATA 0,"RL L",#C_PURPLE
DATA 0,"RL (HL)",#C_PURPLE
DATA 0,"RL A",#C_PURPLE
DATA 0,"RR B",#C_PURPLE
DATA 0,"RR C",#C_PURPLE
DATA 0,"RR D",#C_PURPLE
DATA 0,"RR E",#C_PURPLE
DATA 0,"RR H",#C_PURPLE
DATA 0,"RR L",#C_PURPLE
DATA 0,"RR (HL)",#C_PURPLE
DATA 0,"RR A",#C_PURPLE

DATA 0,"SLA B",#C_PURPLE
DATA 0,"SLA C",#C_PURPLE
DATA 0,"SLA D",#C_PURPLE
DATA 0,"SLA E",#C_PURPLE
DATA 0,"SLA H",#C_PURPLE
DATA 0,"SLA L",#C_PURPLE
DATA 0,"SLA (HL)",#C_PURPLE
DATA 0,"SLA A",#C_PURPLE
DATA 0,"SRA B",#C_PURPLE
DATA 0,"SRA C",#C_PURPLE
DATA 0,"SRA D",#C_PURPLE
DATA 0,"SRA E",#C_PURPLE
DATA 0,"SRA H",#C_PURPLE
DATA 0,"SRA L",#C_PURPLE
DATA 0,"SRA (HL)",#C_PURPLE
DATA 0,"SRA A",#C_PURPLE

DATA 0,"SWAP B",#C_PURPLE
DATA 0,"SWAP C",#C_PURPLE
DATA 0,"SWAP D",#C_PURPLE
DATA 0,"SWAP E",#C_PURPLE
DATA 0,"SWAP H",#C_PURPLE
DATA 0,"SWAP L",#C_PURPLE
DATA 0,"SWAP (HL)",#C_PURPLE
DATA 0,"SWAP A",#C_PURPLE
DATA 0,"SRL B",#C_PURPLE
DATA 0,"SRL C",#C_PURPLE
DATA 0,"SRL D",#C_PURPLE
DATA 0,"SRL E",#C_PURPLE
DATA 0,"SRL H",#C_PURPLE
DATA 0,"SRL L",#C_PURPLE
DATA 0,"SRL (HL)",#C_PURPLE
DATA 0,"SRL A",#C_PURPLE

DATA 0,"BIT 0, B",#C_PURPLE
DATA 0,"BIT 0, C",#C_PURPLE
DATA 0,"BIT 0, D",#C_PURPLE
DATA 0,"BIT 0, E",#C_PURPLE
DATA 0,"BIT 0, H",#C_PURPLE
DATA 0,"BIT 0, L",#C_PURPLE
DATA 0,"BIT 0, (HL)",#C_PURPLE
DATA 0,"BIT 0, A",#C_PURPLE
DATA 0,"BIT 1, B",#C_PURPLE
DATA 0,"BIT 1, C",#C_PURPLE
DATA 0,"BIT 1, D",#C_PURPLE
DATA 0,"BIT 1, E",#C_PURPLE
DATA 0,"BIT 1, H",#C_PURPLE
DATA 0,"BIT 1, L",#C_PURPLE
DATA 0,"BIT 1, (HL)",#C_PURPLE
DATA 0,"BIT 1, A",#C_PURPLE

DATA 0,"BIT 2, B",#C_PURPLE
DATA 0,"BIT 2, C",#C_PURPLE
DATA 0,"BIT 2, D",#C_PURPLE
DATA 0,"BIT 2, E",#C_PURPLE
DATA 0,"BIT 2, H",#C_PURPLE
DATA 0,"BIT 2, L",#C_PURPLE
DATA 0,"BIT 2, (HL)",#C_PURPLE
DATA 0,"BIT 2, A",#C_PURPLE
DATA 0,"BIT 3, B",#C_PURPLE
DATA 0,"BIT 3, C",#C_PURPLE
DATA 0,"BIT 3, D",#C_PURPLE
DATA 0,"BIT 3, E",#C_PURPLE
DATA 0,"BIT 3, H",#C_PURPLE
DATA 0,"BIT 3, L",#C_PURPLE
DATA 0,"BIT 3, (HL)",#C_PURPLE
DATA 0,"BIT 3, A",#C_PURPLE

DATA 0,"BIT 4, B",#C_PURPLE
DATA 0,"BIT 4, C",#C_PURPLE
DATA 0,"BIT 4, D",#C_PURPLE
DATA 0,"BIT 4, E",#C_PURPLE
DATA 0,"BIT 4, H",#C_PURPLE
DATA 0,"BIT 4, L",#C_PURPLE
DATA 0,"BIT 4, (HL)",#C_PURPLE
DATA 0,"BIT 4, A",#C_PURPLE
DATA 0,"BIT 5, B",#C_PURPLE
DATA 0,"BIT 5, C",#C_PURPLE
DATA 0,"BIT 5, D",#C_PURPLE
DATA 0,"BIT 5, E",#C_PURPLE
DATA 0,"BIT 5, H",#C_PURPLE
DATA 0,"BIT 5, L",#C_PURPLE
DATA 0,"BIT 5, (HL)",#C_PURPLE
DATA 0,"BIT 5, A",#C_PURPLE

DATA 0,"BIT 6, B",#C_PURPLE
DATA 0,"BIT 6, C",#C_PURPLE
DATA 0,"BIT 6, D",#C_PURPLE
DATA 0,"BIT 6, E",#C_PURPLE
DATA 0,"BIT 6, H",#C_PURPLE
DATA 0,"BIT 6, L",#C_PURPLE
DATA 0,"BIT 6, (HL)",#C_PURPLE
DATA 0,"BIT 6, A",#C_PURPLE
DATA 0,"BIT 7, B",#C_PURPLE
DATA 0,"BIT 7, C",#C_PURPLE
DATA 0,"BIT 7, D",#C_PURPLE
DATA 0,"BIT 7, E",#C_PURPLE
DATA 0,"BIT 7, H",#C_PURPLE
DATA 0,"BIT 7, L",#C_PURPLE
DATA 0,"BIT 7, (HL)",#C_PURPLE
DATA 0,"BIT 7, A",#C_PURPLE

DATA 0,"RES 0, B",#C_PURPLE
DATA 0,"RES 0, C",#C_PURPLE
DATA 0,"RES 0, D",#C_PURPLE
DATA 0,"RES 0, E",#C_PURPLE
DATA 0,"RES 0, H",#C_PURPLE
DATA 0,"RES 0, L",#C_PURPLE
DATA 0,"RES 0, (HL)",#C_PURPLE
DATA 0,"RES 0, A",#C_PURPLE
DATA 0,"RES 1, B",#C_PURPLE
DATA 0,"RES 1, C",#C_PURPLE
DATA 0,"RES 1, D",#C_PURPLE
DATA 0,"RES 1, E",#C_PURPLE
DATA 0,"RES 1, H",#C_PURPLE
DATA 0,"RES 1, L",#C_PURPLE
DATA 0,"RES 1, (HL)",#C_PURPLE
DATA 0,"RES 1, A",#C_PURPLE

DATA 0,"RES 2, B",#C_PURPLE
DATA 0,"RES 2, C",#C_PURPLE
DATA 0,"RES 2, D",#C_PURPLE
DATA 0,"RES 2, E",#C_PURPLE
DATA 0,"RES 2, H",#C_PURPLE
DATA 0,"RES 2, L",#C_PURPLE
DATA 0,"RES 2, (HL)",#C_PURPLE
DATA 0,"RES 2, A",#C_PURPLE
DATA 0,"RES 3, B",#C_PURPLE
DATA 0,"RES 3, C",#C_PURPLE
DATA 0,"RES 3, D",#C_PURPLE
DATA 0,"RES 3, E",#C_PURPLE
DATA 0,"RES 3, H",#C_PURPLE
DATA 0,"RES 3, L",#C_PURPLE
DATA 0,"RES 3, (HL)",#C_PURPLE
DATA 0,"RES 3, A",#C_PURPLE

DATA 0,"RES 4, B",#C_PURPLE
DATA 0,"RES 4, C",#C_PURPLE
DATA 0,"RES 4, D",#C_PURPLE
DATA 0,"RES 4, E",#C_PURPLE
DATA 0,"RES 4, H",#C_PURPLE
DATA 0,"RES 4, L",#C_PURPLE
DATA 0,"RES 4, (HL)",#C_PURPLE
DATA 0,"RES 4, A",#C_PURPLE
DATA 0,"RES 5, B",#C_PURPLE
DATA 0,"RES 5, C",#C_PURPLE
DATA 0,"RES 5, D",#C_PURPLE
DATA 0,"RES 5, E",#C_PURPLE
DATA 0,"RES 5, H",#C_PURPLE
DATA 0,"RES 5, L",#C_PURPLE
DATA 0,"RES 5, (HL)",#C_PURPLE
DATA 0,"RES 5, A",#C_PURPLE

DATA 0,"RES 6, B",#C_PURPLE
DATA 0,"RES 6, C",#C_PURPLE
DATA 0,"RES 6, D",#C_PURPLE
DATA 0,"RES 6, E",#C_PURPLE
DATA 0,"RES 6, H",#C_PURPLE
DATA 0,"RES 6, L",#C_PURPLE
DATA 0,"RES 6, (HL)",#C_PURPLE
DATA 0,"RES 6, A",#C_PURPLE
DATA 0,"RES 7, B",#C_PURPLE
DATA 0,"RES 7, C",#C_PURPLE
DATA 0,"RES 7, D",#C_PURPLE
DATA 0,"RES 7, E",#C_PURPLE
DATA 0,"RES 7, H",#C_PURPLE
DATA 0,"RES 7, L",#C_PURPLE
DATA 0,"RES 7, (HL)",#C_PURPLE
DATA 0,"RES 7, A",#C_PURPLE

DATA 0,"SET 0, B",#C_PURPLE
DATA 0,"SET 0, C",#C_PURPLE
DATA 0,"SET 0, D",#C_PURPLE
DATA 0,"SET 0, E",#C_PURPLE
DATA 0,"SET 0, H",#C_PURPLE
DATA 0,"SET 0, L",#C_PURPLE
DATA 0,"SET 0, (HL)",#C_PURPLE
DATA 0,"SET 0, A",#C_PURPLE
DATA 0,"SET 1, B",#C_PURPLE
DATA 0,"SET 1, C",#C_PURPLE
DATA 0,"SET 1, D",#C_PURPLE
DATA 0,"SET 1, E",#C_PURPLE
DATA 0,"SET 1, H",#C_PURPLE
DATA 0,"SET 1, L",#C_PURPLE
DATA 0,"SET 1, (HL)",#C_PURPLE
DATA 0,"SET 1, A",#C_PURPLE

DATA 0,"SET 2, B",#C_PURPLE
DATA 0,"SET 2, C",#C_PURPLE
DATA 0,"SET 2, D",#C_PURPLE
DATA 0,"SET 2, E",#C_PURPLE
DATA 0,"SET 2, H",#C_PURPLE
DATA 0,"SET 2, L",#C_PURPLE
DATA 0,"SET 2, (HL)",#C_PURPLE
DATA 0,"SET 2, A",#C_PURPLE
DATA 0,"SET 3, B",#C_PURPLE
DATA 0,"SET 3, C",#C_PURPLE
DATA 0,"SET 3, D",#C_PURPLE
DATA 0,"SET 3, E",#C_PURPLE
DATA 0,"SET 3, H",#C_PURPLE
DATA 0,"SET 3, L",#C_PURPLE
DATA 0,"SET 3, (HL)",#C_PURPLE
DATA 0,"SET 3, A",#C_PURPLE

DATA 0,"SET 4, B",#C_PURPLE
DATA 0,"SET 4, C",#C_PURPLE
DATA 0,"SET 4, D",#C_PURPLE
DATA 0,"SET 4, E",#C_PURPLE
DATA 0,"SET 4, H",#C_PURPLE
DATA 0,"SET 4, L",#C_PURPLE
DATA 0,"SET 4, (HL)",#C_PURPLE
DATA 0,"SET 4, A",#C_PURPLE
DATA 0,"SET 5, B",#C_PURPLE
DATA 0,"SET 5, C",#C_PURPLE
DATA 0,"SET 5, D",#C_PURPLE
DATA 0,"SET 5, E",#C_PURPLE
DATA 0,"SET 5, H",#C_PURPLE
DATA 0,"SET 5, L",#C_PURPLE
DATA 0,"SET 5, (HL)",#C_PURPLE
DATA 0,"SET 5, A",#C_PURPLE

DATA 0,"SET 6, B",#C_PURPLE
DATA 0,"SET 6, C",#C_PURPLE
DATA 0,"SET 6, D",#C_PURPLE
DATA 0,"SET 6, E",#C_PURPLE
DATA 0,"SET 6, H",#C_PURPLE
DATA 0,"SET 6, L",#C_PURPLE
DATA 0,"SET 6, (HL)",#C_PURPLE
DATA 0,"SET 6, A",#C_PURPLE
DATA 0,"SET 7, B",#C_PURPLE
DATA 0,"SET 7, C",#C_PURPLE
DATA 0,"SET 7, D",#C_PURPLE
DATA 0,"SET 7, E",#C_PURPLE
DATA 0,"SET 7, H",#C_PURPLE
DATA 0,"SET 7, L",#C_PURPLE
DATA 0,"SET 7, (HL)",#C_PURPLE
DATA 0,"SET 7, A",#C_PURPLE

DATA -1


@ZeroTable_DATA
DATA 128,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

DATA 128,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DATA  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0


@StateTable_DATA
DATA  4,12, 8, 8, 4, 4, 8, 4,20, 8, 8, 8, 4, 4, 8, 4
DATA  4,12, 8, 8, 4, 4, 8, 4,12, 8, 8, 8, 4, 4, 8, 4
DATA  8,12, 8, 8, 4, 4, 8, 4, 8, 8, 8, 8, 4, 4, 8, 4
DATA  8,12, 8, 8,12,12,12, 4, 8, 8, 8, 8, 4, 4, 8, 4
DATA  4, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 4, 4, 8, 4
DATA  4, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 4, 4, 8, 4
DATA  4, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 4, 4, 8, 4
DATA  8, 8, 8, 8, 8, 8, 4, 8, 4, 4, 4, 4, 4, 4, 8, 4
DATA  4, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 4, 4, 8, 4
DATA  4, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 4, 4, 8, 4
DATA  4, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 4, 4, 8, 4
DATA  4, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4, 4, 4, 4, 8, 4
DATA  8,12,12,16,12,16, 8,16, 8,16,12, 0,12,12, 8,16
DATA  8,12,12, 0,12,16, 8,16, 8,16,12, 0,12, 0, 8,16
DATA 12,12, 8, 0, 0,16, 8,16,16, 4,16, 0, 0, 0, 8,16
DATA 12,12, 8, 4, 0,16, 8,16,12, 8,16, 4, 0, 0, 8,16, 0, 0, 0

@StateTableCB_DATA
DATA  8, 8, 8, 8, 8, 8,16, 8, 8, 8, 8, 8, 8, 8,16, 8
DATA  8, 8, 8, 8, 8, 8,16, 8, 8, 8, 8, 8, 8, 8,16, 8
DATA  8, 8, 8, 8, 8, 8,16, 8, 8, 8, 8, 8, 8, 8,16, 8
DATA  8, 8, 8, 8, 8, 8,16, 8, 8, 8, 8, 8, 8, 8,16, 8
DATA  8, 8, 8, 8, 8, 8,16, 8, 8, 8, 8, 8, 8, 8,16, 8
DATA  8, 8, 8, 8, 8, 8,16, 8, 8, 8, 8, 8, 8, 8,16, 8
DATA  8, 8, 8, 8, 8, 8,16, 8, 8, 8, 8, 8, 8, 8,16, 8
DATA  8, 8, 8, 8, 8, 8,16, 8, 8, 8, 8, 8, 8, 8,16, 8
DATA  8, 8, 8, 8, 8, 8,16, 8, 8, 8, 8, 8, 8, 8,16, 8
DATA  8, 8, 8, 8, 8, 8,16, 8, 8, 8, 8, 8, 8, 8,16, 8
DATA  8, 8, 8, 8, 8, 8,16, 8, 8, 8, 8, 8, 8, 8,16, 8
DATA  8, 8, 8, 8, 8, 8,16, 8, 8, 8, 8, 8, 8, 8,16, 8
DATA  8, 8, 8, 8, 8, 8,16, 8, 8, 8, 8, 8, 8, 8,16, 8
DATA  8, 8, 8, 8, 8, 8,16, 8, 8, 8, 8, 8, 8, 8,16, 8
DATA  8, 8, 8, 8, 8, 8,16, 8, 8, 8, 8, 8, 8, 8,16, 8
DATA  8, 8, 8, 8, 8, 8,16, 8, 8, 8, 8, 8, 8, 8,16, 8

: RETURN'__DEFINITIONS__

:@__EOF__
 @__EOF__
END

